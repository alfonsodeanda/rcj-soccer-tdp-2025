Timestamp,What is your team's name?,What league do you participate in?,Where are you from?,"If other teams have questions about your robot, now or in the future, what email address(es) can we publish along with this document for people to reach you?

(You can put in multiple email addresses, like multiple team members, an email for the whole team or both. Feel free to share other ways of communication like Discord handles)",Team Social Media Links (if you have any),"Upload a photo of your whole team with your mentor and robots

Note: This is not mandatory and will be published along with your TDP if you choose to upload something",What are the names of the team members and their role(s)?,"How often did your team meet?
(e.g. 90 minutes once per week or a day every weekend.)","Where did you meet to work on your robot?
(e.g. a robotics room at school, at some other place, one of your homes, school library etc.)",When did your team start working on this year's robot?,Which RoboCupJunior competitions have you competed in and in which leagues?,"Which parts of your work received the most contribution from your mentor?
",How did you manage the workload?,Which AI tools did you use?,Robot 1 Overall View,Robot 1 Front view,Robot 1 Back view,Robot 1 Top View,Robot 1 Bottom View,Robot 1 Right View,Robot 1 Left View,How do you find your position inside the field and how do you use that position to move your robots around?,Robot 2 Overall View,Robot 2 Front view,Robot 2 Back view,Robot 2 Top View,Robot 2 Bottom View,Robot 2 Right View,Robot 2 Left View,How did you design the mechanical parts of your robots?,How did you build your design?,How many motors have you used and why?,"If your robot has a kicker, explain how you designed and built the mechanics of the kicker","If your robot has a dribbler, explain how you designed and built the mechanics of the dribbler.",CAD design files,Mechanical Innovation,Photos of your mechanical designs highlights,Provide us with a block diagram of your robot's electronics,How does your power circuits work?,How do you drive your motors? Explain the circuits you use for that,"What kind of micro controller or board do you use for your robot? Why did you decide to use this part for your robot? If you have more than 1 processor, explain each one separately.",How does your ball detection sensors and/or camera[s] work?,How does your line detection circuits work?,What sensors do you use for navigation and how are these sensors connected to your processor? What sensors do you use to find your position in the field? What about the direction your robot faces?,How do you drive your kicker system? How does the circuit make the kicker work?,How does your dribbler system work? What components and circuits did you use to drive it?,Schematics of your robot,PCB of your robot,Innovations,Photo of your circuit boards highlights,How do you use your processor to move your motors?,How do you find where the ball is? How do you read the data from the ball detection sensors or camera?,How does your algorithm work to catch the ball? Is there a difference between your robots in how they move towards the ball? Explain the differences.,How does your robot find the lines to stay inside the field? What algorithms do you use to avoid going out of bounds?,What algorithms do you use to score goals? How do you use your kicker and dribbler to handle the ball?,What algorithms do you use to avoid the opponent team scoring? How do your robots defend your own goal?,Do your robots communicate with each other? How do you use this communication to your advantage?,Innovations,GitHub link,Bill of Materials (BOM),How much did it cost you to build your robots?,How did you gathered the funds to build the robots?,How affordable was it to compete in RoboCupJunior Soccer?,Have you checked all of your answers?,We publish TDPs and posters during or after the competition as described in the beginning,Email Address,TDP File Upload (Not required),Column 67
5/21/2025 0:57:50,Hikaru's Sample,Open League,USA,aqua.hika@gmail.com,github.com/aquahika,https://drive.google.com/open?id=1_8LMXZ0_94PJgRc15Ff279dQy_9IEpgw,"
Alex Chen (Team Leader) - I handle programming and strategy development
Maya Rodriguez - Our hardware specialist and robot construction expert
Tyler Washington - Electronics engineer responsible for sensors and circuitry
Olivia Kim - Programming assistant and documentation specialist
Ethan Patel - Testing coordinator and mechanical troubleshooter
","Three times a week after school (Monday, Wednesday, Friday) for 2-3 hours each session in our school's robotics lab","We primarily meet in Lincoln High School's robotics lab. On weekends, we use Maya's garage (which has a full-size RoboCup field) and occasionally the Portland Community Makerspace. For specialized equipment, we sometimes use Tyler's uncle's research lab at Portland State University.","We started working on this year's robot immediately after last year's regional competition ended, about 10 months ago. We took about two weeks to analyze our previous performance and brainstorm improvements before diving into the design phase for our new robot. This early start gave us plenty of time for multiple design iterations, extensive testing, and refinement of both hardware and software components before the international competition.","US Regional Championships 2023: Soccer 1v1 Entry League - 2nd Place
US National Championship 2024: Soccer Lightweight League - 1st Place
Robocup Americas 2025: Soccer Lightweight League - 2nd Place","Dr. Ramirez helped most with our motion control algorithms, implementing PID controllers for precise movement. She guided our sensor fusion approach, helping us integrate multiple data sources reliably. Most valuably, she taught us systematic debugging methods rather than fixing problems for us.","We used Trello for task management and timelines, Slack for daily communication, and GitHub for code collaboration. Weekly planning meetings kept everyone accountable, with rotating leadership roles to distribute workload evenly across team members.","We used GitHub Copilot for coding assistance, DALL-E for initial design visualizations, and ChatGPT to help debug algorithms. Fusion 360's generative design aided our chassis optimization process.",https://drive.google.com/open?id=1kzH71650jnmndipkTZUJdlXBsVqZA5YL,https://drive.google.com/open?id=1yiTN03h1AJFOuCih9T0OBhfykOyXMxi6,https://drive.google.com/open?id=1oZi-q9W9y1fxPV1-55MO_qNtZJfJYnlC,https://drive.google.com/open?id=1mH5qmP_HlDMFWB6pObC1_rVfM3DRBhRQ,https://drive.google.com/open?id=1EHWkYJH29HAjWXxcNfSRocFJdTDOJ412,https://drive.google.com/open?id=1o9YFHRpZhnDcz25XlaUJR60QEgrwwf1B,https://drive.google.com/open?id=1Ep6HTGXZKAxwKObG0ahTe1IetYJRTGlj,"We use infrared sensors to detect field lines and ultrasonic sensors for wall detection, creating a coordinate map. Our IMU provides orientation data. This sensor fusion gives relative positioning that our algorithm uses to navigate strategically during gameplay without external markers.",https://drive.google.com/open?id=1AgyIWH6KtoDfZQykNABaSeNUV-UVE8MK,https://drive.google.com/open?id=1Yg15LYjo6nLsoea5CMBigpkZv789EJ8G,https://drive.google.com/open?id=11kkM6hPQ45_CSlUzMra7LQpjjxtWVWeH,https://drive.google.com/open?id=1gKdbguQKVilUzMZMn8_A22yJMEaYnkNP,https://drive.google.com/open?id=1WO30su936bM13R9-dAoQ5RUPdtq3V2CS,https://drive.google.com/open?id=1vCr_rbC65p2feSY4f5a_V_EV0n1y9O45,https://drive.google.com/open?id=1fgC1AEL2lBV_Zlfx2S_FVFcnxPJ_aaYA,"We used Fusion 360 for CAD design, iterating through prototypes. Key considerations: low center of gravity, wheel positioning for stability, and compact ball handling mechanisms. We revised our chassis design to reduce weight while maintaining structural integrity after field testing exposed weaknesses.","We designed in Fusion 360, starting with 3D-printed prototypes. Key considerations: low center of gravity, wheel placement for maneuverability, and ball control mechanism. We refined the chassis for weight reduction while maintaining structural integrity after field testing.","We use four motors: four N20 gearmotors (6V, 200RPM) for omniwheel drive and two MG90S servos - one for ball control and one for kicker mechanism. Custom 3D-printed omniwheels provide enhanced maneuverability and reduce skidding during direction changes.",Our solenoid-powered kicker uses a spring-loaded mechanism triggered by an L298N motor driver. The 3D-printed lever arm maximizes force transfer while minimizing weight. A tension adjustment system allows calibration for different kick strengths during matches.,Our dribbler uses a rubber-coated aluminum roller powered by a 6V N20 motor. We designed a spring-loaded mounting system to maintain optimal contact pressure with the ball. 3D-printed housing allows quick angle adjustments to improve ball control during gameplay.,github.com/aquahika/cad-repo-link,Our modular chassis design allows rapid component swapping in 30 seconds without tools. The magnetic quick-release system for both drivetrain and electronics enables mid-match repairs and strategic configuration changes based on opponent analysis.,"https://drive.google.com/open?id=1Ns6K9s8ajwW-y-Bybxq9R60hoH33AZiz, https://drive.google.com/open?id=1L2damAnqO16wnOugXt-tTzYjMvEgh4NJ, https://drive.google.com/open?id=1ZFez062HqANIKGX0eBB4DnhCWsZ2mexm",https://drive.google.com/open?id=180-72jlSplRE6Coa1IlRh1WlubeRWN0L,Our robot uses a 7.4V LiPo battery as the main power source. We employ a LM2596 buck converter to step down to 5V for our Raspberry Pi Pico microcontroller and sensors. Motors receive direct battery voltage through an L298N driver. A separate MT3608 boost converter provides 12V for our solenoid kicker when needed. All circuits include fuse protection.,"We use L298N H-bridge drivers to control our DC motors, allowing bidirectional operation with PWM speed control. For our servos, we connect them directly to the Raspberry Pi Pico's PWM outputs through a separate 5V regulator to prevent current spikes from affecting the microcontroller. The kicker solenoid is driven by a MOSFET circuit with a flyback diode to protect from inductive kickback.","We use a Raspberry Pi Pico as our main microcontroller, chosen for its dual-core RP2040 processor that lets us run motor control and sensor processing in parallel. We appreciate its affordability, excellent documentation, and MicroPython support which accelerated our development. The built-in PIO state machines handle precise timing for our sensors while the ARM Cortex-M0+ cores manage game strategy and movement algorithms.","Our ball detection system uses an OV7670 camera module connected to the Raspberry Pi Pico. We process low-resolution images (160x120) to identify the orange ball using color thresholding and blob detection algorithms. The camera is positioned at a 30-degree downward angle, giving us a ~60cm detection range. We supplement this with three infrared proximity sensors positioned in a fan pattern for close-range detection when the ball isn't visible to the camera.",Our line detection system uses four TCRT5000 reflective IR sensors positioned at each corner of the robot's underside. Each sensor outputs an analog signal proportional to the reflected light intensity. We use the Pico's ADC to read these values at 100Hz and apply a threshold filter to distinguish between the green field and white lines. A simple rolling average algorithm helps filter noise and prevent false detections during rapid movements.,"For navigation, we use four TCRT5000 IR sensors for line detection, connected to the Pico's ADC pins. An MPU6050 IMU provides gyroscope data for orientation tracking via I2C protocol. We determine field position using a combination of line detection data and a simple odometry system based on motor encoder feedback (AS5600 magnetic encoders connected via I2C). This sensor fusion approach gives us relative positioning without external markers, allowing us to maintain awareness of field boundaries and robot heading throughout gameplay.
",Our kicker uses a 12V solenoid powered by a capacitor bank (3x 1000μF capacitors) charged via MT3608 boost converter from our main battery. An IRLZ44N MOSFET controlled by the Pico triggers the discharge. We implemented a current-limiting charging circuit with an NE555 timer to prevent battery drain. A flyback diode protects against voltage spikes. The system delivers consistent kicks with adjustable power through PWM control of the charging circuit.,"Our dribbler system uses a rubber-coated aluminum roller driven by a 6V N20 gearmotor (300RPM). The motor connects to an L298N driver running at ~80% duty cycle for optimal ball control. We implemented a current-sensing circuit using an ACS712 sensor that detects when the ball is captured or if the dribbler stalls. This feedback allows us to dynamically adjust motor speed via PWM from the Pico, maintaining consistent ball control without wasting power or risking motor damage during extended operation.",https://drive.google.com/open?id=11xstgJ6wetq9BxGja40t2Ze_9I1sZ3Dz,"https://drive.google.com/open?id=1AiEqEeWehYfC2W58lMvvjNYjt5RSCKqr, https://drive.google.com/open?id=1Mq2HM1pSg2oRxxcl8vlonqTGHxmmgYHu, https://drive.google.com/open?id=1fZHdEfkwLYFNIPfIltRnuTrd2E_fh5jP",Our custom PCB integrates all circuits with quick-disconnect magnetic connectors for rapid module swapping. The adaptive power management system automatically balances performance vs. runtime based on match conditions and battery level.,"https://drive.google.com/open?id=1Dpi_xP-zelkp_CHT4IzEJ7fJHDHtOO1s, https://drive.google.com/open?id=15VmRLAj8TS0pP3LjyPUecS_p1lUj0XiC, https://drive.google.com/open?id=1Lh8xbpCjUSoTu247ZfsXHpvTd1pA2OHx, https://drive.google.com/open?id=1ojOiMZ8LfAik6Gx80teAh5eeThYCD-C4","We use the Raspberry Pi Pico's hardware PWM capabilities to generate precise motor control signals. These PWM signals are sent to L298N H-bridge drivers that convert them to the appropriate voltage and current levels for our motors. Our software implements PID control loops that use encoder feedback to maintain accurate speed and position control, automatically adjusting power based on field conditions and battery voltage.","Our OV7670 camera connects to the Pico via a parallel interface using PIO state machines for efficient data transfer. Images are processed using a color filtering algorithm that isolates the orange ball against the green field. We calculate the ball's relative position and distance based on its size and position in the frame. The camera data is supplemented by three IR proximity sensors that provide immediate detection when the ball is very close, with sensor readings collected through the Pico's ADC channels.","Our algorithm uses a vector-based approach where the ball's position vector combines with field position data to create optimal interception paths. The robot calculates a leading trajectory, predicting where the ball will be rather than chasing its current position. We dynamically adjust approach speed based on distance - faster from afar, then precisely slowing for capture. As we only have one robot design, we use different software profiles that modify PID constants and strategy parameters depending on whether we're playing offense or defense in a particular match.","Our robot uses four IR sensors to detect white lines. When a line is detected, we implement a vector field algorithm that creates a virtual repulsive force perpendicular to the line. This force increases exponentially as the robot approaches the boundary, effectively steering it back toward the field center. We combine this with a field position estimation maintained through dead reckoning from our encoders and IMU. This dual approach ensures the robot stays in bounds even during high-speed maneuvers or when strategically positioning near field edges.","We use vector-based goal targeting with dynamic force modulation for the kicker. Our algorithm calculates optimal approach angles, engages the dribbler until alignment with goal, then triggers the kicker with power based on distance and defensive coverage.","We implement a predictive defensive zone system tracking ball trajectory. Our robot positions between ball and goal, adjusting stance based on opponent position. When intercepting, we use curved approach paths to deflect the ball toward sidelines rather than blocking directly.","Our team currently has only one robot design that we use in competition, so we don't implement robot-to-robot communication in our system. If we were to expand to multiple robots in the future, we would implement communication using Bluetooth modules to share positioning data and coordinate defensive and offensive strategies.","Our most innovative algorithm is our ""Dynamic Approach Vector System."" It continuously calculates optimal interception paths by predicting ball movement patterns rather than simply chasing current position. It adjusts approach angles based on desired ball handling (blocking vs dribbling) and incorporates field position awareness to avoid pushing the ball out-of-bounds. This gives us a significant advantage in ball possession and positioning, especially against teams using simpler chase algorithms.",https://github.com/aquahika/M5Stack-MHZ19-Co2Display,https://drive.google.com/open?id=1R7SesNt736rS4y5_3non_rnDBcRTQsmn,"Robots: $420 (final components in current build) 
Experiments: $650 (prototyping materials, failed designs, broken parts) 
Environment: $780 (field construction, tools, test equipment, development boards)
Currency: USD
","45% school grant funding
25% local tech company sponsorship
15% online crowdfunding campaign
10% team member contributions
5% university engineering department support",8,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",,,
7/2/2025 9:13:18,Mushrooms,Lightweight League,Slovakia,"zayonc@spse-po.sk, emalujzakohaniova@gmail.com, visnovsky@spse-po.sk, destinko497@gmail.com",https://www.instagram.com/_the__shrooms__/,,"Martin Zayonc: Programming
Igor Višňovský:3D design
Ema Lujza Kohániová: Electronics",two hours per week,one of our homes and school,september 2024,"slovak open 2025: soccer lightweight,
slovak open 2024: soccer lightweight,
croatia open 2025: soccer lightweight
European Championship 2024: Lightweight League",none,We communicated through a Discord and we met in person.,ChatGPT,https://drive.google.com/open?id=1TaDKKPV80cBd85Mud5J3RnS7ZtDqzVHx,https://drive.google.com/open?id=1fr0aTDDLfY27q57pJr96hg_QAiO3cLWU,https://drive.google.com/open?id=1JVQssvFaiY0KcMF3x62dLJsZ3sj-GAB8,https://drive.google.com/open?id=1KEpzs1ptiUmOp0mSDgMefwfTgN2da5vw,https://drive.google.com/open?id=1tIpk-CGwoBqG-SQXw8R1dKy7kMjLxWct,https://drive.google.com/open?id=1ORDGSwFJ1dstaH7sUuwqZcUtGEzWmFF7,https://drive.google.com/open?id=1MRZEU0cUt-VZsl6FItES3If42iKATedX,"mmWave radars and/or ultrasonic sensors we use to to find the goal
To determine the robot’s position using mmWave radars, ultrasonic sensors, and a gyroscope, you can fuse data from these sensors to estimate motion and surroundings. The gyroscope tracks the robot’s orientation (heading) over time, providing rotational data essential for understanding direction. Ultrasonic sensors measure distances to nearby objects or field boundaries, allowing you to infer position changes as the robot moves. mmWave radars can detect obstacles and fixed structures with higher range and reliability than ultrasonics, especially in dynamic or low-visibility environments. By combining these inputs through sensor fusion (e.g., with a Kalman filter), you can approximate the robot’s position on the field and update it as the robot moves.",https://drive.google.com/open?id=1l5RgvCMkZJZGbJwBjXOnghKC9vA2bEJh,https://drive.google.com/open?id=11jSnqTdxkdg4Z_I6jyC2jJzvt2rzPdGX,https://drive.google.com/open?id=1eEKTQPIzy5iNTZ7XBThPGP0ar-Huktg3,https://drive.google.com/open?id=1W4jQqH0dIWkKeMNf8xLvYlNxRdTx4N35,https://drive.google.com/open?id=1ovVFBGZGsdey7r8eXAd9Ll4Aoa5C2msu,https://drive.google.com/open?id=1tkjsZwLvYKg6eQA7lFxRXayBx_PhyKuf,https://drive.google.com/open?id=1scIPfxtjV--QVFn7qY6oDhvuyxs8vaRE,"We designed our robots’ mechanical parts in Fusion 360, enabling precise 3D modeling and component layout. Guided by RoboCup Soccer Lightweight league rules, we focused on size, weight, and mobility to create a compact, modular design for easier maintenance and upgrades. Key considerations included motor placement for traction, sensor positioning for clear vision, low center of mass for stability, and efficient cable routing.
After initial tests, we redesigned the frame for better access to internal components, reducing setup time. Sensor placement was optimized to eliminate blind spots, and later iterations included standardized parts and mounting slots to support future modifications. These improvements were driven by testing and real-match observations.
","We built our design using a mix of 3D printing, hand tools, and external manufacturing. Most of the structure was made with FDM printers using PLA and PETG, enabling rapid prototyping and custom part assembly. Basic tools like drills and files allowed for on-the-fly adjustments during the build.
Custom PCBs were produced by JLCPCB from our Gerber files, ensuring seamless integration with the mechanical layout. Minor issues such as tight clearances or misaligned holes were fixed through quick tweaks in Fusion 360 and reprints. This iterative approach led to a clean and reliable final build.
","We equipped each robot with four motors to enable full omnidirectional movement—forward, backward, sideways, and rotation. This setup allowed precise control of each wheel, making fast repositioning and agile maneuvers possible during RoboCup Soccer matches.
Four motors offered the ideal balance of mobility, performance, and simplicity. Fewer would limit movement, while more would add unnecessary complexity and weight. This configuration ensured smooth operation even in tight, unpredictable game situations.
",we have basic solanoid kicker,N/A,https://github.com/destinko497/robot-2025-robocup-junior-soccer-lightweight,"Our modular chassis design uses a two-board system for flexibility and reliability. The bottom PCB, securely fixed to the chassis, acts as the robot’s main brain—it includes the central processor, motor drivers, and power circuits, ensuring stable control and power management.
Above it, a swappable top PCB connects via user-friendly connectors and hosts sensors, communication interfaces, and peripherals like robotic arms. This separation keeps core electronics protected while allowing quick upgrades or reconfiguration. It simplifies development, speeds up testing, and enables easy customization without redesigning the entire system.
",,https://drive.google.com/open?id=10EtkWYP7yUERlsKxzeLGnHU_76bxAswS,"Our robot is powered by a custom 3S LiPo battery (11.1V nominal), which directly drives the motors. From this main power source, we use two voltage regulators: an LM2596 buck converter provides 5V for LEDs, ensuring efficient power with minimal heat, while an LM7805 linear regulator supplies a clean 5V for the Teensy microcontroller.
From the LM2596’s 5V output, an AMS1117 steps the voltage down to 3.3V for sensors. This 3.3V line is further regulated by an LD1117 to 1.8V for the mmWave radars. This multi-stage setup ensures each component receives the correct, stable voltage for reliable operation.
","We use MC33886 motor driver ICs to control our brushed DC motors, managing both power delivery and direction. The Teensy 4.1 microcontroller generates PWM signals to regulate motor speed precisely. Since the Teensy outputs 3.3V logic, these signals are shifted to 5V using an 8-channel logic level converter to match the MC33886’s input requirements.
The motor drivers convert the 5V PWM signals into controlled voltage and current for the motors, enabling smooth speed adjustments and direction control. This setup ensures efficient, responsive motion—crucial for agile performance on the RoboCup field.
","For For RoboCup, we use the Teensy 4.1 as the main microcontroller due to its high processing speed and ample I/O pins, which allow efficient sensor integration, motor control, and real-time calculations for precise movement.
An ESP32 on the top PCB handles wireless communication during matches, enabling the robot to send and receive data without disrupting the Teensy’s core control tasks. While the ESP32 can support modules like a robotic arm, this feature is reserved for future projects and isn’t used during RoboCup.
","We use 11 TSOP3836 infrared sensors on the bottom PCB for ball detection, with their signals routed through a multiplexer. This lets the Teensy efficiently read all sensor inputs without dedicating a separate pin to each one.
On the top PCB, 24 TSSP4038 sensors are connected via two MCP23017-E/SO I/O expanders, which interface with the Teensy over the I2C bus. This setup minimizes wiring between the boards and allows the Teensy to monitor all sensors simultaneously, providing wide coverage and accurate ball detection across the field.
","Our line detection system uses 24 SMD phototransistors arranged to detect contrast between the white field lines and green turf. Each is part of a voltage divider circuit that converts light intensity into a voltage signal. To improve accuracy, we illuminate the area beneath the sensors with 38 red LEDs, enhancing the contrast between the lines and the field.
The phototransistor outputs are routed through two multiplexers, allowing the Teensy to read all signals efficiently using fewer input pins. This setup enables fast, precise line detection while keeping wiring simple and compact.
","For navigation and positioning, we use mmWave radar sensors connected to the Teensy 4.1 via a TCA9548APWR I2C multiplexer, which allows multiple radars to share the same bus without address conflicts. These sensors provide real-time obstacle detection and environmental mapping.
To track orientation, we use a BNO055 gyroscope connected over I2C, delivering accurate yaw, pitch, and roll data for stable movement control.
We also occasionally use US-100 ultrasonic sensors via UART for distance measurement, but due to their slower response and lower reliability compared to the radars, they serve mainly as backup sensors.
","Our kicker system uses an XL6009 boost converter to step up the battery voltage to 35V, powering the solenoid kicker. The solenoid is switched via an optocoupler, providing electrical isolation between the high-voltage kicker circuit and the low-voltage control electronics. This protects the microcontroller from voltage spikes and noise, ensuring safe and reliable kicker operation.
",N/A,"https://drive.google.com/open?id=1DkoG-joYNgbwd63JcMmjoHcYNYB8L5rA, https://drive.google.com/open?id=17eQN9LXmchSm1ML6RrIqjEl6zhjq5Kp2, https://drive.google.com/open?id=1InMW1YN2a-gRKHpAoRzeNl58Ik4cJtnL","https://drive.google.com/open?id=1L6LI_buBcufZcz06Y0WcR8Fei4YQkH1M, https://drive.google.com/open?id=1PxiiwkCSlN3HEJ-S7NBifwWyIOAG72Zk, https://drive.google.com/open?id=155s05IbSBhF3-fXnlFJVsyOF2cktHu4t","Our proudest electronics achievement is integrating mmWave radar sensors for mapping and navigation. Unlike common ultrasonic or IR sensors, mmWave radars provide higher precision, greater reliability across lighting conditions, and better resistance to environmental noise. This lets our robot detect objects and walls more accurately, enabling robust performance in the fast-paced, chaotic RoboCup environment.
We’re also proud of our modular electronics design, which splits the system into two PCBs: the bottom board holds the Teensy microcontroller, power circuits, and motor drivers—serving as the robot’s core. The top PCB is a modular, easily swappable attachment for sensors, robotic arms, or other peripherals. This approach speeds up development, simplifies debugging, and lets us quickly adapt the robot for different tasks beyond RoboCup.
","https://drive.google.com/open?id=1R6X1rOFywykVdE13ALyGURL8ixlYYiUT, https://drive.google.com/open?id=18AaeG0yHpqH0yqtKVKSKGZDrqwyJosoe","We use the Teensy 4.1 microcontroller to control our motors by generating PWM (Pulse Width Modulation) signals that determine motor speed and direction. These PWM signals are first passed through an 8-channel logic level converter, which shifts the 3.3V signals from the Teensy to 5V, making them compatible with our MC33886 motor driver ICs","To locate the ball, we use 11 TSOP3836 IR sensors on the bottom PCB and 24 TSSP4038 IR sensors on the top PCB, all detecting the ball’s modulated IR signal. The TSOP sensors connect through a multiplexer, while the TSSP sensors interface via two MCP23017 I/O expanders over I2C, enabling efficient data reading with minimal wiring.
Each sensor is assigned a fixed angle based on its position. When multiple sensors detect the ball, we calculate a vector average of their angles weighted by signal strength, providing a smooth and accurate estimate of the ball’s direction. This lets the robot track and pursue the ball effectively in real time.
","Our algorithm starts by calculating the ball’s direction using vector averaging from all active IR sensors. The robot then rotates to face the ball and drives toward it, adjusting speed based on distance and angle. As it nears the ball, it slows down for better control and to prevent the ball from bouncing away.
At the same time, the robot tries to align its orientation with the opponent’s goal while approaching, enabling quicker and more accurate shots once it gains control. This general strategy is used consistently across all our robots.
","Our robot uses 24 SMD phototransistors arranged around its base to detect the white field lines, paired with 38 red LEDs that boost contrast against the green turf. The phototransistors form voltage divider circuits, with signals read by the Teensy 4.1 via two multiplexers, providing full 360° line detection.
We process this data like our ball tracking system: each sensor has a fixed angle, and when multiple sensors detect a line, we calculate a vector average to estimate its direction. This helps the robot recognize field boundaries and adjust its movement—slowing down, stopping, or backing up as needed—while maintaining focus on the ball and staying within the field.
","We don’t use a fixed scoring algorithm; instead, our custom strategy adapts to the game situation. The robot continuously tracks the ball via vector averaging from IR sensors and aligns itself with both the ball and the opponent’s goal. Once properly aligned and the ball is centered, it activates the 35V solenoid-powered kicker to shoot toward the goal.
",N/A,N/A,"The algorithm we’re most proud of is our custom mapping and localization system, which combines data from multiple mmWave radars and a BNO055 gyroscope to estimate the robot’s position and orientation on the field. Unlike traditional SLAM methods—which are often too complex and resource-heavy for microcontrollers—our solution is optimized to run efficiently on the Teensy 4.1.
We developed it because existing SLAM libraries were too slow for real-time use in RoboCup matches. Our algorithm processes radar distances to detect nearby walls and fuses this with gyroscope orientation data to accurately estimate the robot’s location relative to field boundaries. This lightweight, efficient approach helps our robot navigate smarter and faster in crowded, dynamic environments, giving us a real edge during competitions.
",https://github.com/destinko497/robot-2025-robocup-junior-soccer-lightweight,https://drive.google.com/open?id=1FO8XBCdr9quQayjhnz1Dnvz0vBpuAOzm,"Robots (cost of components that are in your robots right now):800 Euro each
Experiments (failed builds, broken hardware etc.): 2500Euro
Environment (fields, balls, etc.) : 80 Euro
1 Euro= 1.17 USD","80% parents
20% school",1,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",kohaniova@spse-po.sk,,
7/5/2025 23:03:27,UGAMM-SOCCER,Lightweight League,"Macau, China","pun0804@gmail.com
emmrcjlight@gmail.com",www.youtube.com/@emmrcjlight,https://drive.google.com/open?id=1fPlouftvoz_pV5WndYVNQCnpK4b2ROVT,"Wong Pak Hang: circuit and software
Cheong Iok Chi: hardware and 3d printer
Pun Chon Lam Ivan: harware and camera",workdays: 6 hours per day ; Holidays: 8 hours per day, a robotics room at school,I've been preparing for this year's tournament since the end of last year's Worlds.,"RCJ2024--Netherlands: Lightweight League
RCJ2023--France: Lightweight League
china open 2025:  Lightweight League
china open 2024:  Lightweight League
china open 2023:  Lightweight League","We couldn't solve the problem with the camera's inspection gantry, and our mentor helped us fix the program code and develop a new camera (maixcam) together!","We communicated through a instagram group and assigned the tasks using Wechat.
We also used GitHub for issues and code.And during our daily robotics training, our team meets every few days to discuss any difficulties encountered when dividing up the work so that problems can be solved successfully.","
We used Deepseek and Chatgpt for camera data analysis, even Notebook and Poster suggestions! We can quickly pass the data from the camera to deepseek, which eliminates the need for GeoGebra calculations and saves a lot of time. For the hardware design, we also used artificial intelligence to analyze the strengths and weaknesses of the design. We then optimize the design according to the suggestions given.",https://drive.google.com/open?id=1l-Mzea3Ufr3PwuW2imVq7Uq6FklUph-f,https://drive.google.com/open?id=1OSanwFvoPZW7zOvHkLt0p3dz5Lel2Tjw,https://drive.google.com/open?id=1OuVs61O_PsQJQgj-O0mwO3Gx9wrSB0RP,https://drive.google.com/open?id=1_yv9goybcEC7eS_1jBT2xqDKnX-cGJVE,https://drive.google.com/open?id=1I5DeNQBIKjxAoWXtA6Zbufh_TLqm4p4A,https://drive.google.com/open?id=1p5FnumlzZl6SWM-2Vf-UTArieb7S-qv_,https://drive.google.com/open?id=1ZbwIWs8qPHD8-4gcTIFHWn38rJ4cXVcC,"We installed four ultrasonic detections on the robot, which was used to detect the walls around the field in order to determine the position of the robot itself on the field.We use ultrasound to move the robot, e.g., in the opposite direction when the robot detects that it is too close to a wall.",https://drive.google.com/open?id=1gibK1ubRlR-iQSXXFMheNYPg7oQGMf6P,https://drive.google.com/open?id=1GLbgH-bMgPv75CiFgfQT2VxjYgJrGNia,https://drive.google.com/open?id=1LJ6euutSvERYp0RHDkhc4xefN7i1Hkq0,https://drive.google.com/open?id=16olPGD-Gzh35JRDUOZAGto1vumyzZA8P,https://drive.google.com/open?id=1TPffcKGEP8wUa4PlkGmSRbapNoTw52ad,https://drive.google.com/open?id=1v7t6dnbEJP-lY8VOtDpjUgiFPq2a46Yf,https://drive.google.com/open?id=1cIi4WmyIO_MGW5uwNDv8oVpSu2WozDT_,"We will be designing our offensive and defensive robots with the goal of kicking a soccer ball into the opposing team's goal and stopping the opposing team from attacking outside of our own goal as a way to improve the performance of our robots. We have designed our robot considering the weight of the robot and the assembly of the disk ball and kicker. For better design, we use solidwork to draw and 3D printing( Bambu Lab X1 Printer)to improve efficiency. The bottom, middle and top of our robot are all 3D printed, which greatly improves the unity of our robot.","We will use the dimensions of the soccer ball, the field and the gantry as a reference for the design of the mechanical part of our robot. First, we use SOLDWORDS to draw the 3D design of the robot, then we print out (Bambu Lab X1 Printer) the parts one by one. Our four motors are made by Faulhaber (12v 750rpm), IR sensors and Ultrasound sensor  are made by Zhongming, camera is made by maixcam, motor governor is made by Sunbond, batteries are made by Shang yi (3s 11.1v 1500mAh), and the rest, such as the line sensor, are handmade.","We use four motors to drive the handmade universal wheel, so that the robot can carry out the front and back of the left and right movement, rotation, panning and other actions.
3D printer(Bambu Lab X1 Printer), motors are made by Faulhaber (12v 750rpm),  IR sensors and Ultrasound sensors  are made by Zhongming, camera is made by maixcam, motor governor is made by Sunbond, batteries are made by Shang yi (3s 11.1v 1500mAh), main controller (joinMax Digital  x4-RCU) made by JoinMax.","Use the motor to drive the incomplete gear to drive the rack and pinion slide to move backward and empty the ball-eating position, when the incomplete gear disengages from the rack and pinion, use the tension of the rubber band to make the slide move forward to kick the ball out","We first assembled two small cylinders with gears so that they can operate synchronously, and then drive them with brushless motors to make them rotate rapidly in opposite directions, so that the soccer ball can be fixed in the robot's disk within the scope of the ball, waiting for the right time to attack.",https://github.com/ichi123007/ugamm-soccer.git,"What we're most proud of is the camera. This camera is made by maixcam company, we used MaixHub: Online AI model training platform, no need for AI knowledge and expensive training equipment, one-click model training, one-click deployment to MaixCAM.Combined with artificial intelligence, we can quickly and accurately lock the gantry, which solves the problem of our defenders getting into the penalty box, and allows the attackers to shoot more accurately into the gantry.","https://drive.google.com/open?id=18Y_zVDXqRxTrvdM5hY5MpR2zxFurJWVE, https://drive.google.com/open?id=1k50quUqlN2jHDkmZLQxlCfTSgMnP-ei3, https://drive.google.com/open?id=1ekVvkV1sdounAP9S2QI6FTd_vg493Nb5, https://drive.google.com/open?id=1row-CwcCNwH7AcHu-9xA_GxOE0tCsgK1",https://drive.google.com/open?id=10OhfRg5ifgz-cycYh2RF94-mI8yvJPfh,"Our robots are equipped with a 12V battery pack, direct connection to RCU, direct connection to motor drive board for motor use (robot movement), direct connection to motor drive board for motor use (Dribbler), direct connection to kick motor, direct connection to kick relay.",Connect the motors to the RCU and download the program to the RCU to make it drive the motors.,"We use JoinMax Digital JMP-BE-5144 (x4-RCU) as a controller for our robots, it support  bluetooth and CPU is Cortex-M4. It's programming language support C language and flow chart.","When the ball detection sensors on the robot receive infrared light from the ball, the robot moves toward the ball to attack or defend.","our robots used circular line. The Line Sensor board PCB features a ring-shaped design. The power supply is divided into 3.3V for LEDs and 5V for line sensors, effectively reducing heat generation. Additionally, aligning the pin headers with the main substrate facilitated a neat and organized wiring layout.","We use sensors to detect how far away the robot is from the field divider, to confirm its position, and a compass to make sure the robot always faces the direction of the opponent's gantry. Sensors are connected to the robot controller. Line sensors can detect when robots go beyond the boundaries.","Our kicker has two main components, the motor and the circuit board, which are connected to the controller on the robot.downloads the program to the controller so that the controller can drive the kicker.When the controller outputs high voltage, the kicker operates; when the controller outputs low voltage, the kicker stops operating.","Our dribbler has two main components, the motor and the circuit board, which are connected to the controller on the robot.downloads the program to the controller so that the controller can drive the dribbler.When the controller outputs high voltage, the dribbler operates; when the controller outputs low voltage, the dribbler stops operating.",https://drive.google.com/open?id=1thw2s12MZ9dze3rMGQUfPjXEFllB79qe,,"The part we are most proud of is our newly designed kicker this year, unlike previous years where the motor rotates and directly strikes the soccer ball to achieve the kicking effect, this year the rack is driven by an incomplete gear and the pulling force of the rubber band is used to achieve the kicker effect, and the slide is used to reduce the friction and to fix it with a smaller size to achieve the same direction of the kicker and the dribbler. Moreover, this year our compound eye adopts a new electronic structure, from fixed to connected, increasing the number of compound eyes the robot can carry, and with the new algorithm, the infrared detection of the soccer ball is more efficient and the positioning is more accurate.","https://drive.google.com/open?id=115ETFd2KHgESR0HDpPn1otOggrl6cYT0, https://drive.google.com/open?id=1EnVwWCvaB_SMPczdwAB4WeQWEIqTxkQd, https://drive.google.com/open?id=1X0C9dIjgtbyTQ39USfLlxTBcV4c7LjJZ",The motor is connected to the processor on the robot and the program is downloaded to the processor so that it can drive the motor.,We use the IR sensors and the cameras in conjunction with each other to find the location of the soccer ball.,"Attack
1. Use the ball chasing algorithm to chase the ball until the ball is in front of the robot.
2. When the ball is in front of the robot, move towards the ball and catch it. 
Defense
1. Calculate the two directions of movement of the penalty area line in grayscale.
2. Use the angle of the ball obtained from the compound eye to determine the direction of movement of the robot, and block the opponent's robot's path to the ball.","Coordinate positioning using ultrasound, compass, grayscale detect white lines using grayscale, calculate the direction of white lines and move in the opposite direction.","When the robot receives the ball, it uses the coordinates to calculate the direction of the push to move the ball towards the goal.","Defense
1. Calculate the two directions of movement of the penalty area line in grayscale.
2. Use the angle of the ball obtained from the compound eye to determine the direction of movement of the robot and block the opponent's robot's path to the ball.","Our robots can communicate with each other via Bluetooth, which prevents our attacking robots from colliding with our defending robots and causing chaos.","This year, our defensive robot uses a new algorithm to ensure that it will not break away from the penalty area line when it moves on the line. Firstly, we split the moving direction of the defensive robot into x,y two directional variables, and the grayscale of the eight directions detects the white line as 1, otherwise it is 0, and together with the trigonometric function, we find out the x,y two directional variables to ensure that the line of the penalty area is underneath the center of the robot, and then through the collinear theorem, we find the direction of movement for the defensive robot to move on the line, so that the robot will not break away from the line when moving on the penalty area. After that, we use the collinear theorem to find out the direction of movement of the defense robot, so that the robot will not move away from the restricted area line. This algorithm greatly prevents the defense robot from entering the penalty area.",https://github.com/ichi123007/ugamm-soccer.git,https://drive.google.com/open?id=15AOfnag3DhvsBWLYc3fkvkSxlh4q3hz-,"Robots (cost of components that are in your robots right now): 15000 MOP each
Experiments (failed builds, broken hardware etc.): 4000 MOP each
Environment (fields, balls, etc.) : 4000 MOP each
1 MOP= 0.13 USD","30% government
40% school
30% parents",5,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",cheongiokchi@gmail.com,,
7/8/2025 23:14:53,MARVEL,Open League,South Korea,"hanjaegyu1234@gmail.com
jung1214kr@gmail.com
a01041895341@gmail.com
seohyunbyun090216@naver.com
",,,"JINHWAN KIM : Electrical Design & Making 
JEGYU HAN : Programming
SEOHYUN BYEON : Mechanical Design & Making
JUHO EOM : Mechanical Design & Making",160 minutes once per week.,Robotics room at robotics academy.,"The previous version of the robot started in November last year, and after attending the Singapore Open in early April, we started making the hardware for the new robot. ","Austrailia Open 2024 : Light Weight (EOM)
2024 Eindhovwn : Open Open League (BYEON)
Singapore Open 2025 : Open League (KIM, HAN, BYEON)","We were taught technical theories and related mathematical theories such as trigonometry, inverse trigonometry, vectors, logical operations, and the drive system using four omni-wheels. And our team received a lot of financial support.","We didn't manage it specially, and every time we gathered, we organized the work to be done that day and divided up the work to be done.","When special calculations such as driving formulas are required, ChatGPT and Copilot are used as references.",https://drive.google.com/open?id=1oSJqIkBQ6t7uqRBpNphYj1ileGWEbOHx,https://drive.google.com/open?id=1Rc86HEImlfbvmSKpzhPVpUMMBHoA3vJr,https://drive.google.com/open?id=12yOHMdG3JSz9ITMMC29R88c7KVCOi0jG,https://drive.google.com/open?id=1dnyOZbGpx-uRWpMct9G__jayDj5Q2a-0,https://drive.google.com/open?id=1Z-_rIUVl_A3K4_qeX07grZY7tJO_NxxF,https://drive.google.com/open?id=1sJxQhP8gpBtbYdlPrCvqtFcmEC3iuTky,https://drive.google.com/open?id=1xZguuCr9pJN6W_5GKOaHyhDfAWAz3Qdi,"The robot's position on the field can be easily determined using the coordinates of the two goals obtained using the camera. When the ball is not visible or has stepped on the outer line, it can move towards the center of the field by moving in the direction of the median value of the angle between the two goals.",https://drive.google.com/open?id=1MI6jkiVArRfy4jcpagmBqp3kIFMWxUU5,https://drive.google.com/open?id=1OwkZAfsAbq31gRMIBksuZEJMCWPTkOXt,https://drive.google.com/open?id=1jYtDBOf5YcI9x9UqqwOSDLjsTg5vM3FX,https://drive.google.com/open?id=1nzzM33nyGp51LV5OnMMb5z_3InbYiXEX,https://drive.google.com/open?id=1CrJ74JUz6br4zlYlbLDYGIkuKhXqx9Dj,https://drive.google.com/open?id=1hkf-dpe4lg7cpZw39NYP2iGBaYFl-JFt,https://drive.google.com/open?id=1izkf94pyPY2p0xKRQcRDsSX6X6jDOvBm,"We decided on the motors, wheels, and solenoids to use, created a 3D model of them, placed them within the desired size, and defined the outline of the robot. We used the SketchUP program.","We used FDM type 3D printer and SLA type 3D printer. FDM type was used to make the mechanism and SLA type was used to make the prototype of the reflector. A company called Hanssem Digitech manufactured the PCB, and since we were unable to solder the 100-pin TQFP type ATMEGA2560 CPU, we commissioned this company to do SMT work on the main board. A company called Creallo manufactured the reflector using SUS304.","A total of 5 motors were used. 4 were used for driving and one was used for the dribbler. The motor used was Premium Planetary Gear Motors 730RPM part number 638260 from Servocity, USA. For the dribbler, a GA16-050 planetary motor 2526RPM motor was purchased from AliExpress, China. The wheel used was a 50mm Omni-Wheel from GTFRobot, China.","The kicker uses a solenoid KK-1040B, purchased from AliExpress in China. We purchased a 5V or 6V rated product, and to increase the power, we used a power FET IRFZ34N to drive the ON/OFF with a battery voltage of 11.1V, and limited the maximum operating time to 0.1 seconds.","The dribbler was made using a DC motor and a paper feed roller used in a printer after a lot of trial and error. The roller was purchased from AliExpress in China as a Brother DCP 7055 assembly pickup roller. The inside of the roller is empty, and a 3mm shaft is attached to both ends and the roller is fixed on top of it. There is an empty space between the shaft and the roller, which prevents the robot from riding up on the ball when dribbling it.",,"Wheel layout : We have made and used robots with 3 wheels so far, and this is the first time we have installed 4 motors. However, we have used 4 omni wheels at FTC.
Reflector : A reflector was used to capture the entire FIELD using a camera. The camera can be placed below and the reflector placed above to view the entire field. ","https://drive.google.com/open?id=1Ewzbetr193-CVotJP0uiEig8WNZv4usN, https://drive.google.com/open?id=14XBrvnK6n3AnamW65uMDwkS-XvSFP-gh, https://drive.google.com/open?id=1DLd8Pn7piqZSkwvRXk2tsLJGsIl2OR7R, https://drive.google.com/open?id=1QujwZUvYn4u83TFgKxq_t8HXyr10dsk2, https://drive.google.com/open?id=1s8fP1ocxcXD8U_2XYNUDNOFIiS-nbbCu",https://drive.google.com/open?id=1g3Nbg2VBbQxYMQBhZ0_9PaeMpf1rMYx8,"Our robot can be powered by one 11.1V lithium polymer battery.
The motor and solenoid use the battery voltage as is, and use the 5V switching regulator LM2576 to make 5V and supply it to the logic.
This 5V power is made into 3.3V by using the 3.3V linear regulator LM1117 and supply it to the LCD.",We use 5-A H-Bridge for DC-Motor driver TLE5205-2G. Its operation is defined by IN1 and IN2 pins. We use ATMEGA2560's own PWM function to generate the signal and pass it to the driver.,"We use Atmega2560 used in Arduino MEGA board. We chose it considering the 10 PWM signals, 3 UARTs, I2C, SPI, SOFTWARE UART, ADC and GPIO number we need. It has been a long time since we chose and used this CPU. Previously, we used ATMEGA2560 PRO module, but it took up a lot of space, so this time we directly attached CPU to PCB.","The ball is found using a camera and a specially designed reflector. The camera is placed below and the reflector is placed above so that almost the entire field can be seen through the reflector. Since we need to find a small ball, the camera shoots in VGA format and the camera program considers the largest object within the ball's Spectrum range as a ball. To detect a nearby ball, a PHOTO COUPLER is attached to the capturing zone to determine whether the ball is close.","There are 24 line detection sensors in total, each pair consisting of a white LED and a photo transistor. We drew a circle precisely and placed 16 of them at 22.5 degree intervals on it. Then, we placed 16 positions at 22.5 degree intervals on a slightly larger circle, and placed 8 of them: 2 in front, 2 in the back, 2 on the left, and 2 on the right. The LED is driven by the shift register LED driver TLC6C5912, and the phototransistor is connected to a resistor to change the flowing current into voltage, which is then input to the CPU ADC through an analog multiplexer for AD conversion.","We use the YAW value of the BNO055 IMU sensor. This sensor is connected in I2C mode and uses the Arduino library. The robot always maintains the forward direction using the YAW value, and when the ball enters the capturing zone and the shooting condition is met, the camera recognizes the goal and turns the robot toward the goal and moves toward the goal. Then, it shoots.","The kicker uses a solenoid. The CPU sends out a signal of 0 and 1 to control this solenoid. This signal is connected to the POWER FET IRFZ34N to switch the battery power to operate the solenoid. We operate the solenoid with a 6V rating from the battery power (11.1V) to increase the power. And to prevent damage, we limited the On time to 0.1 seconds.","The driving circuit of the dribbler is the same as the driving motor. It uses the Motor Driver TLE5205, and the CPU generates a PWM signal and inputs it to TLE5205 In1 and In2.",https://drive.google.com/open?id=1FNHWS0gZUVQasghVa5T60rs6pl937R-b,https://drive.google.com/open?id=173DU57NmTRV1HM-oQrUkUo0rRJE4TkPR,"LED Dynamic Driving: We use 24 phototransistors for line detection. We use 24 WHITE LEDs as light sources. Each LED consumes 20mA. If we turn on 24 LEDs at the same time, 480mA of current will flow. We used two TLC6C5912, 12-bit Shift Register LED drivers to limit the number of LEDs that can be turned on at the same time. We can limit the number of LEDs that can be turned on at the same time with this part. Currently, only 4 LEDs are turned on at the same time. If we are reading one sensor now, we only turn on the LEDs up to the 3rd sensor to be read.","https://drive.google.com/open?id=141AxXcDgJFcJFu2QZxbO4SQwGXlzzE67, https://drive.google.com/open?id=1gjmPIh2fjjZJ8V7UdZBwVcTvwunzoerR, https://drive.google.com/open?id=19UHLh62thawvaiZ3Acuk2p_5jf6HRLX6","The CPU's own PWM function was used. Power is passed from -100 to +100 to the moving function, and the PWM direction and values from 0 to 255 are converted and written to the OCR register within the function.","The ball is basically detected by the camera through the reflector. The OpenMV camera finds the ball and each goal and sends the coordinate information to the CPU. DATA is when the CPU sends a request command to the camera, the camera sends all the information to the CPU. In order to increase the processing speed of the camera, it normally searches for the ball and searches for the goal only when the goal information is needed. The CPU and the OpenMV camera communicate using UART, and we defined the PROTOCOL ourselves. And we install a photo sensor ITR9909 under the kicker to determine whether the ball is close.","When the robot detects the ball with the camera, the robot draws a virtual circle on the ball, finds a point where the robot and the circle meet, moves to that point, and when it reaches the starting position, moves to the back of the robot along that virtual circle. If the ball is in front, it moves to the back of the ball.","We installed 24 light sensors made of WHITE LEDs and photo transistors. The status of these sensors is stored in two types of internal variables. One is the current status of the sensors, and the other is the content that remembers the detection. The current status of the 16 inner sensors forming a circle is stored in the Line16 variable, which is stored in the LineDetected16 variable. When a line is detected, the average of the physical coordinates of the sensors defined by the self is calculated. This value becomes the vector value of the direction in which the robot was moving. We move the robot in the opposite direction of this vector and move until the sensors that passed the line cross the line again. 
","When the ball is in front of the robot and comes within a certain angle range and distance, the dribbler is activated and approaches the ball. When the ball is detected by the sensor that detects the proximity of the ball, the robot requests information about the opponent's goal from the camera and the robot turns in this direction and moves forward. When the direction of the robot and the direction of the goal are the same, the solenoid is activated and a shot is made. If the ball stops within the penalty line, the robot activates the dribbler and moves within the penalty line until the rearmost sensors of the robot detect it and shoot.","The defensive robot moves in four stages.
1. If the ball is not visible, the robot moves to the center in front of the goal. At this time, the operating method is to subtract the distance to the side wall and the distance to the back wall from the coordinate value of the location to be moved, set this value as the Vx, Vy value, and use the inverse trigonometric function to find the angle and move in that direction.
2. If the ball is on the side, the robot moves strongly slightly behind the ball and hits the ball.
3. If the ball is in front, the robot moves so that the angle between the ball and the goal is in a straight line to reduce the shooting angle.
4. If the ball is close to the front, the robot switches to attack and returns to the defensive position after the ball disappears or the shot.","The robots communicate with each other. However, the content is still very simple. The attack robot sends an ACK (0x064) every 0.2 seconds. If the defense robot does not receive this signal for more than 1 second, it considers the attack robot to have been kicked out and switches to attack immediately. If this signal is received again, it finishes what it was doing and switches back to defense mode.","Escaping from the line:
The robot has 24 sensors placed at equal intervals on a circle, and the current status of these sensors is stored in the LineDetected16 variable, which is stored in the Line16 variable. When a line is detected, the average of the physical coordinates of the sensors defined by the robot is calculated. This value becomes the vector value of the direction in which the robot was moving. We move the robot in the opposite direction of this vector until the sensors that passed the line cross the line again. ",,https://drive.google.com/open?id=1IVRYvh5q6v3siiVwG5Sh1xbfq-TfxZ_V,"Robots (cost of components that are in your robots right now): 1,200 USD each
Experiments (failed builds, broken hardware etc.): 1,500 USD
Environment (fields, balls, etc.) : 200 USD","80% ACADEMY
20% PARENTS
",1,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",hakyungi@hanmail.net,,
7/9/2025 9:26:40,Munako Aegis,Lightweight League,Japan,"Team Gmail: munakou.aegis@gmail.com
 Member Discord IDs:
・Yuta Kurisaki: kuri.33
・Koki Suehiro: ssssu6611
・Umi Fujita: ocean191018
・Maiki Kimura: maikii0740","youtube:https://www.youtube.com/@munako-aegis 
blog:https://note.com/munakoaegis　　　　　　　　　　　　　　　　　　　　　　　　X:https://x.com/Munako_Aegis",https://drive.google.com/open?id=1H0ILjcijzoSSUXr_qiU39qzWISfkO2sN,"
Yuta Kurisaki: Programming for the attacker robot
Koki Suehiro: Programming for the goalkeeper robot
Umi Fujita: Robot design
Maiki Kimura: Circuit design","Our team communicates frequently on a daily basis, so we generally do not have regular meeting times.However, about once every six months, we take a coherent time of about three hours. We use this time to discuss the overall direction and issues.",Physics laboratory in the school,2024.jun,"Japan Open 2024 Soccer Lightweight League
Japan Open 2025 Soccer Lightweight League","Many of our team members began participating in activities after entering high school, so they had to develop their technical skills in a short amount of time.Therefore, the key was how much time we could devote to our activities. We continued our activities not only on weekdays but also on weekends.
Since this was a club activity, we had to be accompanied by our advisor at all times. Therefore, he went to great lengths to cut down on his personal time to create an environment in which we could engage in our activities. I believe this kind of support from our advisor contributed greatly to our growth.","Discord – Note-taking and communication within the team
LINE – Communication between different teams
GitHub – Data and version management
Time Tree – Schedule and planning management",We used AI when translating into English.,https://drive.google.com/open?id=1iHzL2-B4SEewHw3liT1eS_sRM0WlLd90,https://drive.google.com/open?id=1o28MN45Gons8dgqj48GKXHmZFdK2Sxwp,https://drive.google.com/open?id=1haWQchNrsjE7a-Ez6tCHjIY9xbOIFPWU,https://drive.google.com/open?id=1KQCJtbVzitzulo57FPBM4l7c1bxD9zix,https://drive.google.com/open?id=1B5Ich6nLuJ6hFqGETm8SiPfXjFja3u2g,https://drive.google.com/open?id=1awXm7xNNdqWJQbS8Iu-uHUmsotO-UHZ8,https://drive.google.com/open?id=1x4-MRFe5Kbng26n8U55J4AzvvZlzpxxI,"By using a camera to calculate the direction toward the center of the court, we determine the robot’s approximate position within the field. Also, when the robot steps on the line, it moves toward the center of the court to prevent going out of bounds.",https://drive.google.com/open?id=1GmVGHeBjXk88zz_SL2nEdvRXIFls2zE4,https://drive.google.com/open?id=1_8ReOMpF7hsk97OMYyERCwcnoBqwPkYd,https://drive.google.com/open?id=11K-cKY3j3sgU4pJEgHy__PtVmH93vj3d,https://drive.google.com/open?id=1hGjWXl8TiPe2_9zqhw3Tfx9KqkZU8wb2,https://drive.google.com/open?id=1cgncVL2jU3VqdUYihfvw8VaSdj-BfEos,https://drive.google.com/open?id=1Stbe3KzXl-9xvELwDJwwEcMYt1TpsaX2,https://drive.google.com/open?id=1fpOA_c7_cpKtNyKP2Fo9CvW1KFPnMSP4,"Autodesk Fusion was used to design the mechanical parts of the robot.
When designing the robot, our focus was on ease of maintenance. We kept the number of screws needed to secure the parts to a minimum, so the robot can be assembled with only a screwdriver. We also considered reducing the number of mechanical parts on the top of the robot to avoid interfering with the ball sensor or camera and hindering operation. To improve the design, we increased the robot's diameter, reduced the number of PCB boards, and made space for them.","The robot frame is manufactured using the school's CNC milling machine. Additionally, the school's 3D printer is used to produce small parts that are not commercially available. PCB boards are ordered from our sponsor, JLCPCB. The mirror was made by heat-pressing polyvinyl chloride (PVC) into a mold created with a 3D printer. Its field of view was expanded by adjusting the angle of the mirror.","Our robot has four motors, and each motor has an omni wheel. This lets the robot move in any direction without changing its direction.
By using four motors instead of three, the robot’s total torque increases, and its center of gravity becomes more stable while it is moving.
Also, we use large wheels on the robot so that the line sensor can react well and stay stable anywhere on the field.
We use duralumin for the frame of the omni wheels to make it stronger and more durable.
Moreover the part that connects to the motor is designed to be fixed with just one screw, so we can replace it easily.",A solenoid was installed at half the height of the ball and a homemade attachment was attached to the tip of the shaft to more easily transmit the solenoid's impact to the ball.,"We used a brushless motor for the dribbler. To reduce the number of parts and secure the torque and rotation speed, the dribbler was designed without belts or gears. Additionally, the ball rotates from the top instead of the side, which improves holding power.",https://github.com/MUNAKATA-EPC/Aegis_2025/tree/main/2025/Salvador/TDP/About%20Hardware,"The robot's sides were 3D-printed, and its frame is made of duralumin, which increases strength and makes mass production and replacement of parts easier. Magnets have been attached to the battery case, making it possible to quickly replace the battery. Additionally, the OLED display enables you to check sensor values in real time.","https://drive.google.com/open?id=1h4XDMXAyuGQ1D8JjzUs-CF34YTiI26bG, https://drive.google.com/open?id=1ltfkkWFs-ACWDXBs-9M-Z9pHRGrXiT4U, https://drive.google.com/open?id=1fniz2hXUvA7T8zcniTtRcn2pmFvl1GgL, https://drive.google.com/open?id=12PrJYAOtNbLTKawSk5DMa75iYEL9wF-2",https://drive.google.com/open?id=1EO8wBr1gBBEAQn3KkH0MIYcMIlrXE8pF,"We use an 11.1V Li-po battery in our robot, and it powers the motor driver directly. Also, the DC-DC converter lowers the voltage to 5.0V for the microcontroller. Then, the regulator on the microcontroller board lowers it further to 3.3V for the sensors. Furthermore, the voltage is boosted from 11.1V to 48V for the kicker.","We use a 4-channel motor controller from Daisen Electronics, and control the motors by UART communication with the main microcontroller.","We use Teency 4.0 as the main microcontroller because it has a fast processing speed, many digital and analog pins, and many serial ports. Also,for the sub microcontroller, we use Seeeduino XIAO because it is small, low cost, and compatible with Arduino. We use OpenMV for the camera because it is easy to install and has high accuracy.","We use the TSSP58038 for the ball detection sensor, and it reads the same infrared wavelength as the pulse ball. We use OpenMV for the camera. By itself, it can only see 70 degrees, so we added a homemade mirror made of PVC. This lets the camera see from one end of the field to the other.",The sensor detects the line by checking the change in analog values when it passes over a white line.,"Although the exact position is not determined, the robot roughly estimates its location based on the angle of the court.","We use two FETs to charge a capacitor, and the stored electricity is sent to a solenoid to make it move.",We use a commercially available ESC to run the brushless motor for dribbling when the catch sensor detects the ball.,"https://drive.google.com/open?id=1ruv-_3MoQ8kY6EM9SjKXtadJJk__0uiv, https://drive.google.com/open?id=1FeojhJIwaqWMtmI1y-mIjAzL2_OagWYQ, https://drive.google.com/open?id=1er_aO1to4xsy1Xcp1rXoKrBnkZi8ZNc9, https://drive.google.com/open?id=18E32gJDM5Il8mbPCY2sc9VMgdZPIbDf4, https://drive.google.com/open?id=1DnSkT36_csS_oQvesYt5U7P1awdZY2jF","https://drive.google.com/open?id=1CXKxPqspS4M-02_asDECovJMXnOmMhvZ, https://drive.google.com/open?id=1ZdePomQZzFy2OT-lgOuHdoAnyQMbEptC, https://drive.google.com/open?id=1PXTzGw8x6UINEsr55IAIHINZTfY2q8ky, https://drive.google.com/open?id=1SrOxJULloLrGD-kfhnneJvC-QZuivEQU, https://drive.google.com/open?id=1GUDUpisHPeT77rTvShseLVVEI8_Sceec","What we are most proud of is that we were able to design a stable circuit in a limited space. In the past, the kicker board and the power supply board were manufactured separately. There were situations in which the kicker did not operate properly due to poor wiring connections. Combining them into one board eliminated poor contact and improved operational stability. However, combining them into a single board eliminated contact defects and improved operational stability.","https://drive.google.com/open?id=1BauV2WBg1YF4GueqdUyyDnsW7Pq-AaFK, https://drive.google.com/open?id=1gNqDf5pVcX9RbCPWZEA4LrXkfQm7jZ3X, https://drive.google.com/open?id=1GvLEs8hzs7sEId1Eu4fKQdt5GB8gXaFI, https://drive.google.com/open?id=1Y8yTzIOVsTYdvLUg50HMLiJ07yvvu6XX","Hardware: Teensy 4.0
Programming Language: C/C++
Library: Adafruit BNO055

The motor driver is controlled by sending signals from the Teensy 4.0 via UART communication. Additionally, PD control using a gyro sensor ensures that the robot consistently faces forward or toward the goal. We carefully fine-tuned the values of the P and D components little by little so that the robot could quickly orient itself forward.

For more details, please refer to the flowchart located at 
https://github.com/MUNAKATA-EPC/Aegis_2025/blob/main/2025/Salvador/TDP/About%20Software/gyro%20and%20motor.png on our GitHub.","Hardware: Seeeduino XIAO
programming language: C/C++
library: Not used

We use ball sensors to read analog values and calculate the ball's direction by combining the data from each sensor as vectors. Because the analog values fluctuated greatly, we were unable to calculate the angle accurately. To reduce these fluctuations, we also apply a moving average.
For more details, please refer to 
https://github.com/MUNAKATA-EPC/Aegis_2025/blob/main/2025/Salvador/TDP/About%20Software/IR.png on our GitHub","The two robots have the roles of attacker and keeper, respectively.
The attacker approaches the ball along the shortest path when the ball is far away. Once it gets closer, it switches its behavior based on the ball’s angle to guide the ball into the ball capture zone. 

On the other hand, the goalkeeper moves by line tracing along the line in front of the goal and is controlled to position itself on the straight line connecting the ball and the center of the goal.

Furthermore, when the ball enters the ball capture zone, the kicker is used to kick the ball. For more details, please refer to
https://github.com/MUNAKATA-EPC/Aegis_2025/blob/main/2025/Salvador/TDP/About%20Software/strategy.png on our GitHub.","Hardware: OpenMV
Programming Language: Python
Library: Not used

Using a camera, the direction toward the center of the court is calculated. When the line sensor detects a line, the robot moves in that direction to prevent going out of bounds. In the unlikely event that the camera does not function properly, the angle of approach to the circular line is calculated, and the robot is controlled to move in the opposite direction of that angle to return inside the court. As a result, the system is designed to prevent out-of-bounds in any situation.
For more details, please refer to the flowchart located at 
https://github.com/MUNAKATA-EPC/Aegis_2025/blob/main/2025/Salvador/TDP/About%20Software/camera.png on our GitHub.","The robot is equipped with a catch sensor in the ball capture zone. When the ball enters this zone, it turns toward the opponent’s goal direction calculated using a camera and kicks the ball with a kicker. We have designed the robot to be able to equip a dribbler, but it is not used in matches. We have installed the dribbler in preparation for situations where it may be required, such as during the Technical Challenge. The reason we do not use the dribbler during matches is that it can cause the ball to spin backward, which may create a disadvantageous situation during the game.

For more details, please refer to 
https://github.com/MUNAKATA-EPC/Aegis_2025/blob/main/2025/Salvador/TDP/About%20Software/strategy.png on our GitHub.","The goalkeeper robot smoothly moves along the line in front of the goal and positions itself on the straight line between the goal and the ball.
 For more details, please refer to the flowchart located at 
https://github.com/MUNAKATA-EPC/Aegis_2025/blob/main/2025/Salvador/TDP/About%20Software/strategy.png on our GitHub.",We don't use them.,"We use a line sensor consisting of 16 sensors evenly arranged in a circular pattern, representing activated sensors using binary notation. By summing all the binary data and sending it to the main processor via serial communication, we can efficiently identify the positions of the activated sensors with a small amount of data.

For more details, please refer to 
https://github.com/MUNAKATA-EPC/Aegis_2025/tree/main/2025/Salvador/TDP/About%20Software/Innovations on our GitHub.",https://github.com/MUNAKATA-EPC/Aegis_2025,https://drive.google.com/open?id=1u_ukv-OyOJ6ot4UmAVDcgOEOjU9EGZMJ_qIx9dW5Amc,"Since we operate as a school club, we use the club’s tools to build the robot. Also, because we use second-hand robot parts from the club, we have spent very little of our own money. However, we paid personally only when ordering printed circuit boards (PCBs). In total, we placed PCB orders worth approximately $700.","90% school
10% parents",6,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",munakou.aegis@gmail.com,,
7/10/2025 5:18:49,Biotech,Lightweight League,"São Paulo, Brazil","sesibiotech@gmail.com, 
enzmolosigg@gmail.com, 
gomesferpereira08@gmail.com, 
hyvinin@gmail.com, 
viniqpsabino@gmail.com,
biotechsoccer@gmail.com.","https://www.instagram.com/sesibiotech/
https://github.com/BiotechSoccer263/Biotech-Soccer",https://drive.google.com/open?id=1TqjKU8J4GMgckwv8jlj18H_cejQmPuK6,"• Enzo Momesso Losi Gomes Gutierres: Navigation and ball detection programming, integration of sensors

• Fernanda Pereira Gomes: Electrical circuit design, wiring, and PCB layout

• Hyvinin Ribeiro do Prado: CAD modeling, mechanical assembly, and 3D printing

• Vinicius Marques Sabino: Mechanical prototyping, testing, and optimization

• Ana Maria Papili Pagini: Project management, documentation, and team coordination
","We met daily for 300 minutes (5 hours) at school. This routine enabled rapid prototyping, frequent testing, and fast troubleshooting, accelerating our development process.","We worked in our school’s robotics lab and maker space, which provided access to tools, equipment, and mentor support.","We started in January, allowing for multiple design iterations, extensive testing, and continuous improvement.","We competed for the first time last year in the Regional and National competitions in Brazil (Lightweight League). These experiences taught us the importance of robust design and thorough documentation, which we applied to this year’s project.","Our mentor guided us in learning Fusion 360 and best practices for project management, but all modeling, design, and technical decisions were made by the team. The mentor’s role was to facilitate learning and encourage independent problem-solving.",We used a Kanban board to track weekly tasks and the Ivy Lee method to prioritize daily goals. GitHub Issues helped us manage code bugs and feature requests. This structured approach ensured clear task division and efficient progress tracking.,"We used ChatGPT to generate code for sensor integration and to review our line detection algorithms. DeepSeek was used to optimize our CAD designs for weight and strength. These tools helped us quickly prototype, debug, and improve our solutions.",https://drive.google.com/open?id=1ShzwaM6u9BUNPYiWx8zqmcnghadZ3H8p,https://drive.google.com/open?id=1kkl7Q798yt5fXlIsE_Jw0ba58Qmn6laK,https://drive.google.com/open?id=1X8AcaOYnlrLU3mftQGJTFnIiQiufiwtI,https://drive.google.com/open?id=1WYMRFgINHjARw0vTlC1EVyGyFpwCqGiW,https://drive.google.com/open?id=1MU9g8a5k7JHOoHLam1SWlI6aSXszX0Ga,https://drive.google.com/open?id=1iQNskBh7WR1fO2ycg2p5yG6HWyAin01h,https://drive.google.com/open?id=1f9fo9Uw4fKZ4c8jRY3grhs1c34mEhAKG,"Our robot uses a HiTechnic Compass to determine orientation in degrees, combined with QRE reflectance sensors and ultrasonic sensors for line and wall detection. At startup, the robot faces the opponent’s goal. Throughout the match, sensor fusion continuously updates the robot’s position and orientation, ensuring accurate movement and alignment with the goal.",https://drive.google.com/open?id=1Dkq4rULHFd69GeB96lJ8vbCPcDaeuZpL,https://drive.google.com/open?id=1GXOcZ4hmmJsb2UtlX_UcEQEz5XNauopA,https://drive.google.com/open?id=1Zhj45pV6mRKQj7u1Za_iwyOqe_e8TpR4,https://drive.google.com/open?id=1iR6OA03r8wWh332sruh9O8wBC4KGM7Y1,https://drive.google.com/open?id=1J6BEQflbSU5MyMXi5eqoSAwFqFnh3DZf,https://drive.google.com/open?id=1mDwT_wfmBimsBkppcfuap8nV43X4ju0x,https://drive.google.com/open?id=1hmB7PxQhsve1NIptYoYsXB44dAJwzTYb,"The mechanical design process involved iterative modeling of multiple chassis geometries using Fusion 360, with each iteration subjected to virtual simulations for collision resistance and mass distribution analysis. The selected configuration features a circular base with precision-engineered cutouts to accommodate the Mega 2560 Pro Mini microcontroller and L298N motor driver, thereby optimizing spatial efficiency and reducing overall weight. The final design emphasizes a low center of gravity to enhance stability and incorporates modular access points to facilitate rapid maintenance and component replacement. Polylactic acid (PLA) was selected for the primary structure due to its favorable strength-to-weight ratio, while medium-density fiberboard (MDF) was utilized in areas requiring increased structural rigidity. For future iterations, we intend to integrate a high-precision digital compass and advanced long-range infrared sensors to improve both ball localization and goal detection accuracy.","We designed our robot's parts, like the base and dribbler, using Fusion 360. This program really helped us figure out the best shapes and how everything would fit together. For building, we started with a 3D printer to make our first base which was great for quickly testing ideas. Then, for the next versions of the base and other parts, we used a laser cutter on MDF, which gave us really precise pieces. We put everything together with screws and quick connectors, so it's easy to swap parts out if we need to during a competition. After some initial testing, we even went back into Fusion 360 to tweak the dribbler's mount to reduce wobbling and get better ball contact.","We used five 6V gear motors: four for the omni wheels (for omnidirectional movement) and one for the dribbler. After testing both omni and mecanum wheels, we chose omni wheels for their superior maneuverability and lower friction. All part numbers and suppliers are listed in our BOM.",N/A,"The dribbler uses a rubber-coated shaft for maximum grip, driven by a DC motor via PWM. The system is designed to absorb impacts and prevent jamming. We included a current sensor to detect ball contact and adjust speed automatically. The base was built using a laser cutter and MDF boards.",https://github.com/BiotechSoccer263/Biotech-Soccer ,Our modular design allows the dribbler or wheels to be swapped in under two minutes. The IR sensor mount is adjustable for easy calibration on different fields. The dribbler’s current sensor enables automatic speed adjustment for optimal ball control.,"https://drive.google.com/open?id=1O_JiZbgSpW4xKuCHPSNFkfBXZek18zWN, https://drive.google.com/open?id=19iZeLHSc_0hbFfET2bhrUO0WKJi6DCH4, https://drive.google.com/open?id=1rdq__QUycKdENFev7YDIFpwG3_e0fcFL, https://drive.google.com/open?id=1UgKITrZXIQWRJq9HcieqWzE96DqW7-ue",https://drive.google.com/open?id=1m9p9fdFazzSCcuuGEBirF8ynEN8vEMdp,"We use an 11.1V LiPo battery, regulated to 10V for the Arduino and directly powering the motor drivers. Sensitive sensors are powered through a 5V linear regulator for stability.","We use two L298N boards for the drive motors and a third for the dribbler, each controlled via PWM from the Arduino. Each motor is controlled via three pins: two for direction and one for speed (PWM).","We chose the Mega Pro Mini 2560 for its processing power, memory, and compact size, allowing for efficient wiring and expansion. Its many ports support all our sensors and actuators.","To detect the ball’s position and distance, our robot uses the LEGO HiTechnic Infrared Sensor, which is capable of identifying both the direction (on a scale from 1 to 9) and the strength of infrared signals emitted by the IR ball. The sensor employs five detectors to determine the signal’s origin and intensity, enabling the robot to accurately locate and track the ball. We read the HiTechnic IR sensor data via the I2C protocol and apply a moving average filter in our code to minimize noise. The processed direction values are then converted to angles, allowing the robot to continuously adjust its path in real time for effective ball following.","We use three QRE reflectance sensors, strategically placed on the robot, to detect the field lines. These sensors are calibrated before each match for greater accuracy and are connected to the analog ports, with power supplied by the 5V and GND lines. ","To measure the distance from the robot to the field walls, we use HC-SR04 ultrasonic sensors, which are connected to the digital ports. For goal orientation, we rely on the LEGO HiTechnic Compass Sensor, which helps the robot determine the direction of the opponent’s goal. Additionally, a limit switch is installed to detect when the robot has possession of the ball and to help control its movement for precise positioning. The compass sensor is connected to the Mega Pro Mini 2560 board using six wires: SDA, SCL, two GND, 5V, and 3.3V.",N/A,"We designed a dribbler system to help the robot capture and maintain control of the ball while moving, allowing it to perform passes, dribbles, shots, and both offensive and defensive maneuvers with greater precision. The dribbler also prevents the ball from rolling away or being easily taken by opponents. It is powered by a motor connected to the L298N board, which drives a gear system to keep the ball securely in place. When the robot approaches the opponent’s goal, the motor reverses direction, releasing the ball to attempt a goal.",https://drive.google.com/open?id=16VDGDsM2-zGyIl7nKCIiNkZW_USopfYu,"https://drive.google.com/open?id=1_9PvIVRZWbvClX8XlEOu8_aRPVSNEKeS, https://drive.google.com/open?id=1AOLClBgymIk56oNSlmEjHt5vqdIC2Tvq","We are most proud of our custom-designed Printed Circuit Board (PCB). This PCB significantly streamlines component replacement and establishes highly efficient and reliable interconnections among all sensors. The result is a remarkably stable signal integrity, substantially reducing the risk of failures or performance variations typically associated with soldering inconsistencies or unstable connections.",https://drive.google.com/open?id=1d5AB3cYRisidrOvhnf3E5GR7mMVUuwLE,"Our control architecture is centered on the Arduino Mega 2560 Pro Mini microcontroller, which interfaces with two L298N dual H-bridge motor driver modules to manage the robot’s drive system. Each DC motor is connected to the L298N driver via three dedicated control lines: two digital input pins (IN1 and IN2) that determine the rotation direction by setting the H-bridge logic states, and one enable pin (EN) that modulates the motor’s speed and power delivery through Pulse Width Modulation (PWM) signals generated by the microcontroller. This configuration allows for precise, real-time control of both the direction and velocity of each drive motor, enabling complex movement patterns and responsive navigation on the field.","Our robot employs an infrared sensor specifically designed to detect the modulated IR signals emitted by the competition ball. The sensor outputs numerical values corresponding to the ball’s direction relative to the robot. Data acquisition is handled via the I2C communication protocol, with the microcontroller addressing the sensor’s unique I2C address to initiate data transfer. The sensor transmits the direction data in two bytes (low and high), which are programmatically combined to yield the final directional value. A dedicated software library streamlines this process, managing both the I2C communication and the conversion of raw sensor data into actionable directional information for real-time navigation and ball tracking.","In our control algorithm, once the ball’s direction is detected, the robot dynamically adjusts its orientation to face the ball, optimizing its trajectory to guide the ball into the dribbler mechanism. Successful ball capture is confirmed through the activation of a limit switch positioned within the dribbler assembly. The movement logic is implemented using straightforward conditional statements rather than advanced differential drive algorithms, ensuring the robot consistently advances directly toward the ball and thereby maximizing the likelihood of a successful capture. And don't have difference in our robots.","Our robot utilizes three reflectance sensors, each providing discrete analog values to the microcontroller. These readings enable the system to distinguish between the field surface and boundary lines based on reflectivity. When a sensor detects a value within the calibrated range for white (typically between 45 and 200), the control algorithm triggers a corrective maneuver—reversing or altering the robot’s previous movement—to realign its trajectory and ensure it remains within the designated playing area.","To execute goal-scoring maneuvers, our control logic first verifies that the robot is optimally positioned—either centered on the field or maintaining an unobstructed line of sight to the goal—and within a predefined minimum shooting distance. Once these criteria are satisfied, the robot accelerates toward the goal at maximum speed, continuously monitoring for the detection of the white goal line or the expiration of a preset time interval. Upon reaching this threshold, the system initiates a coordinated action: the robot delivers an additional forward impulse while simultaneously reversing the dribbler mechanism. This synchronized movement propels the ball with increased force and precision toward the goal, maximizing scoring accuracy.","When operating in defender mode, our robot protects the goal area by positioning itself facing the ball, with the dribbler oriented toward it. This setup prevents the opposing attacker from advancing or attempting a shot on goal.
If the defender manages to take possession of the ball from the opponent, it drives the ball toward the opponent's side of the field, strategically setting it up for the attacking robot to continue the play.","Our robots do not communicate directly with each other. Instead, each one is assigned specific roles and limitations, ensuring that they operate within their designated functions. This approach promotes better harmony between the robots and allows the game to progress in a more coordinated and efficient manner.","While we are proud of the overall functionality of our codebase, the most distinguished feature is the goal-attempt algorithm implemented for the attacking robot. This routine autonomously advances the robot to a predefined minimum shooting distance, continuously monitoring its heading at 100-millisecond intervals. If any deviation from the intended trajectory is detected—caused by external impacts or wheel slippage—the algorithm automatically applies corrective adjustments to realign the robot. This closed-loop feedback mechanism significantly enhances directional accuracy and substantially increases the probability of a successful goal attempt.",https://github.com/BiotechSoccer263/Biotech-Soccer,https://drive.google.com/open?id=1uPgJfhQHjTlcmnuj0BXZxQtkU9zQLm8c,"•	Robots (components currently in use): 3369,95 BRL
•	Experiments (failed constructions, broken hardware, etc.): 4391,20 BRL
•	Environment (pitches, balls, etc.): 8000 BRL
•	Exchange rate: 5,59 BRL = 1 USD
","100% funded by our school, which enabled us to focus on learning and innovation.",8,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",sesibiotech@gmail.com,,
7/10/2025 8:55:58,Aperture Open,Open League,"São Paulo, Brazil",aperture.soccer@gmail.com,"aperture.soccer (Instagram), Aperture Robotics (Youtube)",https://drive.google.com/open?id=1yTu8ALHghQTqOE82_nrw0wvtY9pWu_Ab,"Leonardo Rosendo: Captain and General Hardware
Lucas Suzena:  General Software
Gabriel Hamada : General Camera and Documentation
Ivan Pontes: Mechanics and Eletronics",9 hours per week.,School robotics lab.,June 20th.,"Campeonato Brasileiro de Robotica 2022 (National): Lightweight League
Robocup Jr France 2023 (World Championship): Lightweight League
Campeonato Brasileiro de Robotica 2023 (National): Lightweight League
Robocup Jr Netherlands 2023 (World Championship) : Lightweight League
Campeonato Brasileiro de Robotica 2024 (National): Open League
Robocup Jr Americas 2025 (Super Regional): Open League",Reviewed the PCBs and helped us chose and purchase some of the robot components.,"For communication we use WhatsApp and Discord, for code sharing and backup we use GitHub, and for schedule management we use Notion.",None,https://drive.google.com/open?id=12vhY7aDawrWq73JoLn2uvPYNO0aIMX6O,https://drive.google.com/open?id=1pkjGWL94533fwfivScEfAZNASurSorCX,https://drive.google.com/open?id=1MbRMCOqm0LxznZguMX5AtdrAtkD3kEhp,https://drive.google.com/open?id=1X7C847n5rZJXLwZVZ5YKbUa6cFw7rZ4t,https://drive.google.com/open?id=1MrlY6DXQE1TOWc0rpcLKJWxRARkpUibB,https://drive.google.com/open?id=1kaM7pCFXB75UM4ACmN4oNQf19MyU-UeB,https://drive.google.com/open?id=14XyojMqiplMMiiCAuRPmOwdVeQnhYUo9,"We use a color detection code in the OpenMV Cam H7 Plus using the OpenMV firmware (Python). In the STM (C++), after receiving the information of the goals and ball from the camera, we use trigonometry to calculate the position of the robot on the field.

We use two methods to calculate positions. If the robot is detecting the two goals, it uses only the absolute positions of the goals on the field and the relative angles to them to calculate the robot's position precisely. But if only one goal is appearing, the robot uses linear interpolation first to convert the distances in pixels to the goals to values in centimeters and then, with the absolute positions and relative angles of the goals, uses trigonometry to get its position on the field. The second method is less precise, because it depends on a precise reading of pixels on the camera, and the camera resolution is not good for precision, since we prioritize a better FPS in the camera over an image resolution bigger than necessary.

The robot relies only in angles to get the ball and conduct it to the goal, but it can use positions for tasks like defending the goal, or using a specific strategy to move on the field other than going on a straight line.",https://drive.google.com/open?id=1rBIEXint2xxYdZwPE7vqoFxZWtXXYlW4,https://drive.google.com/open?id=1m7uSy4afaeBi2BLjUn-4cXL5XV9ZKnmd,https://drive.google.com/open?id=1kOt90PFCZOOeitXmloVNi4srIWw8uT5A,https://drive.google.com/open?id=104Au11HjHDTDfb3lYyJLpGnyG3HkhB9H,https://drive.google.com/open?id=1mGhMeYTSUKsZf6ypSWkmgMiBzz_k2Oh4,https://drive.google.com/open?id=155ute5O51KhkNNE99-l3vExwANPz9I9s,https://drive.google.com/open?id=1Sh3OnmQxkzC3lid9GkYT9npFd1oIgSDW,"We used OpenSCAD, a software for creating solid 3D CAD objects using its own programming language. This makes the organization of the files and precise modeling easier.

With only one season in Open and little time to produce new robots, we managed to improve a lot our robot, going from an adaptation of our Lightweight robots to an international level robot of Soccer Open, bringing a lot of methods and inovation to our national league.

Our design combines methods learned and improved by all the generations of our team since 2017, like the omnidirectional wheels using ABS instead of PLA, providing a more resistant and cheaper wheel, the use of complete PCBs printed in glass fiber and copper (a cheaper option to print boards) to reduce the numbers of cables on the robot while serving as the robot's structure, with methods of teams from all over the world, like the use of a conical mirror of aluminum molded in a lathe, explained by the Russian team ""Comma,"", complemented with a study of mirrors made heating mirrored sheets, with the help of the Slovak team ”LNX Robots”, a kicker mechanism inspired in the American team ""Team Elite"", and general inspiration of other international teams.

For the future, since we plan to keep the same boards and components for the next season, we will only improve what we already have of mechanical parts, such as producing wheels and structural parts in metal and improve our dribbler mechanism to use less space and work better.","For parts made in PLA and ABS we used a 3D printer, using saws and metal files to cut and sand exceeding parts of the supports.

For PCBs, we design our own boards in EasyEDA, and order their printing in JLCPCBs, that offers different options of printing, but we prefer ordering the PCBs in copper and glass fiber, because it is a cheaper but reliable type of material. During our years in Soccer, we developed various strategies to improve our PCBs, such as using one side of the board for vertical wires and the other for horizontal wires.

For the mirrors, we calculate the dimensions of our own conical mirrors in GeoGebra, a website for calculations in a Cartesian Plane. After defining the diameter and height of the mirror, we order the aluminum molding with a local machining company, and then sand and polish it to achieve a good reflection.

The main methods used by Soccer teams are the use of an aluminum cylinder on a lathe and the heating of a mirrored plastic sheet. Our initial idea was to mold an aluminum plate in a cone, because of the good reflection of the aluminum and that it would not require the use of a lathe, but we did not find a way to easily bend it.

We then changed to the second method, using a mirrored sheet. Normally, the material used is a PVC (Polyvinyl Chloride) or PS (Polystyrene) sheet mirrored using a thin layer of aluminum. Since this type of material was not available in Brazil, we tried using a PVC plate coated with acrylic and mirrored with a cheap material, but although we managed to heat and mold it in the conical shape, the material did not retain its reflexive properties after the process. We also tested using a mirror pyramid, but it had too many blind spots and was difficult to produce.

Another tests include the use of a chrome spray, spray mirror and mirrored insulfilm, all with insufficient outcomes. After severe searching and testing, we ended up with two solutions, each one similar to one of the methods explained above.

The first one was polishing spherical aluminum mold, which allowed us to get satisfactory reflection results. The second one is using an imported mirrored sheet made of PET (Polyethylene Terephthalate), that we cut in a circle and fold it on an 3D printed cone. Although it has a higher distortion, we managed to achieve a much better vision of the field.

In the final steps of the production of our robot, we found a way to produce the mirror on a lathe, so we calculated the dimensions of the mirror in the cartesian plane, ordered the molding of an aluminum cylinder on the lathe, and then we polished it until it had a satisfactory reflection. This is the method we are currently using.

The images of our tests with mirrors can be seen in our complete TDP (made with the previous international template), that can be accessed scanning the QR Code in our poster or accessing our Linktree in the end of this form. Also, feel free to come talk with us if you have any questions or suggestions.","The motors are located in the bottom board at an angle of 90° to each other. We use four Nidec 24H brushless motors of 12V that can go up to 3900 rpm and are exclusively used for the movement of the robot. We use this disposition of motors because it is the best way to implement a precise omnidirectional movement.

The four wheels of the robot use the idea of omnidirectional wheels. Being printed in ABS with 20 sub wheels distributed around the edge, the wheels have a total diameter of 65mm.

Since the motors are disposed perpendicularly to each other and each wheel has sub wheels perpendicular to the motor turning axis, if two parallel motors move to one direction, the other two motors will still accompany the movement, as the sub wheels will spin instead of the whole wheel, allowing a quick and fluid movement on the field.","We decided to use a JF-0826B solenoid of 6V and 20N, as it was a common and cheap option to buy, and when powered with 48V, we end up with a stronger but smaller kicker.

We made the kicker system on its separate board, as managing a higher voltage on the main board could be dangerous. The board is designed to fit inside the robot, also aiming for occupying less space.","The initial idea was to use a belting system from the motor to the roller, as suggested by the Russiam team ""Comma,"", as it would be more reliable than using gears.

But we had a problem with avaliable space on the robot, as making it too high would prejudicate the camera vision. So, we ended up using the own case of the motor as the dribbler roller to save space, and used silicone molded parts to provide grip to the dribbler.",https://github.com/Aperture-Robotics/Aperture-Open-SCAD.git,"A part normally underrated of the mechanic aspect of the robot is its aesthetic design. The importance of having a clean and aesthetic design goes from later helping in the electrical and software part of the work, to having a unique robot, that stands out during the matches. After all, Soccer matches should also be nice to watch in the spectators perspective.

Instead of only focusing only on the basic functions for the robot, we also included aspects that consider aesthetic purposes, differing from the other teams in Soccer Open. Some of those aspects include the mirror support having a representation of our team logo while maintaining the modernity of the robot, having a helmet for the robot, that covers the components of the robot, absorving impacts and enhancing its shape and designing custom PCBs that serve as the robot's structure and allow us to use almost no cables on the robot while keeping the eletrical part organized and reducing risks, since loose cables can twine and cause problems.","https://drive.google.com/open?id=17NRvm_cWS61IQGhJiyuOWJjDm6tHwNvm, https://drive.google.com/open?id=1wq2DCzsh-j0Itj_N-cE9Jxfz4A5lZFbP, https://drive.google.com/open?id=14diPJetKmSlbMNtQTAhjAhE3zICayozv, https://drive.google.com/open?id=1DRKD0bNfEklfwV0vjVwhfCBL7ykUSgvU, https://drive.google.com/open?id=1bfx57MO9LJJCLfOQMKj2XAaVtN_MxgMf",https://drive.google.com/open?id=1YWv08JFESNkVNIra_J-L6txs0Wy0cRXO,"The robot uses a 12.6V LiPo battery that is used directly for the motors, and either converted by a XL6009 step up in the kicker board to 48V, used in the kicker system, or by a SY8205 step down in the top board to 5V, used in the STM32 and other components. The SY8205 is a model of step down much more efficient than the others already tested, being able to convert nine tenths of the original electrical energy.

We also use a mini regulator in the bottom board from 5V to 3.3V to power the LEDs (note that in the top board this regulator is not needed, as the own STM converts 5V to 3.3V).","Our motor uses PFM (Pulse Frequency Modulation) to control the RPM of each motor. The motors, that also have an integrated encoder and a two phases encoder, have functions using digital pins to control directions and to brake. They are powered with 12.6V of the battery.","With the removal of the infrared sensors (used to detect the ball in the Lightweight modality), we used two microcontrollers instead of three.

Located in the top board, the STM32F405 is the main microcontroller, being responsible for the reading of most sensors and the control of the motors and reactions of the robot. This microcontroller has 168 MHz of processing frequency, 192 kB of RAM memory, and 1024 kB of ROM memory, also allowing the expansion of the ROM memory with an SD card.

Being responsible for the reading and processing of the camera images, the OpenMV Cam H7 Plus is located on the top board and has a built-in camera. We started using it instead of the STM32H750, because although it is more expensive, the H7 Plus has many advantages compared to the STM. The differences between the two microcontrollers, together with a comparison of the two camera sensors we tested can be seen in our complete TDP (made with the previous international template), that can be accessed scanning the QR Code in our poster or accessing our Linktree in the end of this form.","We use an OpenMV Cam H7 Plus with an OV5640 camera module. Running VGA in 17-30 FPS, the camera runs the code using OpenMV firmware (Python).

A threshold is defined for the color, calibrating a minimum and maximum for the LAB (Light, A dimension and B dimension) values. Then, based on the threshold and some other values, like the maximum area and margin to merge, the code looks for blobs with those values in the image and uses its position to calculate angles and distances. In the code, we use a debug variable, that is only defined as True during tests, so the blobs are drawn in the image.

The values collected about the goals and ball are then sent to the STM32F405, where distances, positions and estimations are calculated.","The reflectance sensors are evenly disposed in the bottom board in a circle of 13 cm in diameter, increasing the detection area evenly. In total, the robot has 32 reflectance sensors, each sensor being composed by one phototransistor and one LED. We use the models TEMT6000X01 and WS2812B for the phototransistors and LEDs, respectively. The values of the reflectance sensors are later selected with the multiplexer and received by the STM in the top board.

To use fewer pins for the reflectance sensors, we use two multiplexers that only need 4 digital pins to read 16 sensors each, so in total, including 2 analog pins to get the readings, only 10 pins are used for the 32 sensors.
","The robot has one gyroscope of model MPU6050, used to get the angle of the robot in relation to an offset. Previously, we would also have a compass of model HMC5883L to get redundant values, allowing more reliability, since the gyroscope accumulates error on the readings along the time the robot is turned on, but since we lowered the height of the compass to leave space to the conical mirror on the robot, the magnetic interference of the motors became too high, so we removed the compass.

The angle read by the gyroscome, combined with the data collected by the camera and reflectance sensors, explained previously, compose the location part of the code, responsible for interpreting the values received, calculating angles, distances, positions and lines directions.","We use the step up to convert 12.6V to 48V, used to power a solenoid of only 6V and 20N, so it can go up to 160N. The electronic circuit of the kicker system is adapted from the American team ""Team Elite""  from Princeton Soccer Robotistry, with the main difference being that we use 4 capacitors of 1000µF to store energy for the kicks, while the original circuit uses 2 capacitors of 2200µF, since the original capacitors would not fit in our robot.

We use a system of recharge and shoot, converting and storing energy for a kick, and then releasing it to produce a powerful kick. We also have a LED that is activated when the system is charged, and two mosfets to activate the kicker. We use two mosfets instead of one to avoid energy reversion, since the converted energy could go back in the circuit and damage components.","The dribbler system only have one component, an A2212 motor of 1400KV, meaning it can go up to 17640 rpm when powered with the 12.6V of the battery, but in the code we limit it to 35%, having 6200 rpm, that is already enough to serve as a dribbler.","https://drive.google.com/open?id=1xHOLP2WAkWHl8gmizejwIzCC3W2EdQQj, https://drive.google.com/open?id=1RnK1fyvvRvxd3F5b1HEGEopq6iL-a5_N, https://drive.google.com/open?id=1K5DzlcUCkmpJjiEgptupEbZ0Q9e0HsvP","https://drive.google.com/open?id=1Jz6yHvFtDq7BJuwVUae5yfRy9N5ClO2i, https://drive.google.com/open?id=1Ybo-ni9OQdXH4a-GiYHgqsOTuQFxvb4t, https://drive.google.com/open?id=1HJhOPzwwoWIY_STx8PNdSR980cvOMafZ","We use different methods to make the access of information of the robot during the matches easier, since having a simple but efficient way to access information is important to manage the strategy during the match.

Firstly, we use an LCD display to show various informations of the robot such as the battery level, and to change strategies. But the main difference in our robot, compared to the other robots of Soccer Open, is the usage of a buzzer, either to quickly warn if there are problems with the battery or camera, very important considering the accidents that can happen with LiPo batteries and troubles we had previously with camera calibration, or we can use the buzzer to play sounds with entertainment purpoises, since as we mentioned previously, the matches should consider the spectators perspective too.","https://drive.google.com/open?id=1PSdnjjAQsNrL5CYRUc3NNpK1tx0cc7X1, https://drive.google.com/open?id=1J49hdFMDnlrZnrTXt06RFccNbLXfCdQL, https://drive.google.com/open?id=1Kf2Xnq4Ts382OmBoTPh4bs6esanlN6rP, https://drive.google.com/open?id=1x6mP7shmckMM3m6_0aJhMGcI7u2DAmXH, https://drive.google.com/open?id=1aOqVAhQRXbwMbVyFjLN7bel5EFrN3jRK","In the main microcontroller, the STM32F405 there is a movement class, that controls the movement of the motors dividing in x and y axis, the speeds are defined by the decision class. The movement class serves only as an intermediary of the processing of the information and the physical response of the robot.

In the movement class, the main function starts with three parameters: fx which is the force in x; fy which is the force in y; ang which is the force of rotation in its own axis. All these forces are vectorially added in each motor. After this the final force of each motor is verified, because the maximum strength is 100, we make a rule of three with all the motors to maintain the same proportion of strength in all of them and with power lower or equal to 100.","Firstly, there is a color detection code in the OpenMV Cam H7 Plus using the OpenMV firmware (Python). A threshold is defined for the color, calibrating a minimum and maximum for the LAB (Light, A dimension and B dimension) values. Then, based on the threshold and some other values, like the maximum area and margin to merge, the code looks for blobs with those values in the image and uses its position to calculate angles and distances. In the code, we use a debug variable, that is only defined as True during tests, so the blobs are drawn in the image.

In the STM (C++), after receiving the information of the goals and ball from the camera, we use trigonometry to calculate the position of the robot on the field, and with it, the position of the ball.","Detecting the angle of the ball relative to the front of the robot, the striker makes a curve to align its front with the ball and the opposite goal, making it easier to control the ball while conducting it to the goal. Meanwhile, only if the goalkeeper is too close to the ball, it will temporarily start to attack, using the same method of the striker.","Our robot has 32 reflectance sensors in a circular format on the bottom board, each sensor composed of one LED and one phototransistor. Reading the values detected by each sensor, we calibrate the code to detect the white lines, and knowing the sensors that are detecting the lines, we use trigonometry to find the angle of the line in relation to the robot.","In our main algorithm to make quick goals, the striker firstly identifies the ball and makes a curve to align itself, the ball and the opposite goal in a line. Then, the robot ensures it has the ball possession, so it can start a movement to the goal. Finding a spot free to shoot, the robot then uses its kicker to make a powerful kick towards the goal.","While the striker focuses on having the ball possession, naturally intercepting the opponent's kicks, the goalkeeper uses a system of predefined points in front of the goal, and using the ball speed to estimate its trajectory, the robot goes to the best spot to defend.

This strategy proved to be efficient even with teams that hide the ball behind the robot, as it is easier for our striker to intercept and take the ball, and the goalkeeper still knows where the ball is, as the striker keeps sending the ball position via Bluetooth.","The robots have slots for two different Bluetooth modules, the HC-05 and the RCJ module, used to send information like positions and strategy commands. The main importance of this type of communication is that, sharing the position of the ball on the field, even if one robot isn't viewing the ball, the robot will still know its position, as the other robot sent it via Bluetooth.","In our matches against different teams, we noticed the importance of the strategy when the hardware of the robot is on its limits, as the same strategy can be bad against better teams, but work surprisingly well against other teams, that only considering hardware, should be better too. So, for this competition, differently from the methods of strategy management normally used in Open, we are using a method inspired in SSL (Small Size League) Soccer teams, the State Machine.

In the code, there are diverse states, such as kicking, turning or going to a specific position. There are also behaviors, like the striker, goalkeeper or hybrid. To control the states and behaviors, there are transitions, that are either events or conditions that cause a transition of the current state, and sometimes the behavior. This way, we can produce a strategy much more fluid and changeable, defining which states will be used, what is the robot's behavior and how it will react and transition based on the analysis made of the team we are playing against.",https://github.com/Aperture-Robotics/Aperture-Open-Code.git,https://drive.google.com/open?id=1ZnrIPDRbb2Hn2E5plecBLASHtqEhdgET,"Robots: 1626,65 BRL each robot
Experiments: ~300 BRL
Environment: 165,25 BRL (does not include the field, as it was made for the previous team)
1 BRL = 0.18 USD","50% school
25% mentor
25% students",1,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",aperture.soccer@gmail.com,,
7/10/2025 14:01:07,MIDAS RBL,Open League,México,midasrbl15@gmail.com,https://www.instagram.com/midas_rbl?utm_source=ig_web_button_share_sheet&igsh=MTdjMzdyaHZyc28ydg==,,"Diego Patricio Bélmares Montoya: design mechanic and electronics
María del Pilar López Campas: electronics and PCB
Edgardo Valentín García Puente: programmer",Every day 7 hours ( except on Sunday),At school ,November of 2024,"none, it´s our first time","On some occasions, the compass data didn´t match the data, so we asked for help from our mentor, and he explained to us how it worked.",We use WhatsApp to communicate about the robot and check what tasks were pending.,chat gpt,https://drive.google.com/open?id=1UVIpWKFXr89TSY3DfX57OtsSNIzvaq_U,https://drive.google.com/open?id=1MVsLHL6iUMjea2IyvB1Fu9ojH1pZXPAd,https://drive.google.com/open?id=1e_BoqbRxOROV7_zIZF-YYanSSaQD7q1e,https://drive.google.com/open?id=1VgUPfSWRs7TXs7XpxNhUC_0pTMICO_pW,https://drive.google.com/open?id=1xDnYLzeSDFt9OUA-uldnRgeQHfwMbO6B,https://drive.google.com/open?id=1U8j-ChLRulkNJXLEEDWTSRbyLeHOymt7,https://drive.google.com/open?id=1rRQHRQ25Bxx_Sn-YUqS4658vwj50cZ_x,"We use 2 ultrasonic sensors, one on the side and one at the back, and they have the function that when they do not see the ball, they return to the point marked by the ultrasonic sensors.",https://drive.google.com/open?id=1OV6V8UVCePPTIQzcSDNYYVllX4r-a_pJ,https://drive.google.com/open?id=1M2n1pMCQ8w7qtGxUW0Y6volgh-BwJA0h,https://drive.google.com/open?id=1RHWSZs81_WrEWaV66kUCSpGt1LLtND5k,https://drive.google.com/open?id=1AUgwt_f-wIkDZG-Um2EpPzvdiLOtyhfH,https://drive.google.com/open?id=1JSrQ8Iuzsu7kqDkSiu1unlQHEdV_K0tk,https://drive.google.com/open?id=1LGIiQ-V2pS_R8XV-7SXcpnN8i3aqmYeA,https://drive.google.com/open?id=1XBoAkx6tySTkbIESG01KrtkiN62uivU4,"our designer uses fusion360 to create the mechanical parts that are adapted to the pcb and the space left after placing all the components and the wires he previously made, I consider the arrangement of the drivers to be different since they are positioned optimally to save space","for the pcb ""JLCPCB"" , For 3D printing, we use a 3D printer ""PrusaSlicer MK3"".",4 motors because its the better for the movement of the robot ,N/A,N/A,https://github.com/MidasRbl/midas,"the pieces that are adapted for the cards, since several prototypes and attempts were made to see which one fitted so that the drivers could fit in such a small space","https://drive.google.com/open?id=1j17ki_c_yaxil-wV5dgwl1FLjg8gvJb8, https://drive.google.com/open?id=1_D552MdYugdVG-WYU0HsAJ0A3L1Z6woj, https://drive.google.com/open?id=1_4QBBT9nDSVhQi48xQekWx2gn3p5qGWo, https://drive.google.com/open?id=1lbtHw9O_Uwg8eIreuTwZUS_mq0DrL-jZ",https://drive.google.com/open?id=1HdUoKAxjaxQd3u_NImBhgZAM4k20FgSX,"For the 5V motors and regulators, we power them with 7V; for the Teensy and the Pixy, we power them with the voltage output from the 5V regulator. The ultrasonic sensors, LED indicator, driver, and compass are powered with 3.3V coming from a 3.3V regulator, and those come from the 5V regulator.","We activate the motors through a programming that uses two digital pins and a PWM per driver; with the digital pins we control the direction in which the motor rotates and with the PWM the speed at which it moves. The driver is connected to the 3 pins that go to the Teensy 4.1, the VIN 7V, GND, and 3V.","The Teensy 4.1 has better processing and helps us save space on the PCB, has a large number of pins, a large amount of memory, just like the Teensy 4.0 it also saves space, features a fast processor, and efficient power consumption.",the pixy has a function to detect colors called color connected components.,"We have 32 photoresistors and 32 LEDs that form a circle on the lower plate, we have 2 multiplexers and each one drives 16 signals from the photoresistors to the Teensy 4.0, we calibrate each photoresistor so that it marks 1 if it is white and 0 if it is not.","To detect the ball we use Pixys 2.0 and 2.1, for positioning on the field we use ultrasonic URM09, for line detection we use photoresistors, for orientation we use a CMPS14 compass, to connect the cameras we use SPI SS and analog connections, for the ultrasonic sensors we use analog connections, for the multiplexer we use analog and digital pins, for the compass we use I2C connection. In robot 2, it is oriented forward using the compass, while robot 1 has the difference that when the ball is in front, it positions itself with a camera that sees the goal, and when the ball is not in front, it positions itself using the compass.",N/A,N/A,,"https://drive.google.com/open?id=1ugmHGpXfJaEgYn0MJj0vi1K0S9GmykC5, https://drive.google.com/open?id=1daETcjxckPirkrmqzm1g_qMuiLZmGMlt","the PCB boards, the cards, and the arrangement of the drivers between the 2 boards to save space since it was something different and complicated","https://drive.google.com/open?id=17-7df5l9GdTDcHXxEr2WnRPTZ3g-2TuV, https://drive.google.com/open?id=1NEbz7KrQqeNYXW1Xgf6NCfSSDiLo6cnE, https://drive.google.com/open?id=1tXLOZQXYcIpfzRNvOojOUC2RSzdSrdKh, https://drive.google.com/open?id=1norItH4CQWF1hl5UQVnlxE2xjfOsRuMS, https://drive.google.com/open?id=1ATvniefiQjjeoU8806VbZcKNATQPI4qj",A code that works with zeros and ones is downloaded to the processor to direct which way to move. It also has a PWM so that all the motors have a similar speed.,"The Pixy is connected to a servo motor with a fixed angle of 90 degrees. We made 5 sections with the 180 degrees of the servo motor. In addition, there is a formula to detect if it is far or near. This helps the camera's precision to be more efficient.",N/A,"By calibrating each photoresistor, we mark one if it is white and 0 if it is not white, then we divide the circle formed by the photoresistors and we make combinations of lines to have sections and know which side to go to, we pass that data to the main processor in which some lines are combined and the actions for detection are carried out in each of them.",N/A,"When one robot has the ball, the other robot must be defending in a neutral position. When the robot that had the ball no longer sees it, the other must see it and change.A code that works with zeros and ones is downloaded to the processor to direct which way to move. It also has a PWM so that all the motors have a similar speed.",N/A,"Servo camera is the function in which we follow the ball in a way with 5 sections of the servo motor since there is a division of 180 degrees also add a function to know if the ball is far or near, this helps us so that the robot makes more optimal decisions for the positioning of the ball, this data is sent to the main processor and the main processor gives the order of the movements of the motors so that the robot moves making the movements when following the ball efficient, these movements have a section of subroutines in which it is facilitated so that the code is shorter, faster and easier",https://github.com/MidasRbl/midas,https://drive.google.com/open?id=1CICYidS8fjJvYUYnsAt1Q80xDravL5eo,Robots 1500USD Experiments 1000USD Environment 1000USD,70% sponsors 20% school 10% government ,4,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",opensoccer7@gmail.com,,
7/10/2025 15:07:35,Team Faabs,Open League,Germany (GER),teamfaabs@technulgy.com,"@TeamFaabs (Instagram)
Technulgy (Youtube)",https://drive.google.com/open?id=1D7eOOV17qPYdjusy5OOg6uRkiHuJCpUq,"1. Fabian Brune → Hardware/CAD-Design
2. Jurij Lenz → Hardware/Other
3. Mark Krause → Electronics/Software",every day,Robotics basement in school,we started developpement in early 2024,"    German Open 2025 - 1st  Soccer Open
    German Open 2025 - 1st  Technical Challenge Soccer Open
    South German Championship 2025 - 1st  Soccer Open
-
    World Championship 2024 - 8th  Soccer Open
    German Open 2024 - 1st  Soccer Open
    South German Championship 2024 - 1st  Soccer Open
-
    World Championship 2023 - 1st  Soccer Open
    German Open 2023 - 2nd  Soccer Open
    German Open 2023 - 1st  SuperTeam Soccer Open
    South German Championship 2023 - 2nd  Soccer Open
-
    European Championship 2022 - 2nd  Soccer LightWeight
    German Open 2022 - 2nd  Soccer LightWeight","Managing registration , Organizing the Flights/Hotels ","We communicate irl, and over whatsapp. We have no scheduled meetings, its a steady progress","Simple but repetetive coding tasks, very complex precoding tasks",https://drive.google.com/open?id=1um0QxRuFiffrRW__iHpNNUnXfpkOhCq6,https://drive.google.com/open?id=10MSMQPeBGveuaAQL6QH5I0O1bnAzVVFZ,https://drive.google.com/open?id=1Jxl1_PUel9AW8J0IxnessWTDzL6t5dc_,https://drive.google.com/open?id=1moJZ6H0chrntJBJpjw4EuLhY7nRUhmFN,https://drive.google.com/open?id=1Z_K9Vx6BPv9MG61znrCn1YnembfVXpNC,https://drive.google.com/open?id=1RJjnxQGZ2Gq97e5qb04fnqoqot5T2Vcm,https://drive.google.com/open?id=1kXVZFR6H41cgkY9KV6GnH-h7Fk2AmVbV,"We have upgraded from a 4-LiDAR system to a far more
efficient 360° LiDAR, which has already delivered remarkable added value.",https://drive.google.com/open?id=11OMvDnL9Mk5w4plpdlavQftLOnUbD9_o,https://drive.google.com/open?id=1oN0vMxjkZS9GQFfMrNEap7BfmZmT2lUN,https://drive.google.com/open?id=1qVhacSXTAD-Hx6Qu1c7_FsiSWXl55BJc,https://drive.google.com/open?id=1755zd64DTLcNrLsNhjGOZc-Bcsi9_fiE,https://drive.google.com/open?id=1CQWEgOLFy5li0alTE8DObnzLtgiqDpXD,https://drive.google.com/open?id=1u-J8v5xF9vkPLaIYGm0xTPBY8lr1vhxu,https://drive.google.com/open?id=1jXuXYqA823c0cBlAphAvoRCi6WdQZVtH,"The design of the robot has undergone a substantial transformation compared to
last year. Instead of the previous four DC motors, we now feature four 45W brush-
less motors, each integrated with a gear reduction mechanism that overlaps the
wheel. Additionally, the kicker and dribbler have been significantly improved. We
now utilize a vertical kicker and an optimized dribbler, also powered by brushless
motors. In addition, we have upgraded from a 4-LiDAR system to a far more
efficient 360° LiDAR, which has already delivered remarkable added value.
We are currently using Autodesk Inventor 2025","
The manufacturing process of our robot is a complex and iterative journey that
begins with the design phase and culminates in the assembly of the final product.
Figure 20: Milling Process Cross Wheels Figure 21: Milling Process Bearing Block
The manufacturing of the robot involves several steps. First, the individual parts
are designed and drawn using Autodesk Inventor. Next, we decide how and where
we would like to manufacture our parts. For milled components, we have sponsors
such as the IHK Academy Schwaben, Multivac, and Blech und Technik, which have
the capacity to mill, edge, or laser high-complexity parts for us. Before we mill
the parts we start with a 3D print of the part. This allows us to check if the part
fits and works as intended. If everything is working as intended we start with the milling process.
The parts are then assembled and tested. If necessary, we make adjustments to
optimize performance. If the parts were not sponsored, we would have to buy the
parts. This would be very expensive and time-consuming. We are very grateful to
our sponsors because they realized our project and succes.","
Our motor is a 45W model from the Maxon EC series, known for its exceptional
balance of size, speed, and torque—ideal for our application. The motor is con-
figured by us with an 3/1 reduction ratio, converting high speeds into sufficient
thrust, even under heavy resistance. To maintain consistent RPM performance,
our motors are equipped with Hall sensors, providing extensive programming op-
tions that enable the robot to execute precise and specialized maneuvers. 
Our wheels are precision-milled from aluminum, as are many other components
of the robot. This ensures an optimal blend of weight, precision, and durability.
Each wheel consists of five elements: the base, the gear unit, the cross
wheels with pins, the lid preventing cross wheels to fall out and the bearing inside the wheel. The body is constructed from aluminum plates, each featuring
a central hole with a fit and a recess for the cross wheels on the outside. This
year, we chose X-rings over O-rings for the cross wheels, as they minimize friction
significantly. The X-rings are mounted over a precisely turned aluminum part and
remain in place thanks to their elastic properties. We are using 4 motors for movement.","Our kicker functions similarly to a traditional solenoid, converting electrical energy
into kinetic energy via a magnetic field generated by a coil. The kinetic energy
is transferred to a plunger core, which strikes with significant force. The kicker
system includes two plunger cores: the upper core is dedicated to horizontal shots,
while the lower core is designed for vertical shots.

The vertical kicker has an plunger that moves the chipper blade radially to a
fixed point on the robot. This movement digs the chipper blade under the ball, imparting
a vertical impulse. The angle of the shot can be adjusted through software by
manipulating factors such as shot strength (see Kickerboard). On the hardware
side, this feature can be fine-tuned by altering the shape and tilt angle of the
chipper. For example, a steeper angle produces a higher trajectory, while a flatter
chipper shape results in a more compact flight path. Both the chipper and the
plunger cores are equipped with spring return mechanisms to ensure high shooting
frequency efficiency.","
The dribbler is a crucial component of our soccer-playing robots, enabling precise
ball control and ensuring the ball remains in contact with the robot while in motion.
The system consists of a rotating roller that imparts backward spin to the ball,
thereby stabilizing it and allowing controlled dribbling and passing maneuvers.
Our dribbler system has undergone multiple iterations to enhance performance.
The latest design incorporates: Optimized Roller Material: High-friction rubber
ensures maximum grip on the ball. Independent Dribbling Motor: A high-torque
brushless motor provides precise control over the roller speed. Spring-loaded Mech-
anism: Allows adaptive pressure on the ball, reducing impact forces and enhancing
stability. A key focus has been on optimizing the interplay between hardware and
software to maximize efficiency on the field. The dribbler control algorithm dy-
namically adjusts the roller speed based on ball position and movement direction,
ensuring stable control during high-speed maneuvers. The advancements in our
dribbler system significantly contribute to the overall performance of our robots,
allowing for seamless ball control, precise passes, and accurate shots.",https://technulgy.com/#/publications,"We are most proud of all the milled parts, especially the wheels on our robot.
For further information, please consult our original self-written TDP, or in the wheels section above.","https://drive.google.com/open?id=1SEaHC7AdWIMsUdBiNOZeV_9VSaZSVx-D, https://drive.google.com/open?id=1C1yFZB32lo8d0HBwWcMs2sagsbKbWk2t, https://drive.google.com/open?id=1ykmVlheMyEYnbQzQzIW2o5Ws4BvahpHZ, https://drive.google.com/open?id=1D8WimN4VF26Rorexp0vJeubCajn5V1DQ, https://drive.google.com/open?id=1OYxytX56pW2CpoaTsofobp34B6r-HH1F",https://drive.google.com/open?id=1ueIVAqiKR28Ztk5woX1U5S2tPmL3_ngT,"Our robot is powered by a custom Li-ion battery pack that supplies a nominal voltage between 14.4 V and 16.8 V. This input is regulated down using SMD buck converters to generate three stable voltage rails: 12 V, 5 V, and 3.3 V. These are distributed to all subsystems via the Powerboard, ensuring efficient and reliable power delivery across the robot.","We use Maxon brushless motors (50 W EC series) with integrated Hall sensors for feedback. Each motor is driven by a dedicated Maxon ESC (Electronic Speed Controller), which is mounted on the Powerboard. These ESCs regulate motor speed and direction based on control signals from the Teensy microcontroller.","We use two processors:

    The Teensy 4.1, a 600 MHz ARM Cortex-M7 microcontroller, is responsible for low-level control such as motor actuation, sensor data processing, and real-time decision-making. Its high performance and compact form factor make it ideal for robotics applications.

    The NVIDIA Jetson Orin Nano serves as the high-level compute unit, handling object detection, camera input, and LiDAR data processing. We selected it due to its GPU acceleration, CUDA support, and ability to run parallelized computer vision pipelines.","We use a camera connected to the Jetson Orin Nano for object detection. Frames are converted from BGR to HSV, and color thresholding is applied to isolate orange (ball), yellow (goal), and blue (goal). Morphological operations clean the image before cv2.findContours() locates objects. Detection runs in parallel threads for low latency and high reliability.","Line detection is handled by the Lineboard, which uses multiple phototransistors to sense reflected light from the field. These signals are multiplexed and interpreted to determine the robot’s position relative to the white field lines.","We use the following sensors for navigation and localization:

    360° LiDAR (connected to Jetson Orin Nano) for obstacle detection and field mapping.

    Phototransistors (on the Lineboard) to detect field boundaries.

    BNO055 gyroscope (connected to the Teensy) for orientation.

All sensor data is processed in real time and fused for consistent navigation.","The Kickerboard connects directly to the Powerboard and controls two solenoids (horizontal and vertical kicker). Two 3S LiPo batteries and a step up converter boost the voltage to ~42 V, stored in large capacitors. A MOSFET + MOSFET driver circuit releases this energy to fire the solenoids. Kick strength is modulated by adjusting the on-time of the signal.","The dribbler uses a high-torque brushless motor driving a rubber-coated roller. A spring-loaded mechanism applies adaptive pressure on the ball. The motor is controlled via ESC and software logic running on the Teensy, which dynamically adjusts speed based on ball position and movement direction.","https://drive.google.com/open?id=1NsC7UIzKnBpAD63_xAj9Ly9J9hBeb8ik, https://drive.google.com/open?id=1tYtQX5ZdapASyNt-mV8vYpXF2dBoPeNv, https://drive.google.com/open?id=12bR-ki7DZigWsaHGOyGUd6Nv6kNOtq6a, https://drive.google.com/open?id=1qz7MkHHkbofB3siKakOF4qpKPPwadgA2, https://drive.google.com/open?id=1Jcy4VcLTN35FOTUg8oIaTYPEjIkq4Zkr","https://drive.google.com/open?id=1UJxunXSRfnu6UNa1N9dSX-1CBNVirI_K, https://drive.google.com/open?id=1Ah4tcWt21-qY26PFymBsjwS4xFplHdXV, https://drive.google.com/open?id=16xqEGAcvu1uNfXyiErIjAZlcDkhBHjys, https://drive.google.com/open?id=1zF3aXjeVzSkhTJQxnNYdMpvKDwHN8W4O, https://drive.google.com/open?id=14mTDjKvH65tUHckk6jNXYk3Si4SyXefB","We are particularly proud of the modular PCB system, which includes the Powerboard, Kickerboard, Lineboard, and Teensyboard. Each board is compact, reliable, and purpose-specific. All boards were custom-designed in Eagle, soldered by hand, and iteratively improved. This modularity allows quick diagnostics, maintenance, and upgrades.","https://drive.google.com/open?id=1FbYiR4Gt2KMkU0Em2yvGqbwlLWRKNT4P, https://drive.google.com/open?id=1s9mgrro41PkaumJpm5WFDm4OiHJfsErS, https://drive.google.com/open?id=1bSx90srPsEDqenxEDvyXhmiKeQX4D7YD, https://drive.google.com/open?id=1UEW1tFOc1SP0GkVRufxCgApjkJ3c4paG","The Teensy 4.1 sends PWM control signals to the ESCs, which in turn drive the brushless motors. Feedback from Hall sensors allows for precise closed-loop control, enabling accurate movement and trajectory execution.","The ball is detected using the camera on the Jetson Orin Nano. Frames are processed in HSV color space, and contours are extracted to determine position and size. The largest contour matching the orange color profile is selected as the ball. This data is transmitted to the Teensy for decision-making.","Our algorithm uses a simplified version of RRT-inspired tangent-based path planning. The robot calculates an intercept trajectory with controlled curvature, always approaching the ball from behind. This ensures reliable captures. All robots follow the same logic, though movement profiles may differ slightly due to individual calibration.","Line sensors detect white boundary lines. If a forbidden zone is approached, the robot blocks movement in that direction and accelerates away. The system considers robot pose, ball position, goal location, and line sensor data to make escape decisions.","Goal scoring uses camera input to identify goal positions. A PID controller aligns the robot by rotating eccentrically around the ball, keeping the goal in line. Once aligned, the kicker is triggered. The dribbler maintains ball control during positioning.
","If one Robot does not see the ball, it locates itself with the LiDAR sensor, and drives back to a predefinitioned coordinate on the field, right in front of the goal.","Yes. Robots use NRF24L01+ transceivers for wireless communication, managed by the Teensy. This enables coordination between units, e.g., for multi-robot strategies","We are particularly proud of the object detection pipeline using OpenCV and CUDA on the Jetson Orin Nano. Each object is detected in parallel threads, significantly reducing latency and increasing reliability. This modular, multithreaded system enables real-time tracking and precise field awareness, which are key to competitive performance.",https://technulgy.com/#/publications,https://drive.google.com/open?id=1SG2fJPFJaQMfl27uvOi0LPEECIVKfRsv,"Robots: 2785.90€ each
Experiments: 1500€
Environment: 400€","10% sponsors
90% school",5,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",einsschlingel@gmail.com,,
7/11/2025 2:11:21,TAM-EUROPE TSC-FootBot,Lightweight League,"Maribor, Slovenia","nick.kolar2006@gmail.com, kostimotej006@gmail.com",https://www.instagram.com/tscfootbot/,https://drive.google.com/open?id=1HIsUn81-KvY25TVmmIlg2pKb5Nxm2ToU," - Timotej Kos: captain, 3D modeller and mechanical engineer
 - Domen Fras: programmer and electrical engineer
 - Nik Črnčič: all-round team support
 - Nick Kolar: graphic Designer, technical assistant ",Throughout the year we met 2-3 times a week for a few hours. But the last two weeks we were together all day long.,"We have our own special laboratory in school, for robotics.",October 2024.,"This year:
National competition 2025, Slovenia, Maribor: Lightweight League
Croatian open competition 2025, Croatia, Zagreb: Lightweight League
Regional competition 2025, Slovenia, Maribor: Lightweight League

Last year:
European Championship 2024, German: Lightweight League
World Championship 2024, Netherlands: Lightweight League
National competition 2024, Slovenia, Maribor: Lightweight League","We didn't get much help from the mentors becouse our primary goal is to make the robots completly by ourself so we can work on expanding our knowledge. We only get a little advice from mentors when we were designing the PCB but help only as advice.

They took care of supplying all of the components we need. We just sent them list of links and quantity.",We communicated through snapchat and teams. But we mostly communicated in person in our laboratory.,"Our programmer used ChatGPT as a learning tool to understand how to program the OpenMV camera, which operates using Python—a language we have not yet studied in school. The assistance was used strictly for educational purposes and to expand our knowledge beyond the classroom.",https://drive.google.com/open?id=1voJh3BAbF_A774aAkW9US0jUnZzjBCW2,https://drive.google.com/open?id=1s9fJblttt4FvXvxgwyos1ZBW6ISDDR0v,https://drive.google.com/open?id=1GUDuZ4OU0XtyIe4DFzS-Vaj7cQf7as6C,https://drive.google.com/open?id=1m9Gx4L-u2bmjW_rt5e32XawpOYtUot31,https://drive.google.com/open?id=1GVVGNqVfudhcCr_GD3sljkDc52cIxoiN,https://drive.google.com/open?id=1WDCypjooUb4LrxyHZzWfiSP1dgaCEQKW,https://drive.google.com/open?id=1kJFVfxcV3OhE3ftPXIAdmeFZOcHo97jB,"The robot is programmed in such a way that, upon starting, it must not be placed on the line. It then positions itself behind the ball and moves toward the opponent's goal using the camera and gyroscope for orientation.

Although the robot does not know its exact position on the field, it always follows the ball and avoids crossing the white boundary line. This allows it to play a successful football match without violating the rules.",https://drive.google.com/open?id=1AWnZUfC6STFe9LaqWFVBsyC2gBgGzHk1,https://drive.google.com/open?id=10Uz91oQpLsj1eh9T6dQRNAslw1IKIhbY,https://drive.google.com/open?id=1KpF080v380qP1mnd8nDI2b2nRR90FEHJ,https://drive.google.com/open?id=1lafMg9I0pJP_K2Ys15RM9xevzetSv2oh,https://drive.google.com/open?id=1BcCwoEVbNY_ygNMlzlVkN3RxP7rO40iV,https://drive.google.com/open?id=1nWCA2dRlCPMOG_1oFcUuIxi9elTWB8g9,https://drive.google.com/open?id=1Zcg1fSzzQyx5x-pKpjSFMNNqAG06h_tT,"We designed our robot in SolidWorks. We upgraded the last year robot and took inspiration from the robot of team Edge from Japan. 
In designing our robot, we ensured that all components are integrated in accordance with the competition rules, while also maintaining a clean and aesthetically pleasing appearance.","For 3D printing we used BamboLab X1E 3D printer from our school.
For 360 degree mirror from aluminium we used CNC machine from our school. 
Our PCBs were designed in EasyEDA and produced by JCLPCB.","We have used four motors, each connected to an omni-wheel, mounted at 45-degree angles. This configuration provides full holonomic movement, allowing the robot to move in any direction and rotate on the spot without needing to change orientation first.

Positioning the wheels at 45° ensures optimal control, agility, and smooth motion in all directions, which is especially important for dynamic gameplay on the RoboCup Junior Soccer Lightweight league field. It allows the robot to quickly reposition itself relative to the ball and the opponent’s goal.","Yes, our robot is equipped with a kicker. We use a commercially available solenoid as the core kicking mechanism, powered through a step-up converter that increases the voltage to 35V for a stronger and more effective kick.

The solenoid is triggered via a relay, which acts as a switch. The relay is activated by a ball detection sensor, which we built as a simple light barrier (optical sensor). When the ball breaks the light beam, the sensor sends a signal to the microcontroller, which then activates the relay, releasing the solenoid to kick the ball.

This design ensures precise and automated kicking, triggered only when the ball is in the optimal position in front of the robot.","No, we do not use dribbler.",https://github.com/robocupslovenia,"The mechanical design of our robot is the result of several development iterations and engineering improvements that we’re extremely proud of. As a team, we focused on creating a compact, modular, and robust mechanical system tailored for high-performance autonomous soccer.

One of the standout innovations is the custom-machined aluminum conical mirror, which we designed and manufactured in-house using a lathe at our school. This mirror enables the 360-degree camera to capture the full environment in real time, giving the robot full visual awareness of the field — a critical capability for effective autonomous play.

The robot frame is entirely 3D printed using ABS material, which provides a strong yet lightweight structure. This choice of material allowed us to rapidly prototype and refine our design while ensuring the robot can withstand high-speed collisions typical in RoboCup matches.

We also integrated a powerful kicker mechanism, which uses a spring-loaded system for quick and precise shots. This gives our offensive robot (""Šeško"") the ability to actively score goals, rather than passively push the ball.

All components are mounted using standardized M3 screws, making the robot highly serviceable and modular. In case of damage or failure, parts can be quickly replaced or upgraded during competitions.

Finally, thanks to clean assembly, precise component integration, and thoughtful design, the robot in its final form is not only highly functional but also aesthetically pleasing.","https://drive.google.com/open?id=1Vsbo6QWPKq-miWAT9kxs7XLzRCjZDm31, https://drive.google.com/open?id=1nkCNuACbIHd9s5bLRff86Gg2cL7cIHm6, https://drive.google.com/open?id=1sIKDFt3tbqMDmGSV-gkpPstzFOb2Ciku, https://drive.google.com/open?id=1djxRgWB5gpVHTSo3-9GcDsgfmxGV2Elk, https://drive.google.com/open?id=1G-MycX5HXMZPOsE7YOpdT1vtL3FDxknd",https://drive.google.com/open?id=1odkMqf8ktrbHzWL4iiAkFfPf3_w5UqNx,"Our robot is powered by a 3-cell LiPo battery (11.1V, 14.43Wh), which serves as the primary energy source for all components.

- We use a combination of buck and boost converters to generate the necessary voltage levels:

- The motor drivers are powered directly from the 11.1V battery, as they are rated for this input.

- A buck converter steps down the voltage to 5V, which powers our main microcontroller and other logic-level electronics.

- A dedicated boost (step-up) converter increases the voltage to 35V, which is used to drive our solenoid kicker, providing powerful and consistent shots.

To help us monitor power levels during matches, we also integrated a voltage display module on the robot. This allows us to quickly check the remaining battery voltage without disconnecting or using external tools, ensuring we can maintain peak performance throughout the game.
","We drive our motors using Pololu G2 High-Power Motor Driver 18v25 H-bridges. These drivers are extremely compact compared to the ones we used in previous years, which is a major advantage in optimizing internal space within the robot’s chassis.

Despite their small size, they are highly efficient and reliable, capable of handling high currents while minimizing heat generation. This allows our robot to maintain consistent and powerful movement throughout matches without risking thermal shutdown or performance loss.

Each motor is connected to its own dedicated driver, and we control them using PWM signals from our main microcontroller. The precise control offered by the G2 18v25 drivers enables smooth and responsive omni-wheel movement, which is critical for accurate navigation on the field.

By upgrading to these drivers, we not only reduced the footprint of our electronics but also increased performance, responsiveness, and energy efficiency of the entire drive system.","Our robot uses two Arduino Mega 2560 Pro Mini microcontrollers, each dedicated to a specific and essential task to maximize performance and modularity.

The lower microcontroller is exclusively responsible for line detection using an array of infrared sensors. Its only task is to ensure that the robot stays within the field boundaries at all times, providing fast and reliable edge detection. This microcontroller also communicates with the upper one via TX/RX serial communication, sending real-time data about the robot’s position relative to the lines on the field.

The upper microcontroller acts as the robot’s main processor, managing high-level game behavior. It processes input from the 360° vision system, calculates the angle to the ball in real time, and determines the most efficient path for the robot to reach and capture the ball. It also controls the kicker mechanism, enabling the robot to actively shoot towards the opponent’s goal.

By using two independent microcontrollers with a dedicated communication link, we reduce processing load per unit and improve system reliability. This design choice ensures faster response times, better task separation, and a more maintainable codebase, all of which contribute to a more effective and competitive robot on the field.","For ball detection, we use the MRMS IR Ball Finder 3, an infrared sensor capable of detecting both the angle and distance to the special orange ball used in RoboCup Junior. Originally, the sensor comes with multiple IR receivers arranged in a compact circular module. To enhance the accuracy and range of detection, we desoldered the individual IR receivers and repositioned them along the outer edge of the robot. This custom placement significantly improves the robot’s ability to detect the ball from any direction and respond more quickly.

As the attacker robot approaches the ball, it already begins to slightly align itself toward the opponent’s goal, optimizing its path for a faster and more accurate shot. Once the ball is in its possession, the robot accelerates straight toward the goal, using its orientation from the OpenMV H7 Plus camera, which provides a 360-degree field of view. This ensures that the robot is always properly aligned for shooting.

We also use the OpenMV H7 Plus camera on our goalkeeper robot, which uses it to maintain awareness of its position relative to the goal. This allows the goalkeeper to actively reposition itself to defend the goal more effectively, based on the location of the ball and the opposing robots.

This integration of custom-placed IR sensors for precise ball tracking and vision-based orientation for both offensive and defensive play gives our robot team a clear tactical advantage on the field.","Our line detection system uses 48 infrared LEDs as light emitters and 32 phototransistors as receivers. The IR LEDs continuously illuminate the area beneath the robot. When the light reflects back from the ground, more infrared light is reflected from the white field line than from the darker field surface.

The 32 phototransistors detect the amount of reflected infrared light and send analog voltage values to the lower Arduino microcontroller. When the signal exceeds a defined threshold, the microcontroller identifies that the sensor is over the white boundary line.

Thanks to this configuration, our robot can precisely detect field boundaries and stay within the allowed playing area","For navigation and orientation on the field, we use the Bosch BNO055 absolute orientation sensor. This is a 9-axis sensor that includes an accelerometer, gyroscope, and magnetometer, with built-in sensor fusion, providing reliable absolute heading (orientation) without the need for manual calibration or complex calculations on the microcontroller.

The BNO055 is connected to our upper Arduino Mega 2560 Pro Mini via I2C communication, which allows for fast and efficient data transfer. We use the orientation (heading) data from the BNO055 to keep track of the robot’s facing direction, which is crucial for aiming towards the goal and aligning with the ball, especially during fast-paced movement.

This sensor plays a key role in making sure the robot always knows where it's facing, even after rotations, collisions, or sudden stops. Combined with our ball detection system and strategic programming, it allows the robot to navigate the field with high accuracy and confidence.","The kicker is triggered using a simple and effective infrared (IR) detection system — composed of an IR transmitter and receiver placed at the ball intake area. 
When the ball enters the robot’s possession zone, it breaks the IR beam, and this interruption immediately signals the microcontroller to activate the kicker. This mechanism allows for precise and automatic kicking without any delay.",We don't use it.,"https://drive.google.com/open?id=1OmJqlpfHKedws1HuRGOui5jFkL55XoLg, https://drive.google.com/open?id=1s_4druHzsDbUT8T7WRj8Qo4Y-uDpNC1H, https://drive.google.com/open?id=1W6DUHlSzPSUD0mDtMh_BPFXHSuYIizKJ","https://drive.google.com/open?id=11Avcr6fy-NF7cmvlxiRhAsbEyCBVam69, https://drive.google.com/open?id=142BMNbL6wSPyjgu30wvS6JqTaoTMbSe8","We are most proud of our custom-designed PCBs, which play a crucial role in integrating all electronic components into a compact and efficient system. The robot features two main PCBs: the lower PCB handles line sensors and motors, while the upper PCB is responsible for communication, power distribution, and peripheral devices like the 360-degree camera. Designing our own PCBs allowed us to optimize the layout for our specific needs, reduce wiring complexity, and improve reliability. One key innovation was the separation of power and signal traces to minimize electrical noise, which is especially important for precise sensor readings and motor control. Additionally, we designed the PCBs to be modular—each board can be easily removed or replaced without affecting the rest of the system, making repairs and upgrades much easier.
This custom approach not only helped us save space and reduce weight, but also gave us a deeper understanding of how all components interact on an electrical level, ultimately leading to a more stable and high-performing robot.","https://drive.google.com/open?id=1jL82aUPgpCo8zjprTkxq6K9Gm4u9-6Md, https://drive.google.com/open?id=1MoNc2x9IzkdstzU1sLP32EHg8EpZOuWW, https://drive.google.com/open?id=10ukxxduDHS7oNB4UlrUorDgdV18PEdGv, https://drive.google.com/open?id=1Eub2K8pUSY31ttX2mHVV_zVC06uh9KdL, https://drive.google.com/open?id=11eMZPF64pthLFo2Uzw25aN-6v4ldC3a3","We use our processor to control the motors by sending a single command that includes PWM (Pulse Width Modulation) values for each motor.

These PWM signals are calculated based on the desired movement vector and orientation, and are then transmitted to the motor drivers, which in turn control the speed and direction of the motors.

This centralized approach allows for efficient and synchronized control of all four motors using omni-wheels, enabling smooth holonomic movement across the field.","We use an infrared (IR) ball-finder sensor that detects the ball in a full 360-degree range around the robot.

The sensor provides an analog signal that corresponds to the angle at which the ball is located relative to the robot's orientation. Our processor reads this analog value and translates it into directional movement by adjusting the motor speeds accordingly.

This setup allows the robot to constantly track the ball’s position and react quickly, without relying on complex image processing or a camera system.","Our algorithm for catching the ball differs between the attacker and the goalkeeper robot, as each serves a unique role on the field.

The attacker robot uses a PID control algorithm to move precisely toward the ball. Based on the angle provided by the IR ball-finder sensor, the robot continuously adjusts its speed and direction to approach the ball smoothly and efficiently, minimizing overshooting and ensuring accurate tracking.

In contrast, the goalkeeper robot does not follow the ball directly. Instead, it moves horizontally (left and right) along the goal line, depending on the ball's position on the field. Its movement is simpler and focused on blocking the goal rather than possession, using only angle detection to stay aligned with the ball.

This division of behavior allows each robot to specialize in its role — one in attack and precise ball control, the other in goal protection through quick lateral responses","Our robot uses an array of line sensors mounted on the bottom side to detect the white boundary lines on the field.

These sensors are connected to a dedicated Arduino Mega, which continuously reads the sensor values and calculates the robot's relative position with respect to the field boundaries. Instead of sending raw data, this processor interprets the line positions and sends simplified movement instructions to the main Arduino processor, which controls the robot's motion.

By offloading line detection and positioning calculations to a separate processor, we reduce the computational load on the main controller. This allows the main system to focus on ball tracking and motor control, while the robot effectively avoids going out of bounds by reacting in real time to line sensor input.","To score goals, our robot uses a camera-based orientation system and a kicker mechanism.

When the robot detects it has possession of the ball, it continuously moves toward the opponent’s goal while using the camera to adjust its orientation. The robot actively aligns itself with the goal during movement.

As soon as it is facing the goal directly, it automatically activates the kicker to shoot the ball toward the goal.

Even without a dribbler, the robot is able to maintain ball possession by keeping its motion steady and directed, making the entire process efficient.","To prevent the opponent from scoring, we use a dedicated goalkeeper robot that defends the goal based on the ball's position.

The goalkeeper moves laterally along the goal line, constantly adjusting its position depending on where the ball is detected on the field. This allows the robot to effectively block incoming shots by always staying between the ball and the goal.

In the rare case that the goalkeeper is the only robot left on the field and the ball is stationary, it switches from defense to offense mode — attempting to move toward the ball and score, ensuring continuous gameplay and pressure on the opponent.

This simple but effective logic enables both active defense and situational offense, increasing the team’s adaptability during matches.",No.,"We are most proud of two specific parts of our code: the multifunctional goalkeeper logic and the PID control for our attacking robot.

Our goalkeeper robot is not just limited to defense. We developed a special algorithm that allows it to intelligently switch between defending and attacking, depending on the situation. If the goalkeeper is alone on the field and the ball is stationary, it will automatically transition into attack mode and attempt to score. This dual-function behavior adds flexibility and improves our chances of winning, especially in unpredictable match situations.

We also implemented a PID (Proportional-Integral-Derivative) control algorithm for our attacking robot. It helps the robot move smoothly and accurately toward the ball, maintaining stability even when the ball or the robot is in motion. This results in faster and more reliable plays, reducing errors and increasing scoring efficiency.

Both of these features were developed through trial, testing, and continuous improvement, and they have made a big difference in how effectively our robots perform during matches.",https://github.com/robocupslovenia,https://drive.google.com/open?id=1VAc7sW5OAxrVcsOTaHhNrPn4O78fk5Jy,Approximately 1.500 EUR per robot including replaced parts and failed builds.,"90% school
10% sponsors",6,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",nick.kolar2006@gmail.com,,
7/11/2025 2:52:29,Sadr United,Open League,IRAN,"m.khakpoor1393@gmail.com, @MHKhakpour(Telegram ID)",N/A,,"Mani Ghadakchi: Programmer
Pirouz Monjezi: Mechanic
Mohammad Taha Ahmadi: Programmer & Electronic
Mohamad Taha Mobini: Mechanic & Electronic","We had six hours of scheduled sessions each week, spread across Saturdays and Wednesdays. However, as the competition approached, we worked on the robot whenever we could, beyond the planned class times.",We used to work in the robotics room at school.,We started working on the robot two years ago.,"IRAN Open 2025 :Open League
IRAN Open 2024: Open League",We faced challenges in setting up the GTD35 motors and configuring the TDAxis12 gyroscope module to correctly receive and process data.,We managed the workload by staying in touch during the week through our Telegram group and email whenever we didn’t have classes. We divided the tasks among team members and helped each other stay on schedule.,"
ChatGPT and DeepSeek. These tools helped us review our code, debug issues, and explore alternative solutions. In addition to programming, we also used AI in certain aspects of mechanical and electronic design.

Moreover, ChatGPT was used to help us translate and refine the written content for our team description paper (TDP), ensuring clarity and correctness in English.

Overall, AI played a supportive role throughout our development process, improving both technical and documentation quality.",https://drive.google.com/open?id=1XxfruEUmtWmoGoDVXtrjHFZ2yYuViqdm,https://drive.google.com/open?id=1WXDt2Iupd5duKcNrmk76MR5px8Dc5IMb,https://drive.google.com/open?id=1kPFCiSWcGfIXbBqDrN71egJyp5nEqQss,https://drive.google.com/open?id=1INyyk2lnNv9OZf27So7btdZ2Eqq9Aydp,https://drive.google.com/open?id=1mBPqNWS23tXv1irRphfmgV6VhRoSM_4l,https://drive.google.com/open?id=192mMsXlIT1_QP5JuP-Qa6gKFM1xJJzW5,https://drive.google.com/open?id=1lV3peCZoOCrteU6WMoZqxL1G3fqjzEzf,"We use a distance sensor(TD53L1) to determine the robot’s position, and based on that, the robots—whether attackers or defenders—can accurately identify their correct positions.",https://drive.google.com/open?id=1ETfV20GLjgx3s-hnWbXmXwK6iLFZLcCd,https://drive.google.com/open?id=1tR8lqlflhqGicCrHgPHifNEQLxv1_aHq,https://drive.google.com/open?id=1mXzonDPR9lg0_732ziVB6Cojh5LmR_Gm,https://drive.google.com/open?id=1-oaJBYYvuYYZMny2mHK8WQtT3Im3EjuE,https://drive.google.com/open?id=1KBlW0bRyy8UDu-XulXzZLq4F5Zruf_eH,https://drive.google.com/open?id=1W6c2DCuFdjgU2im1KB0dGFcfAeSdbwKq,https://drive.google.com/open?id=1IUhXc3JhIsI8SyIyFAdW4xAEkQ12wNKR,"We designed the mechanical parts of the robot using SolidWorks.

First, we studied the designs of other teams and noticed that some had covered the lower part of their robots. We thought this was a good idea as it helped lower the robot's center of gravity.

In our initial design, we planned to cover only the lower section, but later realized that covering the upper part as well not only improved the appearance but also provided protection against impacts. The robot’s outer shell was originally planned to be made of aluminum. However, based on last year’s regulations, using aluminum would make the robot too heavy and non-compliant with the rules.

In our opinion, we haven’t yet fully utilized the robot’s potential. Our plan is to improve its performance through software enhancements so we can make full use of all its features and capabilities. That said, if there is one thing we might consider changing in the future, it would likely be the mirror above our camera.","We built our design using a combination of CNC machining, 3D printing, and external PCB manufacturing services. The CNC machine was mainly used for precise metal parts, while the 3D printer allowed us to create complex shapes for the robot’s body.

We analyzed and troubleshot last year’s PCB, which helped us make effective improvements on the new PCB design. Some key components such as the distance sensors and the gyroscope were replaced with better versions to enhance performance.

For parts like the mirror above the camera, we sourced specialized components from external suppliers, using a laboratory mirror for optimal results.","Our robot uses four GTD-35 motors.
We arranged these motors so that each one is positioned at a 90-degree angle relative to the next, and each motor is set at a 45-degree angle relative to the robot’s 0-degree reference direction. This configuration allows the robot to move smoothly in all directions with minimal limitations.

One key advantage of this setup is that during high-intensity interactions—especially when moving forward—all four motors contribute to the motion, resulting in higher overall torque and better pushing power.

We used commercially available omni wheels, which are both affordable and effective.","We did not use any solenoids for the shooting system in this robot.
Instead, we designed and built a fully mechanical kicker system.

The system includes a Dynamixel XL-430 motor, a spring, a shooting lever, and several gear-like components. These parts work together to store and release mechanical energy. The motor rotates and compresses the spring by pulling back the lever. Once released, the spring quickly pushes the lever forward, kicking the ball with significant force.

The core design and implementation were done by our mechanical team, but we also received valuable guidance and feedback from our mentors throughout the process. Their experience helped us improve the precision and reliability of the final design.

All parts were custom-designed to meet the competition’s size and weight restrictions.","Our dribbler consists of a silicone roller and a motor.
The body of the dribbler was 3D-printed, including the internal gears, which are made from the same material.

The motor is mounted at the top of the dribbler’s body, while the silicone roller is positioned at the bottom. The motor’s rotation is transferred to the roller through a set of gears: one gear is attached to the motor shaft, and the other is connected to the roller’s axle.

As the motor spins, the gears engage and rotate the roller inward, allowing the robot to keep the ball close and maintain controlled possession.

The initial design and implementation of the dribbler were done by our team. However, our mentors played an important role during the construction of the silicone roller. They provided helpful guidance on selecting the right type of silicone and choosing a reliable method for shaping and assembling the roller to achieve the desired grip and flexibility.",https://drive.google.com/file/d/10QaheKKrgUGHZ5LHROj55cLwXHRJSW8X/view?usp=sharing,"In our opinion, the most innovative part of this robot is its shooting system. Unlike many teams, we did not use any solenoids in its design. Instead, we developed a fully mechanical shooting mechanism that is both powerful and reliable.

The system consists of several components, including a Dynamixel XL-430 motor, a shooting lever with a spring, a snail-shaped cam, and other custom mechanical parts. All components were designed and built entirely by our mechanical and design teams.

Here’s how it works:
When the XL-430 motor starts rotating, it turns the cam-shaped (snail-shaped) part. At the beginning of this motion, the shooting lever is in its least stretched position. As the cam continues to rotate, the lever and spring are gradually pulled back, storing more energy.

Once maximum tension is reached, the system is ready to shoot. Upon receiving the shoot command, the lever slips off the cam’s highest point and snaps forward, launching the ball. The cam then continues rotating, resetting the system for the next shot.

This design is innovative not only because it eliminates solenoids, but also because it stores and releases mechanical energy efficiently with high precision and repeatability. We’re proud of this mechanism because it reflects our team’s creativity, engineering skills, and attention to functional detail.","https://drive.google.com/open?id=1z6V7vTR1JdOJpFrWXupwPT2CdQrvxqVX, https://drive.google.com/open?id=1qwwfq2jkxjolnTZ2-xUFp-piPJCvw5CU, https://drive.google.com/open?id=1MpI5njyBe9i0iGxo7_9GSYCZQwOg7T7H",https://drive.google.com/open?id=1Ti0mfzRYN5mm1etLhw7SgBiwT4KT7Lte,"Our robot uses a 3-cell 12.6V battery (1550mAh) to power the motors directly. An LM2596 buck converter steps the voltage down to 5V for electronics.

To stabilize power delivery, we added two diodes:

SS34 prevents high motor current from draining the LM2596’s input capacitors, reducing 5V noise.

SMBJ30 protects the LM2596 from back-EMF voltage spikes that can exceed 30V.

This setup ensures reliable and noise-free operation even under heavy load.","Our motors come with built-in drivers, so we did not need to use any external motor driver modules.

The motors are powered directly by 12V supply, and each motor has two data pins for communication.

However, the motors use an RS-485 serial communication protocol, which is not directly compatible with the standard UART interface of our processor.

To address this incompatibility, we used the SN65LBC184DR transceiver, which converts the UART signals from our processor into the RS-485 differential signals required by the motors. This allows reliable and noise-immune communication between the processor and the motors.","Our initial choice for the processor was the Arduino Mega 2560, as it met all of our functional requirements and offered ample I/O pins.

However, due to its relatively large physical size, we faced difficulties integrating it into the limited space inside the robot.

As a solution, we decided to use the ATmega2560 microcontroller chip directly. We mounted the ATmega2560 on a breakout board and integrated it into our custom-designed main PCB, which allowed us to save space and customize the board layout according to our needs.","For ball detection, we used a Pixy CMUcam5 camera, which has a built-in processor for image processing. This means that the camera itself handles all the visual processing internally, eliminating the need for an additional external processor.

Because of this capability, we selected the Pixy camera as our solution for reliable and efficient visual ","To detect the out-of-bounds line, we used LDR (Light Dependent Resistor) sensors. Each LDR was paired with an LED that illuminated the ground surface.

The amount of reflected light changed the resistance of the LDR, allowing us to detect changes in the surface color or texture.

We configured the LDRs in a pull-up circuit and read their analog output using the ATmega2560 microcontroller to determine whether the robot was on or outside the allowed area.

","For navigation and positioning, we use the TDAxis12 sensor module. This module is a combination of the MPU6050 and BNO055 sensors and provides fused data output after sensor fusion.

We connect the TDAxis12 to our processor via the I2C communication protocol, allowing efficient and reliable data transfer.

This fused data helps us accurately determine the robot's position on the field as well as the direction it is facing.","The motor in our kicker mechanism is a Dynamixel XL-430, which has three pins: VCC (12V), GND, and a Data pin.

The Data pin is connected directly to the TX pin of our ATmega2560 microcontroller.

The XL-430 motor uses a half-duplex serial communication protocol on its Data line. This means the same line is used for both transmitting and receiving data, but not at the same time. The microcontroller sends commands such as position, speed, and torque settings to the motor, and the motor can respond with status and feedback through the same line.

Because the communication is half-duplex, data transmission and reception happen alternately, requiring precise timing and coordination handled by the motor control library. This reduces wiring complexity while allowing reliable two-way communication.

However, in our design, we only send data commands to the motor and do not receive any data back from it.","Our dribbler motor is controlled by a DRV8874 motor driver.

The driver is connected to the microcontroller via PWM pins, allowing us to precisely control the motor’s speed and operation by sending PWM signals.

This setup provides efficient and smooth control of the dribbler’s rotation.","https://drive.google.com/open?id=1wKazMosPy9afz7zU-v_oQTWhaIv0VSbU, https://drive.google.com/open?id=1SmNcZXToGTO8BwZmUa3p-WtPnD0uowht, https://drive.google.com/open?id=1cA3N4UvwFzeHmsENqw_erQm_OzRtWXs5","https://drive.google.com/open?id=1P0SX5EOuLdzheJ1MZ1R643gdUdrtDkYU, https://drive.google.com/open?id=10HbqpJWJ3rGfDGFUwu4uKLXE6-I0k44r, https://drive.google.com/open?id=18PhZ0pNV-9Ne_vVvxYw-F7SqEI1M2b4O, https://drive.google.com/open?id=1kU-vEZnZdroTFZLftIVEGKPgoPzK-S3K, https://drive.google.com/open?id=1tFQUNm-0i1DtEP780ORc9mweCqJBXDNU","We take great pride in successfully identifying and resolving critical issues in last year’s PCB design.

One major problem occurred when the motors suddenly reversed direction (e.g., switching from clockwise to counterclockwise or vice versa), which generated a back-voltage (back-EMF). This back-voltage interfered with the operation of our previous gyroscope sensor, the MPU-6050, preventing us from obtaining accurate sensor readings.

Furthermore, during one of our internal competitions, we noticed smoke coming from the robot. Upon investigation, we found that the LM2596 voltage regulator module—responsible for providing a stable 5V output—had been damaged due to back-voltage from the motors and had stopped functioning.

After identifying the root cause, we added a set of protective diodes to block any reverse current from reaching and damaging sensitive components. This modification significantly improved the reliability and stability of our electronics.","https://drive.google.com/open?id=1yRF9Gpl8HWOLqRDtltLofJibZCwLS1be, https://drive.google.com/open?id=1nQnlaWRVefIFMvUg3Q_N7bOfAnMybFt0, https://drive.google.com/open?id=1X0DEKEu9u09TVxKgmuBIhjcp11KPs4WG, https://drive.google.com/open?id=1rG-jRpQd9m9VNL9pWDY3BWntX4DWK1uK, https://drive.google.com/open?id=1vB8lxbmeXgoJDEMersV9BXHYarfgo9gg","We use an ATmega2560 microcontroller to control the movement motors of our robot.

The motors are GTD-35 models with built-in drivers and communicate via RS-485 protocol. Since the ATmega2560 only supports standard UART, we use a SN65LBC184DR chip to convert UART signals to RS-485.

Through this setup, we send serial commands from the ATmega2560 to each motor, allowing us to control their speed and direction precisely.","To detect the ball, we used a Pixy CMUcam5 camera, which is connected to our ATmega2560 microcontroller via the SPI protocol.

Using the Pixy configuration software(Pixymon), we defined the color signature of the ball so the camera could recognize and track it in real time. The camera continuously provides the X and Y coordinates of the ball’s position within its field of view.

The camera observes the environment through a 360-degree mirror mounted above it. Using circular trigonometry, we calculate the angle of the ball based on its (X, Y) coordinates. This allows us to determine the ball’s direction accurately relative to the robot’s orientation.

This setup gives us a real-time understanding of the ball’s location and direction, which is essential for planning movement and decisions during the game.","In our previous algorithm, the robot would initially move straight toward the ball until it reached a certain distance, then rotate based on the ball’s relative angle to align it with the robot’s ball capturing zone. However, this often caused the robot to collide with the ball or lose control, so we decided to redesign the algorithm.

In our new approach, the robot moves diagonally toward the ball instead of approaching it head-on.

If the ball is in front of the robot, it takes a smooth angled path to intercept it.

If the ball is behind the robot, it follows a curved trajectory to reposition itself behind the ball before guiding it into the intake mechanism.

Additionally, the robot’s movement speed is dynamically adjusted based on the distance to the ball:

When the ball is far, the robot moves faster.

As it gets closer, the robot slows down to ensure precise and controlled ball acquisition.

This updated strategy significantly improves accuracy and reduces the chance of overshooting or misaligning during ball control.","Our robot uses Light-Dependent Resistors (LDRs) mounted on its underside to detect the white boundary lines on the green field.

Each LDR is paired with an LED that shines light onto the ground. The amount of reflected light changes depending on the surface color. Since the field is green and the boundary lines are white, we can detect a sudden increase in reflected light when the robot moves over a white line.

Our algorithm continuously monitors the LDR values. When a significant change is detected, it determines which side of the robot is near the boundary. The robot then adjusts its position to move back toward the center of the field and avoid going out of bounds.

This reactive method is simple but effective for staying within the field during gameplay.","Goal-Scoring Algorithm

When the ball enters the robot’s mouth, the dribbler holds it in place.

If no obstacle is ahead, the robot moves directly toward the opponent’s goal and shoots using the kicker.

If an obstacle is detected, the robot performs a 180° turn to hide the ball, moves backward to push it in front of the goal, then turns again and shoots.

To approach the goal:

If the goal is visible to the camera, the robot uses vision data to move and aim toward open spaces.

If not visible, it uses the distance sensor and field knowledge to estimate goal direction before shooting.

This adaptive strategy ensures efficient path planning and maximizes scoring opportunities.","When neither robot sees the ball, the last attacker moves to the center, while the other takes the goalkeeper role.

If a robot detects the ball nearby, it becomes the attacker, and the other switches to defense.

For example, if the attacker can’t reach the ball in time, the goalkeeper moves toward it, and the attacker returns to defend.

Each robot’s position is determined by its role, and roles are switched dynamically to ensure constant coverage of both attack and defense.

This strategy enables efficient coordination and smooth transitions during gameplay.","Our robots use HC-05 Bluetooth modules to share the ball’s relative position and dynamically assign roles.

If no robot sees the ball, one stays in the center while the other guards the goal. When a robot detects the ball, it becomes the attacker, and the other switches to goalkeeper.

If the attacker is too far, the goalkeeper moves toward the ball, and the attacker returns to defend.

Before adding Bluetooth, both robots often went for the same ball. Communication now ensures better coordination and smoother gameplay.","Two key innovations improved our robot’s gameplay: dynamic role switching and the ball-hiding maneuver.
Role Switching
Robots exchange ball position data. The one closer becomes the attacker; the other defends. If neither sees the ball, the last attacker moves to center, and the other becomes goalkeeper. This ensures optimal coverage.

Ball-Hiding Maneuver
When an obstacle blocks the path, the robot performs a 180° turn, approaches the goal from behind, then turns and shoots — avoiding direct blocks and improving scoring.

These strategies greatly enhanced our coordination and match performance.",https://github.com/mamali-1382/Sadr-United-RCJ-2025.git,https://drive.google.com/open?id=1vb9LSe1qW2__obeNJ4P9Nl11Awb_lGTy,"Robots: 1100 USD each
Experiments: 400 USD
Environment: 100 USD","10% school
90% parents",4,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",m.khakpoor1393@gmail.com,,
7/11/2025 13:00:59,Autobots,Lightweight League,Brazil,N/A,N/A,https://drive.google.com/open?id=15Dt1uJWrGVHDZxsGrI7hQQ7vC2bKjceG,"João Henrique Pinheiro Cunha: Programming
Antônio Riera Astolfo IV: Mounting, Soldering, Assembling
Pedro José Ferraz Gondim: Circuit and PCB Design
Adler Teixeira Ferro Pereira: Mentor",2 hours once per week,Robotics room at school,April 2025,CBR 2024: Lightweight League,PCB Manufacture,N/A,N/A,https://drive.google.com/open?id=1XauNdSCOPtcqSLWN_5J6uqRbADnja0ZU,https://drive.google.com/open?id=15oJeiZ5Y9qyHW9ZyP86xucjSJXYNxCmv,https://drive.google.com/open?id=1-s17T-jveA-gRZ_rAWf5NMs783hAegym,https://drive.google.com/open?id=1LLZqZ1oFaiRLwDBYfkwi09DtMFLPlSOQ,https://drive.google.com/open?id=1TgOdG1s8psEnHt9v9IdjEJ92W9Cz1RFw,https://drive.google.com/open?id=11cH7ZDvzGWntM1Sly2Gq4k4i0vjCZcli,https://drive.google.com/open?id=10b-EN8yjPXlX38ILu1lithC5sAR-duck,N/A,https://drive.google.com/open?id=1s7YQiPgBhbhTxSznahqAa90eoJffeFr4,https://drive.google.com/open?id=1lpcbM9izTjXeYV_0aqWBV9BU15JrSpFO,https://drive.google.com/open?id=1BrXdE8OFkXipIX48e7YvKCqqqErH98K0,https://drive.google.com/open?id=1kcqxCJg6EgXtHXr_-UG--3UlklezcMYZ,https://drive.google.com/open?id=1L7Wr1LLcgkjtfVqFM7XieTbepVHqyWHL,https://drive.google.com/open?id=1dZJYGVBtk6A2g3a9DMLtNlEkWnETcCZJ,https://drive.google.com/open?id=1YIYcudNY9JC1tKcJjOTKAQ2Kzg3Pbv60,We used previous designs as reference and Cadsoft EAGLE to design everything.,"Everything was handmade, self manufactured. The circuits, using thermal transfer and FeCl3 for corrosion. The rest of the structure using resin and grinding tools.","4 motors for movement, 1 motor for dribbler. 
Using 4 motors for directions, we have more strength and speed on every vector.",N/A,"We added the dribller without planning to have one, so we used a free space, a small dc motor controlled by a TIP122 transistor and connected to a printer bearing.",,"The whole PCB is what we are most proud of. Every aspect of it, desingning, manufacturing and soldering the components, troubleshooting and adapting things, it was quite a challenge.",https://drive.google.com/open?id=1wNxBwa1adw3kNIQJukgC-vx3EwnIT4OK,https://drive.google.com/open?id=1yje7pjrVWrKWC9Q-IRXqGKdgW34kGqpl,"We use a LiPo Battery of 7.4V to supply everything, regulated to 5V / 3V3 in order to power the sensors.",We use a VNH5019 for every motor.,"We use Arduino DUE for controlling everything in the robot, becuase of the PWM outputs and many GPIO Pins for upgrades.",We use a HiTechnich IRSeeker To detect the position of the ball.,"We use a green led and a LDR sensor to detect light reflection. There are 4 sensors, each one detecting a direction.","We use a GY-26 Compass to control the robots position. By comparing the actual state of the compass with a previous saved value, we make the robot always front-forward.",N/A,"Everytime the ball is detected in front of the robot, the Dribbler starts running and stops when the ball changes position or a white line is detected.",https://drive.google.com/open?id=1pxQt8ueNpxJ_jdC5IWK3fQqK_wDpeiLx,https://drive.google.com/open?id=160DdtQqwUhdFc2cn6zX8RofjxzckW9C1,N/A,https://drive.google.com/open?id=1W1JYY8AleCQm6JUanbnYMgGcTXqlSbeq,"We check the position returned by the IRSeeker and move the robot to the direction behind that position, in order to face the ball. We made a function to control the 4 motor controllers at once.",We read the position returned by the IRSeeker.,The robots work with the same algorithm.,"Everytime a LDR value changes greatly, means a line was found. The robot stops and moves in the opposite direction to return to field.",Go forward and release the ball stopping the dribbler when the line is detected.,N/A,N/A,N/A,N/A,https://drive.google.com/open?id=1N0UDKbdxbTft2OFwXqv2R1JF7YNNt6nl,We used materials provided by the school.,100% School,5,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",adminntes@sacramentinasconquista.com.br,,
7/11/2025 13:32:23,UAE_SL_1,Lightweight League,United Arab Emirates,"jok7xx@gmail.com , ya6548456@gmail.com , mohamedgamalofs07@gmail.com",https://www.instagram.com/rh.roboteam?utm_source=ig_web_button_share_sheet&igsh=ZDNlZDc0MzIxNw==,https://drive.google.com/open?id=1aDxG1Kb0Xu9Y_00tBviGF-329y-Vd2tN,"Mohamed Gamal - Programmer/Team Leader
Youssef Ahmed - Mechanical / Non-technical
Omar Ali - Electrical Engineer
Abdullah Abdelaziz - Mechanical Design",20 hours per week,School Robotics Lab,2024-9-1,UAE National Championship 2025: Lightweight League Championship,"We faced difficulties in designing the robot and some problems occurred in the programming, so we sought help from our mentor to solve the problems.","We gathered the mentor in the robotics lab and discussed the distribution of tasks. We used Whatsapp, Google meet and Botim to plan and manage tasks distribution",The team has all the experience and sometimes the team uses some AI software like Chat GPT to improve the ideas and debug the code.,https://drive.google.com/open?id=1zpUd47CR4FgW4d1JET82FKiHk0H0BIu0,https://drive.google.com/open?id=1SSrNSXLZqN_RfR7Ng5cHDrXxyFlgYXz_,https://drive.google.com/open?id=1ueRJ-fI7L8nBNU-BYxm6xteL8hTyMrCN,https://drive.google.com/open?id=1OHQ55pP013uh2ZbVnksI40erX6D-unIk,https://drive.google.com/open?id=1iaWmgMDBVShWkurmqrjQ3KstmvDd5jiV,https://drive.google.com/open?id=1qig0pEaTactYUEs1oB3ZC8a9fCjqLp29,https://drive.google.com/open?id=1PCFuGi6jB9N5XbAgw-MGqAkmWi4oHJq7,"The robot uses camera and ultrasonic sensors to calculate distance between walls and verify its location in the field relative to the goal post , We used that to maneuver around opponent robots and build scoring strategies. ",https://drive.google.com/open?id=1njJ5PEGAEbumqqXzO3xOPwuLA6_4mza3,https://drive.google.com/open?id=1GSkd-tUcG9SjpQ1zPFDwU1xNB9I7dt-2,https://drive.google.com/open?id=1I1rBe1vE_RG0z66oFcozw0ly6jU7mAPa,https://drive.google.com/open?id=1T98j3pQEsIrM5U0en-d8cdLaP9-CCGcn,https://drive.google.com/open?id=1Z5R-89rY6FnEtghd9DoEsECM4HM_oD4L,https://drive.google.com/open?id=1ZhgMlf6IqJ_z2cctaS_-40jip0p4nOed,https://drive.google.com/open?id=1I--MUb8T8JpQ4eA2nGYoiicvO3rKnvoq,"We used SolidWorks to design our robot and got ideas by researching other RoboCup teams' designs. We considered size limits, weight, and sensor placement. After testing, we improved the kicker position and front shape for better performance.","We built our robot using 2D-cut acrylic parts, which we designed in SolidWorks and cut using a laser cutter. We used basic tools like a drill, saw, screwdriver, and glue gun to assemble the parts.
We didn’t make custom PCBs—instead, we used off-the-shelf electronic modules like motor drivers, controllers, and sensors. For parts like wheels and brackets, we used ready-made components and adapted them to fit our design.
During testing, we made some changes such as re-shaping the chassis for better ball control and adjusting the kicker position to improve its power and accuracy.","We used 4 DC motors with omni-wheels for better stability and precise control. This setup is more effective than 3 motors. The omni-wheels were purchased, not custom-made.",We used a JF-0530B solenoid (12V) boosted to 36V using an XL6009 converter and a 4700µF capacitor. It’s controlled by MOSFETs connected to the JoinMax X4. The solenoid is placed in the dribbler zone at an ideal distance for kicking.,We used a 2200KV brushless motor with a tire mounted directly for friction. It’s controlled by an ESC connected to the JoinMax X4. The motor is fixed using a 90 degree mount for proper ball contact.,,"One of the parts we are most proud of is the overall distribution of components inside our robot. We carefully arranged the motors, kicker, dribbler, battery, and sensors in a way that keeps the robot well-balanced, compact, and within RoboCup size and weight limits.
This layout was not random—it was designed to maximize space efficiency while making sure all components are easily accessible for repairs or adjustments. For example, we placed the kicker at the ideal distance in the ball capturing zone and mounted the dribbler without blocking the field of view of the sensors.
Even though our robot doesn't use advanced mechanical systems like custom 3D parts, we believe that our simple, smart, and rule-compliant design is an innovation in itself, making the robot stable, effective, and competition-ready.","https://drive.google.com/open?id=1bXI7IvpoIm0SLDb1VfX21uxqbRYM_j3v, https://drive.google.com/open?id=1iR-OIP6siPWJ89B0tNK9wjAGjD6P26ML, https://drive.google.com/open?id=1DOvtplLDQldQ0QDyX8l0TpsOrc4faH21, https://drive.google.com/open?id=14V8_He3Qs70cEq7BtwZdkkpwHLfxrrtN",https://drive.google.com/open?id=1T4mCHuLyoanL3vhktThF8l5GiJAobtU4,"We use an 11.1V battery. An LM2596 step-down provides 5V to the JoinMax X4 and OpenMV camera. The 11.1V powers the motors and ESC, while an XL6009 boost raises voltage to 36V for the kicker.",We use a 5-channel motor driver connected to the JoinMax X4 for the 4 movement motors. The dribbler is controlled by an ESC connected directly to the JoinMax controller.,"We use the JoinMax X4 for motor and sensor control. It has a touchscreen GUI for easy debugging. We also use an OpenMV camera, which tracks the goal and sends signals to the JoinMax.","We use a compound IR seeker with 7 channels:

West, 2. NW, 3. Upper NW, 4. Front, 5. Upper Front-East, 6. NE, 7. East.
The channel with the strongest signal indicates the ball’s direction, which is sent to the JoinMax X4.","We use light sensors around the robot: 3 front, 3 left, 3 right, and 2 back. They’re connected to the JoinMax X4, and when a white line is detected, the robot moves in the opposite direction to stay inside the field.","We use the OpenMV camera to find the goal when the ball is captured. We use 4 ultrasonic sensors (one on each side) to find our position on the field, and a compass to know the direction the robot is facing. All sensors are connected to the JoinMax X4.","Our kicker system uses a JF-0530B 12V solenoid, which is driven by a custom-built high-voltage circuit. The circuit works as follows:
We use a boost converter (XL6009) to step up the voltage from 11.1V to 36V.
A 4700 µF, 50V capacitor stores the boosted energy and releases it quickly when needed to activate the solenoid.
The solenoid is controlled by MOSFETs, which act as electronic switches.
The JoinMax X4 controller sends a signal to the MOSFETs to close the circuit and fire the solenoid at the right moment.","Our dribbler system uses a 2200KV brushless DC motor to spin a rubber tire mounted directly on the motor shaft. The tire increases friction with the ball, helping to keep it in front of the robot while moving.
To drive the brushless motor, we use an ESC (Electronic Speed Controller), which is connected directly to the JoinMax X4 controller. The controller sends PWM signals to the ESC to control the motor’s speed.
The motor is mounted securely on the robot using a 90-degree motor bracket, placing it at the right height and angle for effective ball contact.
This setup provides consistent rotation and strong ball control, especially during fast movement and turns.",,,"We are most proud of our kicker circuit because it was the most challenging electronic part to design and get working correctly. At first, the kicker wasn’t strong enough and the circuit was unstable, but after testing and improvements, we developed a custom high-voltage kicker system that works reliably.
The circuit uses a boost converter (XL6009) to raise the voltage from 11.1V to 36V, and a 4700µF, 50V capacitor to store and release energy quickly to the JF-0530B solenoid. The solenoid is triggered through MOSFETs, which are controlled by the JoinMax X4 controller.
We had to carefully manage charging time, trigger timing, and component ratings to prevent overheating or failure. After testing different configurations, we achieved a powerful, fast, and safe kicker system, and we’re proud of the innovation and effort that went into making it work properly.",https://drive.google.com/open?id=1x-i0DJHYFj_szLaPdWmTK8X4xmsCUhA9,"The JoinMax X4 sends PWM signals to the motor driver for movement motors, and to the ESC for the dribbler. It calculates speed and direction based on sensor inputs like ball and line detection.","We use two IR seekers (front and back) for 360° ball tracking. Each has 7 channels. The strongest signal shows the ball direction, and the JoinMax X4 uses that info to move toward the ball.","The robot uses both seekers to find the ball and curves around it to align with the dribbler. If using two robots, one attacks while the other defends or supports based on position.","Our robot uses an array of light sensors placed around the base (front, back, left, and right) to detect the white boundary lines on the field. These sensors are connected to the JoinMax X4 controller, which continuously checks their readings.
When any sensor detects a white line, the robot immediately moves in the opposite direction to avoid crossing the boundary. The algorithm is simple but effective—it doesn’t rely on complex calculations; it just reacts quickly to line detection to keep the robot inside the field.
This direct response helps the robot stay in play without getting stuck or going out of bounds.","When the robot is facing the goal and close enough, we programmed it to stop the dribbler to reduce ball spin and allow better control. Then, the kicker is activated to shoot the ball toward the goal.

In some situations, we keep the dribbler running during the kick to add more power or spin to the shot, especially when the robot needs to shoot quickly while moving.

The combination of goal detection (via camera) and distance control allows the robot to decide the right moment to stop or continue the dribbler and activate the kicker for an accurate and effective shot.","We use a simple but effective algorithm for defense. Our goalkeeper robot constantly checks for the ball using the IR seeker. When the ball comes into its field of view, the robot starts tracking it.

If the ball enters the goalkeeper’s ball capturing zone, the robot moves forward to block or capture it, preventing the opponent from scoring. If the ball moves away, the keeper returns to its default defensive position in front of the goal.

This reactive behavior allows the goalkeeper to quickly respond to threats and cover the goal efficiently.",N/A,"We are most proud of the obstacle avoidance algorithm we developed for situations where the ball gets stuck between our robot and an opponent in the ball capturing zone.

In this situation, instead of pushing against the other robot and wasting time, our algorithm makes the robot quickly back off and curve around to try a new angle of attack. The robot detects that it's not gaining control of the ball or not moving forward as expected, and then triggers the avoidance behavior.

We came up with this idea after noticing that in many matches, robots get stuck in front of each other fighting over the ball. By backing off and repositioning, our robot can break the deadlock, regain control, and continue playing effectively.

This algorithm has helped us win more games by keeping our robot active, avoiding unnecessary stalls, and giving it a better chance to score or pass.",https://github.com/bin3ziz/UAE_SL_1-RCJ-LW,https://drive.google.com/open?id=1dEiR9pcXqtQY1Kg_BCdxZWFu5JSxTZwG,"1- 6306$
2- 1500$
3- 590$","50% of sponsors,50% schools",5,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",ya6548456@gmail.com,,
7/11/2025 23:12:44,LARES,Lightweight League,South Korea,maison102938@gmail.com,,,"SiYeong (Offense Programming), MinJun (Defense Programming), Sehwan (Hardware)",14 hours per week,a robotics room at school,"March,2025", Netherlands open 2024: Lightweight League,We discussed an algorithm for not entering the penalty zone.,We used Notion to manage our schedule and tasks.,We used ChatGpt to debug our codes.,https://drive.google.com/open?id=1WEyW4kiJ3Q20lrPLD6AnRfMvZz8Cvh5p,https://drive.google.com/open?id=1MMENDZNpCVMEIxk85qO87mLKTqYXj0nh,https://drive.google.com/open?id=1onN4TnDfbuAN_ofUPsdmagnpiU641crz,https://drive.google.com/open?id=1n4J0W50n3dNAcrksQIHVZYh4yoRw5IMo,https://drive.google.com/open?id=1PxKzRDbbk0bnvjH-BdllaTuMlw0GBAv0,https://drive.google.com/open?id=1VtCbJVaL0v4yLSyeQ2hX5lbbSpNuF2wI,https://drive.google.com/open?id=1cXOVx4eVDV_G_CCP1Q-xKB4C60g28o67,"We used ultrasonic sensors and camera sensors to find position inside the field.
The robot uses ultrasonic sensors to determine the relative distance from the wall, and uses camera sensors to determine the position of the goalpost.",https://drive.google.com/open?id=1i8OdSQRtJbdWTVxrQO_jNrFime36l-t0,https://drive.google.com/open?id=1tp9Xs05Q8v0F2Uj344g0fHBr02iCTjv8,https://drive.google.com/open?id=1adRU8x1EPjuKmdw9Ok5jpPZMUYxewzQi,https://drive.google.com/open?id=1EyAy2vq1U4Yr6a695ZH5pwSVHDK136oQ,https://drive.google.com/open?id=1uIJ1PLn2UEl9IdNKTKP2wqibfjx6yaVn,https://drive.google.com/open?id=1vxKlljBaMW1Ar-4UM-oZ1wwJ73bonesN,https://drive.google.com/open?id=13w7_PapO3jhZ5EBbuc6TREgoG6zxZQ-W,"We primarily use the ATmega2560 as the mainboard. To detect the boundary lines on the field, we use 12 Arduino light sensors. For ball detection, we use 16 IR sensors, and to detect walls, we use ultrasonic sensors. To measure the robot's orientation changes, we use a BNO055 compass sensor.","We designed the robot using ATMega 2560 compatible parts.
To make the robot's guard and other parts, a credibility 3D printer was used.","We used three motors, the minimum number of motors that can move quickly and freely through a two-dimensional plane. We control the robot using the concept of vectors.",N/A,N/A,N/A,"Using a 3D printer and a light sensor, we created a device to check if the robot caught the ball. By putting the device in front of the robot, it could decide whether to shoot or not.",,, Our robot has a 11.1V battery pack that is regulated to 5V for our Arduino and used directly by the motor drivers.,Each of the three motors is controlled by its respective motor drivers.,We used the ATmega 2560 board as the mainboard.,Our robots each have 12 IR sensors. This allows us to determine which of the 12 directions the ball is in.,"Our robots each have 16 light sensors. If one of each sensor detects a white color, it escapes in the opposite direction of that sensor.","The most core sensors are Ultrasonic sensors (4 total) ()
The ultrasonic sensors are placed at the 12, 3, 6, and 9 o’clock positions when viewed from above.
These are used to measure the distance from walls and other objects.
They are connected to digital I/O pins and are checked using timer interrupts.
If the ball is not detected, the robot uses the ultrasonic sensors to move toward the center of the field.",N/A,N/A,,,"We use 16 line sensors placed around the bottom edge of the robot.
Each sensor checks whether it sees the white boundary line.

If a sensor detects the line, it gives us a direction using its fixed position.
We use a function called LSDir(i) that returns the angle of sensor i.
When multiple sensors are triggered, we calculate the average direction as a vector sum.

In real matches, this dynamic line escape algorithm achieved a success rate of approximately 98%, making it one of the most reliable parts of our system.","https://drive.google.com/open?id=1g4dLaP_XqsYVbY0NKmLSMUYQSBtI9NAI, https://drive.google.com/open?id=1NuWzwC7k_-PhZgQ1RFt38rkgdHwphVgI, https://drive.google.com/open?id=1_qYhattHPa73hTjo3w8Ru7JqpG69qrrc, https://drive.google.com/open?id=1YQiia92PvA8y9coJFru6pDMOZ8_hEjMQ, https://drive.google.com/open?id=1vg3Edj1_uKohxXIt59Cp52N2SHXchAUC","Our robot uses 3 DC motors with omni-wheels for full-direction movement.
Each motor is controlled through a driver, which is connected to the ATmega2560 processor.
The processor sends signals to the motor drivers to control speed and direction.

We use a function called dir_move() to move the robot in 12 possible directions.
This function works together with the BNO055 compass sensor, so the robot can move in the correct direction based on its heading.
For example, when the opponent’s goal is at 180°, the robot can move forward, backward, or sideways relative to that direction.","We use 12 IR ball sensors placed around the robot in a circle, every 30 degrees.
These sensors detect the infrared signal from the ball.

The processor reads the values from each sensor and stores them in an array.
We take the average of the last four readings for each sensor to make the result more stable.
Then we find the sensor with the highest value, and use that to decide the ball direction.

The software uses two key variables:

ball_dir: the direction of the ball (0 to 11, like a clock)

max_ir: the strongest sensor value

Using these values, our program decides how the robot should move or defend.
We do not use a camera for ball detection.","Our robot uses 12 IR sensors to detect the direction of the ball.
The sensor with the strongest signal is stored as ball_dir, and the robot moves toward that direction using the dir_move() function.

If the ball is very close (for example, the front ultrasonic sensor detects a distance under 7 cm), the robot increases its speed to go straight and catch the ball quickly.
This allows the robot to react fast and approach the ball without needing a mechanical dribbler.

We have two different roles: offense and defense.
Each robot uses a different function in the code: ATTACK() for the offensive robot and DEFENCE() for the defensive robot.

The offense robot moves quickly and aggressively toward the ball when it is detected.

The defense robot stays near the goal and moves more carefully, only going to the ball when it is close enough.

If the ball is not detected, the robot uses ultrasonic sensors to move back to the center of the field and search again.","Our robot uses 16 line sensors arranged around the bottom edge of the robot.
Each sensor checks for a white boundary line by comparing its value to a specific threshold.

If a sensor sees the line, we use a function LSDir(i) to get its direction (in degrees).
We then calculate the average vector direction of all sensors that see the line.
This tells us the best direction to escape.

Here is how the algorithm works:

Each sensor compares its value with a set threshold (lineThr[i]).

If the value is high, that means the sensor sees the white line.

For each active sensor, we calculate a direction vector using its angle.

All vectors are added to find an average escape direction.

The robot moves in that direction to return to the safe area.

This dynamic system helps the robot escape even when only a few sensors are triggered.
It is very reliable, with a success rate of over 98%.","Our robot does not have a kicker or a dribbler.
Instead, we focus on software-based control using sensors to score goals effectively.

We detect the ball using 12 IR sensors, and move toward it using dir_move() based on the ball_dir value.
When the ball is close, the robot checks the goal direction using the Pixy2 camera.
The camera gives us data like the position and angle of the opponent’s goal (FoundBlock[2] or [3]).

Using the BNO055 compass, the robot turns to face the goal.
Then, it moves forward and pushes the ball into the goal with its body.

All scoring is done through precise movement and sensor fusion—without any mechanical shooter.
This allows us to keep the robot simple and reliable, while using all our hardware and software resources to improve accuracy and performance.","Our robot uses a defense algorithm to protect our goal.

We use 12 IR sensors to detect the ball direction (ball_dir).
If the ball is coming toward our goal, the robot moves to block it.
When the ball is close enough, the robot moves forward to intercept.
Otherwise, it stays near the goal and waits.

We also use the Pixy2 camera to check the goal position.
This helps the robot stay near our own goal and avoid mistakes.
With the BNO055 compass sensor, the robot always knows which way it is facing.
This allows us to move in the correct direction based on the goal’s location.

To avoid going behind the goal line, we use 16 line sensors on the bottom.
If a line is detected, the robot quickly escapes in the safe direction using a vector-based line escape algorithm.

All of this allows our robot to defend the goal with both smart positioning and fast reactions.","Unfortunately, our robots do not communicate with each other.

Each robot runs its own program independently, based on sensor inputs and internal algorithms.
We focus on making each robot smart and reliable using data from IR sensors, the compass, and the Pixy2 camera.

Even without communication, our robots can track the ball, stay in position, and defend or attack effectively.
We plan to add communication in the future to improve teamwork.","One algorithm we are particularly proud of is how we detect whether the ball is truly in front of the robot, especially in noisy sensor conditions. Normally, we use the max_ir value, which indicates the strongest signal from our 12-direction IR ball sensors. However, we noticed that when the ball is far away or not clearly in view, max_ir sometimes hovers around 2 or 3 — this caused many false positives.

To solve this, we implemented a logic that tracks how long max_ir stays at a low value (≤ 2). If it stays that way for more than a specific count (e.g., 20 cycles), we consider the ball not detected. This prevents the robot from chasing empty space when the ball is not clearly seen.

This helped us significantly reduce unnecessary movements and allowed our offensive and defensive strategies to rely on more stable input. We handled this entirely in software without additional hardware resources, allowing us to optimize limited memory and processing power.

```c
int cntMaxIr2 = 0;

bool isBallDetected()
{
  if (max_ir <= 2) {
    cntMaxIr2++;
  } else {
    cntMaxIr2 = 0;
  }

  if (max_ir <= 2 && cntMaxIr2 >= 20) {
    return false;
  }

  return true;
}
```","We do not have a public GitHub repository at the moment.

Instead, we share our main code files—especially Common.h—directly within our team and update them regularly.
We chose to focus our time and resources on developing and optimizing the core algorithms rather than managing an online repository.

If needed, we are happy to provide our code (such as Common.h) during the competition for code review or inspection.

",https://drive.google.com/open?id=1LKAqiMva0VW_JPOBrQWZHnlMccqCMD2D,"1,000,000 WON = 726.88$",100% parents ,6,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",maison102938@gmail.com,,
7/12/2025 2:40:31,TPA-iPES,Open League,Bangkok Thailand,"guythepnok@gmail.com
owojui@gmail.com
sudduensirapop@gmail.com",N/A,https://drive.google.com/open?id=16eBKhohspV0Ls8HksEA7TdHnV9Pz1-Uf,"Nikanti (jui) : PCB outline design, Whole robot structure design, Robot assembly

Watcharapong (Guy) : hyperbolic Mirror Design, Vision System Software, Main Object Detection Software.

Sirapop (Guy) : PCB schematic design, movement system software, Ball chase concept design, Robot main controller software.", 6 to 15 hours a week,"At school workshop, team member home",1 january 2024,World robocup 2025: Soccer open league Brazil.,"Our mentor helped us secure sponsorships, arrange flights, and manage posters and advisers for the structural design.","We use Microsoft Teams to keep track of each member's work progress, with separate channels dedicated to specific systems such as the vision system, movement system, hardware design, and more. Each member regularly posts pictures, code, files, and brief explanations of their work. For day-to-day communication, we primarily use LINE.","ChatGPT helped us significantly, especially as the deadline approached. It assisted with repetitive coding tasks, such as setting up data buffers for sensor readings—particularly when data formats were hard to find and there is not much time left. It also supported us in writing English sentences.",https://drive.google.com/open?id=1FdhokfNZBNrxThB0UswXXpm_cdIXpwjD,https://drive.google.com/open?id=1Y4p1OlJKA8gOJCb54vqtYVH4379tU_RN,https://drive.google.com/open?id=1XjNYfBIUdFagtIIZocM4xvfcNheoRJrv,https://drive.google.com/open?id=1PpBA6CTEd8McEqnPcHAu5dBipOT_kV0W,https://drive.google.com/open?id=1DRmx869tG5Gqb0VHfM1CnOjcQW152Qp3,https://drive.google.com/open?id=10YTpwFoGRSncE98tL7UYrw0K7TWwarb9,https://drive.google.com/open?id=1Vn7zNw4RLWw5oCeAO3-Pe_rW85_-0mx6,N/A,https://drive.google.com/open?id=19lBgD4U03_MUJCm_48o3JKIXLkXMTYHV,https://drive.google.com/open?id=1ubHqK85_sYbwCW0Uou1SyFesTg1pMLiJ,https://drive.google.com/open?id=1y-zNhtMI6Ip4dRHekErYCjPsd2r_oMRf,https://drive.google.com/open?id=1OK2zMoB_-dyKLT7MkYSYPdUvui-abUPG,https://drive.google.com/open?id=18yd0G0jRjO7Kt0-ZzUc7ot3GeKvSfo9F,https://drive.google.com/open?id=1Il7XsLyveR2HWDWdfBYjXNJl8mfGBtGX,https://drive.google.com/open?id=1ELhFzpLKsY3LTyDv3dQTQL01AM6McMhu,"We designed the robot’s parts using 3D design software, choosing Onshape as our main tool. Our core design concept focused on simplicity to support efficient development and manufacturing. We considered factors such as practical usability, strength, and component reliability. To improve the design, we plan to replace some 3D-printed parts with metal components for greater strength and durability. Additionally, we aim to remove the rear solenoid kicker and dribbler units, replacing them with a Y-axis odometry encoder.","We used a Bambulap A1 3D printer to build the robot’s structure. For shaping the hyperbola glass and acrylic tubes, we used a machining service from a workshop we know. For the camera mounting parts, we used a laser cutting service at a local shop near our residence. We also used JLCPCB services to manufacture the robot’s circuit boards. The design change we had to make was in the battery placement. Because the actual battery was larger and harder to fit than in the original design, we had to adjust the battery’s position accordingly","Our robot has six motors. Two of them are brushed motors used for the dribbler, while the remaining four also brushed motor are used for omniwheel holonomic movement in a cross-positioning pattern. We use four wheels to maximize traction and reduce slippage when the robot is being pushed.","Our robot's kicker uses a solenoid, driven by a basic switching circuit. We use a MOSFET in series with the solenoid, along with another MOSFET to control the 5V signal with our controller signal logic to the gate of the main switching MOSFET. The solenoid we bought from the market ","We aligned the dribbler parallel to the motor to save space and simplify power transmission. The frame, gears, and spinning shaft were 3D-printed, with the shaft designed for better silicone adhesion and strength under load. Initially, we tried a brushless motor but switched to a brushed one due to better torque performance.",https://github.com/GUYEMBED/RobocupjuniorSoccerOpen_Robot-Structure,"We're most proud of integrating the XY odometry encoder, designed for precise speed and position tracking, slip avoidance, and LiDAR fusion. However, due to time constraints and an unsuitable sensor, it remains non-functional, with only the hardware completed. Despite this, we see strong future potential.

We're also proud of the robot's one-piece main body, which supports the entire structure.","https://drive.google.com/open?id=1QnP4Bx3kYpdfQRJSc7DLsItF4PKdgEh-, https://drive.google.com/open?id=1D7jDDS73Mb44FhExTmxySj8fgWoxKIw5, https://drive.google.com/open?id=1Xg_SCG-OE5rvQDGw9ODq8Mww-aQ0EV74, https://drive.google.com/open?id=1HSFJHPG3g1PlTKlQs0R0fC_9tENFl_Do, https://drive.google.com/open?id=1Zb-4qxrH62b_CFAuj_U9B1etrz0OyYNc",https://drive.google.com/open?id=1Wu9g-vDKbbinESeBWHXxkMB4NkOV-ctt,"Our robot uses two separate battery systems: one for the main electronics and another dedicated to the solenoid.

For the main system, we use a 3-cell LiPo battery (approximately 11.1V), which powers everything except the solenoid. A switching buck converter step down from 11.1V to 5V for components like the LiDAR. Then, a linear regulator further reduces the 5V to 3.3V for the microcontroller and sensors.

For the solenoid system, we use two 3-cell LiPo batteries connected in series, providing around 22.2V to drive the solenoid.","Our motor control circuit is based on an H-bridge design, allowing us to control both the direction and speed of the motors using PWM signals. Initially, we attempted to design our own H-bridge motor driver PCB using MOSFETs, but due to technical issues, it did not function as intended. As a result, we decided to use a breakout board with a VNH motor driver chip for reliability and ease of integration.","We use the STM32F411CEU6 microcontroller, commonly known as the 'STM32 Blackpill' board. We chose this chip as an alternative to our originally intended STM32F446RET6. Initially, we designed a custom PCB for the STM32F446RET6, but it not working as expected so we considered using a breakout board like the STM32F446 Nucleo at first but it was too large for our robot.

So we switched to the STM32F411CEU6 Blackpill because it is smaller, has decent specifications, and allows us to continue using STM32 microcontrollers. This supports our goal of transitioning from the Arduino IDE to studying and programming with STM32CubeIDE. ","We use the OpenMV module's blob detection to locate the ball, starting with strict LAB color thresholds and a relaxed pixel threshold to reduce false positives while capturing strong color matches. Detected blobs are then rechecked in smaller regions with relaxed LAB thresholds for better centroid accuracy. Each is evaluated for shape and pixel distribution, and scored based on size and roundness for distance estimation.",N/A,"We use LiDAR to help locate our robot’s position on the field, but we can't make it reliable so we decided to not use it. For measuring angular data such as angular velocity and heading, our robot uses an IMU sensor the BNO055 in sensor fusion mode.","Our robot's kicker uses a solenoid triggered by a simple switching circuit. A MOSFET controls the solenoid, with a second MOSFET used to boost the 5V control signal, as the main MOSFET requires a higher gate voltage than the microcontroller provides. The solenoid was sourced from the market.","Our dribbler uses a MOSFET connected in series with the brushed motor, similar to the solenoid circuit but with a different MOSFET. We control the motor in only one direction.","https://drive.google.com/open?id=1Gw2lBMA_vrgvRW6q58ZFEzXM7lr6gjQ0, https://drive.google.com/open?id=1J1699mTRPhPiW8Ytg5zxpC3wSYCvhXA5","https://drive.google.com/open?id=1A_w3CFiNh3kiKc04ALEgWWuCrBIbBLKr, https://drive.google.com/open?id=1evrLtzoZI1gqmVZZ9mL24XbZvTxRfeVv, https://drive.google.com/open?id=1O0wtskCKCyFJFS8QbxJ9u6PuHGas8fpG, https://drive.google.com/open?id=1Fo2tRLQBIhteafcsFqSVcwWgEv8noQsx","The Bottom Board PCB, which controls the solenoid, dribbler, and power regulation, is our most successful and actively used component. It’s especially meaningful as we fully applied classroom knowledge, including MOSFETs and linear regulators.

We failed the design four times, solving issues like faulty connectors, thin traces unable to handle solenoid current, floating MOSFET gates, and regulator overheating. After two failed attempts with larger linear regulators, we switched to a buck converter.

We're also proud of our custom H-bridge motor driver PCB, even though it didn’t work and isn't used.","https://drive.google.com/open?id=1tpPCCuLHlJVkRCFpJ0vxaluigs31ZHKN, https://drive.google.com/open?id=1Nn24W0QdJ5g1UZiwFagkf2UxGh9yTpPL, https://drive.google.com/open?id=11N3upUqTpP-gma-nh59sqG-5SauIpWx7","Each of our motors is equipped with an incremental encoder for speed measurement. We use this data as feedback to control the motor's RPM using a PID controller. To process the encoder signals, we use interrupts to detect rising edges and measure the time between them, which allows calculate the motor speed.","We read the image data from the camera and apply the blob detection algorithm, which gives us the centroid of the ball-colored pixels in the image. To find the ball’s actual distance, we calculate the Euclidean distance between the mirror center in the image and the blob’s centroid. This pixel distance is then passed into a conversion function, which gives the real-world distance from the robot. The conversion function is based on polynomial regression using experimental data that maps pixel distances to real distances. This method works well because the angle of the ball in the image closely matches its real angle, so we can accurately estimate the ball’s (x, y) position relative to the robot.","Our ball-chasing strategy focuses on two key factors: effective speed and movement angle. We use separate PID controllers for the X and Y axes, combining their outputs into a speed vector.

To ensure optimal approach, we compare this vector to the ideal straight-line angle toward the ball control position. If it's outside a set threshold, we adjust the Y-axis speed to correct the direction. If it's within range, we keep the original output to maintain maximum speed.","We use OpenMV image processing to keep the robot within field boundaries. Lens correction is applied first to reduce distortion from the lens and mirror.

The system detects clusters of white pixels aligned with the field lines in four perpendicular directions, indicating areas to avoid. Using IMU data, we determine the robot’s orientation to predict where these lines should appear in the image.

Blob detection is then applied to small regions around those predicted areas. If enough blobs are found, a boundary line is detected in that direction.","Our strategy is to use the dribbler to gain control of the ball, allowing the robot to maintain possession even while rotating. Once the ball is secured, the robot moves translationally toward the goal while simultaneously rotating to face it. When the robot’s heading aligns with the goal within a specific threshold, the solenoid is activated to shoot.",Our robot's defender strategy is to move along the goal boundary while continuously facing the ball along the X-axis.,N/A,"Our vision system, which we're most proud of, uses blob detection for both ball and line detection.

Ball detection is a two-stage process: first, we scan the image for strong orange regions, then refine the search around detected blobs using relaxed color thresholds to improve accuracy and distance estimation.

For line detection, we apply blob detection in targeted areas based on expected field line directions and the robot’s orientation. This method outperforms Hough Transform by reducing false positives through color filtering and being more efficient.","https://github.com/GUYEMBED/RobocupjuniorSoccerOpen_Vision-Software/tree/main
https://github.com/GUYEMBED/RobocupjuniorSoccerOpen_Control-Software",https://drive.google.com/open?id=1fPMjahI69jXp7Ow4M2mZ6NGB6wdfY4Kz,"
Robots (cost of components that are in the robot per unit): 16,983.8 THB ≈ 519.63 USD

Experiments (failed builds, broken hardware, etc.): 14,677.3 THB ≈ 449.01 USD

Environment (field, balls, etc.): 3,000 THB ≈ 91.80 USD

Exchange rate: 1 THB = 0.03060 USD
 ","80% school
10% sponsors 
10% parents",1,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",sudduensirapop@gmail.com,,
7/12/2025 2:41:52,EMM-Soccer,Open League,Macau China ,lipeihua28@gmail.com,"Youtube :
https://youtube.com/@emm-soccer?si=GBicoOLAiv58Jqp0

Bilibili (China):
https://b23.tv/xCx6kpP",https://drive.google.com/open?id=1XH0fghb3ZO6iTChMKrJ2JWC32Q_OaX1T,"LEI PUI WA:Programming/Hardware
YE CHON KIT:Programming
SIT YONG:Hardware/Eletricity
LAU SING:Circuit and PCB design","Our team holds meetings once a week to once every two weeks, each lasting about an hour. For competition preparation, we train during the free time on school days and holidays.",In the school's robotics room. It's actually an attic in our school.,"We started the R & D around August last summer vacation. By October, it could basically be put into formal use. In mid - April this year, we developed the second - generation robot, and we replaced the camera.","The following data commence from the current team members and do not include those of previous senior members:

China Open 2023: Lightweight League 
RoboCup2023-France: Lightweight League

China Open 2024: Open League 
RoboCup2024-Holland: Open League

JapanOpen 2025: Open League
China Open 2025: Open League
","We decided to use radar for positioning. So we first tested whether we could successfully obtain radar data with the controller. However, we encountered a problem when reading radar data from the ESP32. The code seemed correct, but we couldn't find the issue for a long time. Later, our tutor finally helped us identify the problem and successfully read the radar data from the ESP32, which was a very important step for our robot.","For daily communication, we mainly use WeChat and WeChat groups. WeCom is our primary tool for task assignment and work management, although most of our work arrangements are made through in - person meetings. Program codes, design drawings, and other materials are shared via the internal network drive of our school's interest class.","Artificial intelligence tools played a vital role in all aspects of our project. I used Doubao (China)'s AI voice recognition function when creating poster content for the competition, sharing copywriting, and writing development logs. Just speak my thoughts, and it can accurately and on-topic transcribe my words into text, providing me with a convenient and efficient way to record and organize my thoughts.",https://drive.google.com/open?id=1yFv6zy_1Bn3oMb2ZBht6INfifXaa_Blg,https://drive.google.com/open?id=1g8pfXxGI2rXNZhat8ZBpLANJm3jsvMSO,https://drive.google.com/open?id=1H4Ddh-MffjWOA9o-Mii3DXRXvFenVHaG,https://drive.google.com/open?id=17APSQuYPi_Xcp6cNKB9wKlN-c18a8gmx,https://drive.google.com/open?id=1VK1NngUDzaFbYeB5CT0aubhGAJXxxfVx,https://drive.google.com/open?id=1qN8sfgoYG4RgnOD67GdQg2sIvXs_4ur6,https://drive.google.com/open?id=17F_7jN2XYJdiJzsWe5fessVFMSsggEs8,"Model: RPLIDAR A2M6

These coordinates have a wide range of applications, include:

1.Out of bonds
Purpose: Get as close to the ball as possible when it is outside the white line (perhaps get the ball)
Since our robot is not equipped with a line sensor, we rely entirely on LiDAR data to prevent the robot from going out of bounds.

2. Reset when there is no ball
Purpose: Get the best view when the ball disappears

For reset when there is no ball, we set a target reset point (such as the center of the court). Then, through trigonometric calculations, we determine the angle and distance between the robot and the target point so that the robot can accurately reset to the target point.

3. Get the ball to attack

The functions listed above will be elaborated on in the relevant questions below.",https://drive.google.com/open?id=1rURBJjoYwIHAiloXNOleg1hnZ5AzIjRh,https://drive.google.com/open?id=19PghACpQj-Ctwl5mF7s6iTenwMwmBINC,https://drive.google.com/open?id=1MX7E0AFsCfRhPBYQu0ZUWGZ3ytaQEpsm,https://drive.google.com/open?id=10dqRz_ix4DLxlr5WCX6PwENEwp4iDgFM,https://drive.google.com/open?id=1K6h22_sINfASw1MF1xngsnjyIChRESLj,https://drive.google.com/open?id=188j2PHcJ0wcAzsjqCVdmQCl9Byr-igVz,https://drive.google.com/open?id=1La-yR8wr-LvXCsP41G_PK8WzpVIaQKed,"We used SolidWorks to design the robot's mechanical parts.  We used the ""four cameras + lidar"" solution this year. The mechanical structure was customized to integrate these sensors, while the chassis retained the 90-degree four-wheel drive layout.

During the design process, we balanced structural strength, weight, space, and cost. The robot body uses materials such as  PETG , Petg-cf.

We believe that future components should be modular. This will simplify component replacement, thereby improving the practicality of the robot.","We primarily use the Bambu Lab X1C 3D printer to manufacture most of the components of the robot. 

For some components, we rely on external companies for manufacturing services. Our printed circuit boards (PCBs) are manufactured by JLCPCB, a well-known and reliable service provider in the industry. 

In addition, the gears and skeleton structure of the ball mechanism are produced by an external company through metal 3D printing. 

During the construction process, we encountered some challenges that required adjustments to the design. For the ball structure, a micro switch and a lift height limit plate are installed above it. However, the installation height of the limit plate usually needs to be adjusted according to the actual assembly situation. This is critical to ensure that the ball structure exerts appropriate downward pressure. ","We used four motors to drive the omnidirectional wheels of our robot, chosen for the following key reasons:
1. Enhanced Power and Stability
- Four motors provide greater combined torque, enabling the robot to maintain stable movement during collisions with opponents.

Wheel Design and Fabrication
- Design Approach
We designed the wheels using SolidWorks and adopted a traditional omnidirectional wheel structure to achieve smooth multi-directional movement. Each omnidirectional wheel consists of 15 small roller assemblies uniformly distributed around the main wheel hub.

- Connection Method to Motor Shafts
The wheels are connected to the motor shafts via a shaft-hole and set screw fastening method—aligning the holes on the wheel and motor shaft, then securing them with vertical screws. This ensures a rigid, adjustable, and easy-to-assemble connection.

List of drive system components:
1. Drive motor
-Model: RoboMaster M2006
- Quantity: 4
2. Omnidirectional wheel:
- Quantity: 4
-3D file has been placed on GitHub
- Main wheel: petg
- Tire: rubber
- Small wheel housing, shaft: steel
3. Connecting parts
- Set screw (M3*16): 1
- Others (M2*12): 8","Our robot's kicker adopts an electromagnet instead of a mechanical structure, mainly because the electromagnet offers fast response speed, has low requirements for mechanical structures, is not prone to wear, and features strong stability. For example, pneumatic kickers will reduce their power as the air pressure decays. Moreover, the electromagnet does not take up much space, so we finally decided to use it. We designed the electromagnet on the chassis.
 
First, the power source of the kicker is entirely from the electromagnet. We set up a fixed base for it, which is clamped by two fixing parts of the electromagnet and locked with screws. Then we designed a kicking plate, which is connected to the threads on the electromagnet with nuts, so that the force of the electromagnet can be evenly transmitted to the kicking plate.","We use SolidWorks to design the ball-playing structure. First, select the motor to be used, import the motor model and the ball model into the assembly, then preliminarily design a roller according to the position of the ball, determine the center distance between the roller and the motor shaft, and then combine the target reduction ratio, select 0.5 modulus and 20 degree pressure angle, use the gear transmission formula to calculate the number of gear teeth, and generate the gear model.

Then start to design the skeleton of the ball-playing structure. First generate the basic block, according to the position of the motor, roller, gear and other parts that have been determined, draw a sketch on the block, use the stretch cut, rotation cut and other functions to gradually turn the block into the skeleton of the ball-playing device, and then refine the structure. 

Finally, move the ball to the specified ball-eating depth, let the roller of the ball-playing device just tangent to the ball, then design a height-limiting board, tangent to the top of the ball-playing device, and determine the appropriate height limit. In this way, the preliminary design of the ball-playing structure is completed.",https://github.com/leiemm/emm2025/tree/main/CAD%20drawing/3Ddrawing(robot),"In the design of robotic mechanical systems, our proudest innovation is the reverse hub-motor embedding design, which stems  from breaking through dimensional constraints.
 
I. Design Background and Problem Analysis
After finalizing the motor and kicker components, the wheel design faced a critical challenge: the motor we selected has a long shaft with an outer-biased fixing position. If this conventional scheme were followed, it would cause dimensional overrun.
 
II. Innovative Design Solution
To overcome the above bottleneck, we proposed the design of a reverse-fixed wheel hub:
 
- Structural inversion: Shift the wheel's fastening position from the inner side to the outer side, moving the wheel inward toward the motor;
- Installation innovation: Design a special wheel hub so that its fixing interface with the motor is located on the outer side. In this way, the ""semicircle beyond the chord"" space wasted in the traditional design is efficiently utilized.
 
III. Core Advantages and Technical Value
- Extreme space utilization: Eliminates the space redundancy in traditional designs, ensuring that the overall profile of the wheel after installation fully conforms to the circular dimension constraints.","https://drive.google.com/open?id=1JOFBtOgAqzKf2JqzCqCJTnaaq5kkbEMY, https://drive.google.com/open?id=1X1cHJO0J_VAtLcyJEbJKD3MrTyf7uUjy, https://drive.google.com/open?id=1uZzTAKoOu288yXmAGCNzWyA5sopIqh4h, https://drive.google.com/open?id=1WFcnjbouBfDraicpFPVjGp_8TPAyyIuk, https://drive.google.com/open?id=1MRmcWCE4DE97s--Z8bMF31bxIrkMZeRI",https://drive.google.com/open?id=1KuCFwY3M5Hm31tDlMOvWLMfNrNsuVum6,"Our robot has a 22.2V (6S) battery pack, which is first divided into three paths. One path is regulated to 12V to drive the ball motor; the second path directly supplies 22.2V to the four motors and electromagnets on the chassis; the third path is stepped down to 5V to drive our main control board (esp32), and 5V/3.3V voltage is directly provided from esp32 to various modules (motor driver, various cameras, touch control, NeoPixel...).","In terms of hardware connection and motor driving, our system is structured as follows:
 
1. Power Supply: A 22.2V battery pack serves as the power source, directly supplying electricity to the entire driving circuit.

2. Motor - ESC Connection: We utilize four RoboMaster M2006 motors, each paired with a RoboMaster C610 Electronic Speed Controller (ESC). The motors are first connected to the C610 ESCs, and then the cables from the ESCs are combined and linked to the CAN - bus power supply.

3. Communication Interface: The C610 ESCs and motors are connected to an MCP2515 CAN bus module through a four - in - one CAN bus via two CAN buses. The MCP2515 module acts as a communication bridge, interfacing with the sub - controller (ESP32) through an SPI interface. The SPI interface includes pins such as SCK (Clock), MOSI (Master Out Slave In), MISO (Master In Slave Out), and CS (Chip Select).
 
This physical connection setup constitutes a complete hardware circuit for motor driving, enabling the transmission of both power and control signals from the battery and the sub - controller to the motors.","Our robot is equipped with two ESP32 microcontrollers that serve as the core processing units. The selection of ESP32 is based on multiple advantages: it boasts an abundance of ports and supports diverse communication protocols, ensuring seamless integration with various components. Moreover, it stands out for its cost - effectiveness compared to many other controllers. The built - in Bluetooth module is a significant plus, allowing for communication between different parts of the robot without the need for additional external communication modules.
 
The two ESP32s have distinct functions. The ESP32 on the main board is mainly tasked with executing the core logic of the competition program, as well as driving the kicker and ball dribbler. The ESP32 on the sub - board, meanwhile, is responsible for handling data from a multitude of other modules.
 
The sub - board is connected to an MCP2515 module, which controls the motors via the CAN bus. It also interfaces with a gyroscope, four MaxCam Speed cameras, and a lidar. The sub - board processes sensor data and manages motor operation. Information like the gyroscope's angle, coordinates from the lidar, and data regarding the ball (including its angle and distance) are transmitted to the main board through serial communication. In response, the main board sends movement commands to the sub - board, which uses these instructions to drive the motors.

 ","Our robot is equipped with four MaixCam cameras, each fitted with a fisheye lens, providing comprehensive 360 - degree field - of - view coverage. Positioned at the front, rear, left, and right, these cameras each monitor a 90 - degree range to detect the ball.
 
To identify the ball within the captured images, we employ a hybrid detection approach that combines the YOLO model with threshold - based detection. First, we train a customized lightweight YOLO model using a dataset of real - world images captured by the on - board cameras, which are carefully annotated to mark the ball's position. This enables reliable ball detection across various lighting conditions, shadows, and background distractions.
 
Simultaneously, we conduct image segmentation and color - space conversion (such as from RGB to HSV) on match - scenario images to fine - tune and identify the optimal color threshold values specific to the ball, allowing for precise isolation from the background. When properly calibrated, threshold - based detection can achieve longer - range detection compared to the YOLO model, though it is more sensitive to environmental variations.
 
Our system prioritizes the YOLO model for ball detection. In cases where the YOLO model fails to detect the ball, the threshold - based method is automatically activated. If neither the YOLO model nor the threshold - based detection can identify the ball, it indicates that the ball is truly beyond the system's detection capabilities under the current circumstances.","There is no circuit board for line detection on our robot. The line detection mechanism of our robot represents a unique innovation because it can operate without any traditional line detection circuit (grayscale board, etc.).
Instead, we rely solely on the distance data transmitted by the LiDAR sensor to determine the position of the robot relative to the white line of the field, which is crucial for our ""Out Of Bound' algorithm. The high-precision coordinates provided by the LiDAR sensor allow us to omit additional components such as grayscale sensors that are usually used for line detection.

Essentially, we do not detect the white line, our restricted area line detection system is a coordinate-based monitoring system. By utilizing the data from the LiDAR , we can accurately determine when the robot is close to the restricted area line and take corrective measures immediately.","For navigation, we mainly use the RPLIDAR A2M6 lidar for coordinates and the HWT 101 gyroscope for direction detection. Both sensors are connected to the sub - controller via serial port communication. The robot's facing direction is adjusted based on competition strategies, with the gyroscope's attitude feedback as the basis.","The kicker system's operational details are as follows:
 
1.  22.2V input is boosted to 46V by a converter, charging a 10,000μF electrolytic capacitor that stays perpetually charged.
2. A relay (normally open) acts as the circuit switch. When the ESP32 motherboard sends a trigger signal, the relay closes, allowing the 46V/10,000μF capacitor to discharge into the electromagnet.
3. Discharge-Recharge Cycle:
- Capacitor energy powers the electromagnet for the kick. The ESP32 controls relay timing via system clocks, opening the relay post-discharge.
","The dribbler circuit mainly consists of a brushless motor, its corresponding ESC (Electronic Speed Controller), and an ESP32 motherboard. The ESP32 sends PWM signals to the ESC, which then controls the brushless motor's rotation, enabling precise ball handling.",https://drive.google.com/open?id=1F1m2jZTvG3nQepa60Zm44qrahmKXJVUJ,"https://drive.google.com/open?id=1vewKiOHDC2BXkXlYgZRtft13sXl4FgbX, https://drive.google.com/open?id=1otzte9Q8vSIuGRchXRWX_xp8vkBmqHn1, https://drive.google.com/open?id=1rl9SkxflVdAmU8Peg_F64pipyi_UgOl3, https://drive.google.com/open?id=1Mm7ZanaBCIUiRBIh5UlWfQZF42iFsuWp","The electronic product we take the greatest pride in this year is our radar technology. With its 360-degree data collection ability, it can accurately detect information from any direction, regardless of the robot's posture. This has allowed us to develop new offensive strategies and execute maneuvers that were previously impossible, like scoring while facing away from the goal and implementing outward-facing defenses. The radar has also enabled us to innovate in many areas. On the Super Team field, it helps our robots pinpoint their exact positions, giving us a significant edge.","https://drive.google.com/open?id=1Z6m61skSO5JXQLA6zGIlA3fI-TonA17m, https://drive.google.com/open?id=197lOMA_MW3bThp--ujprHVesqHEEdwWJ, https://drive.google.com/open?id=1RsCg9LnpZDlsAx-8vPUVC6cZjKWXxPKr, https://drive.google.com/open?id=1T52rA86Rw3saHouwtQD0FSUIWVldJ8u0","The process of using the processor to drive the motors is as follows:
 
1. Instruction Reception and Transmission: The main controller, based on the action requirements of the robot during the soccer match , sends three key parameters—speed, direction, and angular velocity—to the sub - controller (ESP32) via serial communication.
2. Kinematic Calculation: Once received, the sub - controller (ESP32) inputs these three parameters into the in - house developed kinematic equations. Through these equations, it calculates the corresponding rotation speeds and directions required for each of the four motors.
3. Protocol Conversion and Signal Transmission: After obtaining the calculated motor control parameters, the sub - controller packages these data into data frames following the CAN protocol. Then, it communicates with the MCP2515 CAN bus module through the SPI interface. 
4. Motor Control: The C610 ESCs, which support CAN - bus communication, parse the received CAN - bus signals. Based on the signal instructions, they generate corresponding control signals to precisely adjust the rotation speeds and directions of the M2006 motors, thus enabling the robot to perform various actions as required in the soccer match.","Multi-Camera Ball Tracking System Calculation and Data Flow  

(1).System Layout & Viewing Angles
- Cam1 (Front): Covers 315° to 45° zone  
- Cam 2 (Right): Covers 45° to 135° zone  
- Cam3 (Back): Covers 135° to 225° zone  
- Cam4 (Left): Covers 225° to 315° zone  
- 15° overlap between adjacent cameras for seamless coverage  

(2).Data Collection & Transmission
1. Hierarchical data flow:  
   - Cam 4 → Sends data to Cam3  
   - Cam 3 → Sends self + Cam 4 data to Cam 2  
   - Cam 2 → Sends self + Cam 3 data to Cam 1  
   - Cam1 → Receives self + all downstream data  

(3). Data content per camera:  
   - Ball center coordinates: Horizontal = x + width/2, Vertical = y + height/2  
   - Ball dimensions (width w, height h)  
   - Transmission rate: 100Hz (updated every 10ms)  


(4). Angle calculation (FC):  
   - Local angle: (Horizontal position - 224) / 224 × 45°  
   - Global conversion:  
     * Cam 1: Use local angle directly  
     * Cam 2: Local angle + 90°  
     * Cam 3: Local angle + 180°  
     * Cam 4: Local angle + 270°  
   - Negative angle handling: Add 360° if result < 0  

(5). Distance calculation (F):  
   - Base distance = Vertical position / 6.24  
   - Camera-specific calibration:  
     * Cam 1: Base distance - shift1  
     * Cam 2: Base distance - shift2  
     * Cam 3: Base distance - shift3  
     * Cam 4: Base distance - shift4  
   - Validation: Output 1 if ≤0, 0 if no ball detected  

(6). Data fusion logic:  
   - Key metric: Absolute value of local angle (center offset)  
   - Priority: Select camera with smallest offset  
 

(7)Output to ESP32
1. Transmission protocol:  
   - Camera 1 sends processed data directly via UART  

(8). Coordinate system:  
   - Angle reference: 0° = front, clockwise positive  
   - Distance: Relative value (higher = farther)  
","Ball - handling and Defensive Algorithms for Robots
 
Our attacking robots' ball - handling algorithm is centered around two key variables: the angle (fc) and the distance (f) of the ball relative to the robot, where 0 degrees represents the direction directly in front of the robot, and the angle increases clockwise. When an attacking robot is far from the ball, it moves straight towards it. As it approaches, instead of a direct path, it follows a direction approximately tangent to the ball, determined by a formula considering both the ball's angle and distance. Once the ball is within approximately ±10 - 15 degrees of the robot's front, it moves directly towards the ball to catch it.
 
Defensive robots operate differently. They also rely on the ball's angle and distance but additionally use radar to calculate the angle and distance between themselves and the goal. Typically, defensive robots move along the vicinity of the penalty area line. When the angle between the defensive robot and the ball aligns with the angle between the robot and the goal, meaning the robot is positioned on the path from the ball to the center of the goal, it is considered to have successfully defended and stops moving. However, if the ball remains stationary for an extended period, the defensive robot will switch to an offensive - like strategy. It will approach the ball following the above - mentioned logic, push the ball towards the goal, turn towards the goal, and attempt a shot to clear the potential threat.","Anti-Out-of-Bounds (OOB) Algorithm
 
Our robots do not rely on line sensors for boundary detection. To ensure they stay within the field, we use a strategy based on radar-measured distance data combined with a velocity decomposition algorithm. Here’s the oriented approach to bounds (Boundary Orientation and Unidirectional Navigation via Decomposition Strategy):
 
Core Mechanism: Oriented Boundary Management
 
1. Radar Oriented-Scanning
The laser radar continuously scans in a directional pattern to detect the robot’s distance and orientation relative to field boundaries (sidelines and penalty area lines), establishing a real-time coordinate system for boundary vectors.
2. Vector Decomposition by Boundary Type
- Regular Sidelines (Linear Boundaries):
When approaching a sideline (e.g., left boundary), decompose velocity into tangential (along the line) and normal (perpendicular to the line) components. Cancel the normal component directed outward (toward OOB), retaining only the tangential component to move parallel to the boundary.

- Penalty Area Curves (Curved Boundaries):
For curved boundaries, decompose velocity into tangential (local tangent to the curve) and radial (perpendicular to the tangent) components. Cancel the radial component that would push the robot out of the penalty area, forcing movement along the curve’s tangent to maintain in-bounds proximity to the ball.
3. Orientation-Driven Recombination
After canceling the out-of-bounds velocity component, recombine the remaining vectors to form a new velocity that:
- Prioritizes in-field orientation (no OOB movement).
- Maintains the robot’s trajectory toward the ball by preserving the tangential component, which aligns with the boundary while keeping the robot within bounds.
 
For a visual representation of vector orientation and decomposition, refer to the diagram in our poster.","Goal-Scoring Algorithms and Ball Handling Strategies
 
1. Direct Dribble-and-Shoot Strategy
After acquiring the ball using the previously described ball-handling algorithm, the robot employs its dribbler to control the ball. Key steps include:
 
- Positioning for Shooting: The robot uses radar to calculate the angle to the goal and a gyroscope to monitor its own orientation. When the robot is aligned directly toward the goal (within a specific tolerance), it triggers the kicker mechanism.
- Kicker Activation: A relay controls the kicker to deliver a rapid, powerful strike toward the goal, leveraging the precise angle data from the radar and gyroscope to ensure accuracy.
 
2. Backward Ball Control with Wall-Based Maneuvers
 
This strategy uses the radar’s precision to evade opponents:
 
- Waypoint Navigation: Using radar coordinates, the robot defines waypoints along the sideline. It calculates the distance and angle to each waypoint using trigonometric functions, moving stepwise toward the opponent’s goal line.
- Final Approach and Shot: Upon reaching the goal line, the robot turns to face the goal and executes a shot via the kicker, again confirming alignment via radar and gyroscope data.","Our robots use radar - based velocity decomposition for goal defense, avoiding line sensors. The key is to move them in a circular path around the penalty zone for effective blocking.
 
Defense Strategy
 
1. Trajectory Control: Using radar data, robots adjust their velocity in real - time to maintain a circular path around the penalty zone. If too close to the goal, they move outward; if too far, they move inward, always facing outward to stay ready for defense.
2. Velocity Decomposition: The initial velocity towards the ball is split into components. One adjusts the distance from the goal, and then the components are recombined to guide the robot's movement precisely.
3. Positioning: Robots position themselves on the line between the ball and the goal center to maximize blocking area and stop once aligned.
4. Ball Clearance: When the ball is still, the defensive robot controls, turns, and shoots it towards the opponent’s goal.
 
See the poster image for a visual of velocity decomposition and trajectory.","Our robots can communicate with each other using the built-in Bluetooth modules on their mainboards. One of our tactics is that when the defensive robot gets the ball, it exchanges position coordinates with the offensive robot. If the defensive robot successfully receives the offensive robot's coordinate information, it will kick the ball towards the offensive robot. Specifically, you can watch the video posted on YouTube.","Key Offensive Algorithm: Backward Dribbling Strategy
 
The core offensive strategy for our robots centers on a backward dribbling approach, leveraging radar and gyroscope to execute tactical maneuvers:
 
Tactical Execution
1. Wall - Shielded Ball Positioning
After securing the ball, the robot turns toward the nearest field wall, using its body to block the ball from opponents’ view. This shields the ball from defensive detection, allowing unimpeded movement.
2. Waypoint - Driven Navigation
Radar defines sequential waypoints along the sideline toward the goal. The robot calculates angles and distances to each waypoint, moving stepwise while keeping the ball concealed against the wall.
3. Goal - Aligned Shooting
Using radar - derived coordinates, the robot computes its position relative to the goal and aligns via gyroscope, executing a precise shot once oriented correctly.
 
Strategic Impact
This approach has been pivotal in our scoring success—by combining tactical concealment with precise navigation, the strategy enables consistent goal - scoring opportunities, making it a cornerstone of our offensive performance.",https://github.com/leiemm/emm2025,https://drive.google.com/open?id=1PQPeRHq-dh71oUDd0NayCR12UxLqvduH,"Robots (cost of components that are in your robots right now): 4900 CNY each
Experiments (failed builds, broken hardware etc.): 2500 CNY
Environment (fields, balls, etc.) : 10000 CNY
","98% school
2% individual",8,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",lipeihua28@gmail.com,,
7/12/2025 4:03:19,Mushrooms,Lightweight League,Slovakia,"destinko497@gmail.com, kohaniova@spse-po.sk",https://www.instagram.com/_the__shrooms__/,,"Matrin Zayonc :  Programming
Ema Lujza Kohániová: Electronics
Igor Višňovský: 3D models",90 minutes twice per week,"at school, one of our homes",september 2024,"slovak open 2023: On Stage, 
European Championship 2023: On Stage
slovak open 2024: soccer lightweight, 
European Championship 2024: Lightweight League
slovak open 2025: soccer lightweight, 
croatia open 2025: soccer lightweight

",none,we used Discord and met in school,ChatGPT,https://drive.google.com/open?id=1H0fujbOxkwhq8abJE3MiXLiQaadMuwCy,https://drive.google.com/open?id=14q0np5NkR8MjPW7oXijfmqSzDlNZPX2a,https://drive.google.com/open?id=1UFOm79bokBfER8FEn5g21KNuoxqm1DRo,https://drive.google.com/open?id=1p96V8i1-6KEcBRJDrKr4NzfACC1npYaL,https://drive.google.com/open?id=1Pk5VWc_YuwjzU5xKDpYEWouoMYNq6G9f,https://drive.google.com/open?id=1c2U1SIoLyLHjIP71BnQ3cWzECkmwwetE,https://drive.google.com/open?id=1SxvC1CaUn-KG66nFiynsN5sdgR79ghO4,"To help the robot find the goal and estimate its position, we fuse data from mmWave radars, ultrasonic sensors, and a gyroscope:
The BNO055 gyroscope tracks the robot’s orientation, giving real-time heading information.
Ultrasonic sensors measure distances to nearby objects or walls, helping infer relative position changes, though they’re used sparingly due to lower reliability.
mmWave radars provide more accurate and longer-range distance readings, especially useful for detecting fixed field structures like walls or goalposts—even in noisy or low-visibility conditions.
By combining this data using a lightweight sensor fusion method (similar to a Kalman filter), we can continuously estimate the robot’s position and orientation. This lets the robot recognize field boundaries and determine where the goal is, improving navigation and shot alignment during gameplay.",https://drive.google.com/open?id=15jqkmG_WgYfDPq074rfaZAAeq4t8N5vY,https://drive.google.com/open?id=1UmyB6ALn4GyPi8svTTvNiyN1VfqlaNys,https://drive.google.com/open?id=11boyAkG-2LhFzeovMeb5wclF1R55fThe,https://drive.google.com/open?id=1JUpYwcPG_7r76uRy67e7ekmcbcGTBcjt,https://drive.google.com/open?id=17T_q00Y1QrKVYyLf-GjEqA3ZtiFch-cU,https://drive.google.com/open?id=1SF9ZxZfAb9c1BGwYUgNwTg9P2b1NsQHE,https://drive.google.com/open?id=16ARIcuMswuPC1oOk1-aYs3Y6UFWbS45m,"We designed our robots’ mechanical parts in Fusion 360, enabling precise 3D modeling and component layout. Guided by RoboCup Soccer Lightweight league rules, we focused on size, weight, and mobility to create a compact, modular design for easier maintenance and upgrades. Key considerations included motor placement for traction, sensor positioning for clear vision, low center of mass for stability, and efficient cable routing.
After initial tests, we redesigned the frame for better access to internal components, reducing setup time. Sensor placement was optimized to eliminate blind spots, and later iterations included standardized parts and mounting slots to support future modifications. These improvements were driven by testing and real-match observations.
","We built our design using a mix of 3D printing, hand tools, and external manufacturing. Most of the structure was made with FDM printers using PLA and PETG, enabling rapid prototyping and custom part assembly. Basic tools like drills and files allowed for on-the-fly adjustments during the build.
Custom PCBs were produced by JLCPCB from our Gerber files, ensuring seamless integration with the mechanical layout. Minor issues such as tight clearances or misaligned holes were fixed through quick tweaks in Fusion 360 and reprints. This iterative approach led to a clean and reliable final build.
","We chose a four-motor setup to enable full omnidirectional movement—forward, backward, sideways, and rotation—by independently controlling each wheel. This configuration provides the flexibility and precision needed for fast, responsive repositioning during RoboCup Soccer matches.
It allows smooth movement even in tight or unpredictable situations, such as avoiding opponents or approaching the ball from different angles. Using fewer than four motors would reduce mobility, while more would add unnecessary complexity and weight. Four motors offered the best balance of performance, control, and simplicity for our goals.
",N/A,N/A,https://github.com/destinko497/robot-2025-robocup-junior-soccer-lightweight,"Our robot uses a dual omni-wheel setup that blends the strengths of both 3D-printed and CNC-machined components. Initially, we used fully 3D-printed wheels for their low cost and easy prototyping, but they suffered from weak rollers and limited axle durability. In 2024, we upgraded to CNC-machined aluminum omni-wheels for improved strength and precision—but found they lacked traction during fast direction changes.
To address this, we created a hybrid dual-layer design by mounting custom 3D-printed wheels directly onto the CNC wheels. This solution combines the durability and stability of machined parts with the grip and flexibility of 3D-printed materials, resulting in more reliable movement and improved control during RoboCup matches.
",https://drive.google.com/open?id=1AkYOB0LsSqj-6Kg2lQVp-F0kIhZE3FgL,https://drive.google.com/open?id=1WrrSGuoHDnfOv3SSwKEK5ln9j1voC45l,"Our robot is powered by a custom 3S LiPo battery (11.1V nominal), which directly supplies the motors. From this main source, two voltage regulators distribute power to the rest of the system:
An  LM2596 buck converter  steps the voltage down to 5V for the LEDs, offering efficient, low-heat power delivery.
An  LM7805 linear regulator  provides a clean and stable 5V specifically for the Teensy microcontroller, prioritizing voltage stability over efficiency.
From the LM2596’s 5V output, an  AMS1117 regulator  reduces the voltage to 3.3V for sensors. That 3.3V line is then stepped down to 1.8V using an LD1117 regulator  for the mmWave radars. This multi-stage power system ensures each component receives the correct voltage for reliable performance.
","We control our brushed DC motors using **MC33886 motor driver ICs**, which manage both power delivery and direction. The **Teensy 4.1** generates **PWM signals** to control motor speed with precision. Since the Teensy operates at **3.3V logic**, these signals are passed through an **8-channel logic level converter** to shift them to **5V**, matching the input requirements of the MC33886 drivers.
The motor drivers convert the 5V PWM signals into variable voltage and current outputs, enabling smooth and accurate speed and direction control. This approach allows for responsive, real-time movement—crucial for effective navigation and agility during RoboCup matches.
","For RoboCup, we use the Teensy 4.1 as the main microcontroller due to its high processing speed and extensive I/O capabilities, which enable efficient sensor handling, motor control, and real-time movement calculations.
The ESP32, located on the top PCB, is dedicated to wireless communication during matches. It allows the robot to send and receive data without interfering with the Teensy’s core control tasks. While the ESP32 can also interface with peripherals like a robotic arm, that functionality is reserved for other projects and not used during RoboCup.
","We use 11 TSOP3836 infrared sensors on the bottom PCB for ball detection, with their signals routed through a multiplexer. This lets the Teensy 4.1 efficiently read multiple sensor inputs using only a few pins.
On the top PCB, we have 24 TSSP4038 sensors connected via two MCP23017-E/SO I/O expanders, which communicate with the Teensy over the I2C bus. This setup minimizes wiring between the boards and allows the Teensy to read all sensors simultaneously, improving detection accuracy and providing full-field coverage for reliable ball tracking.
","Our line detection system uses 24 SMD phototransistors arranged around the robot to detect contrast between the green field and white lines. Each is part of a voltage divider circuit that converts light intensity into a measurable voltage signal.

To improve accuracy, we pair these sensors with 38 red LEDs that illuminate the area directly beneath them, enhancing the contrast between white lines and green turf. The sensor outputs are routed through two multiplexers, allowing the Teensy 4.1 to read all signals efficiently using fewer input pins. This setup provides fast, precise line detection with minimal wiring complexity.
","For navigation and positioning, we use mmWave radar sensors connected to the Teensy 4.1 via a TCA9548APWR I2C multiplexer, which allows multiple radars to operate on the same bus without address conflicts. These sensors provide reliable, real-time obstacle detection and environmental mapping.
To track the robot’s orientation, we use a BNO055 gyroscope and orientation sensor over I2C, which delivers accurate yaw, pitch, and roll data—crucial for maintaining stable direction during movement.
",N/A,N/A,"https://drive.google.com/open?id=18ejxGKSN2AKtMLplwKlzsPGS4TX2NGVx, https://drive.google.com/open?id=1Jq9QM39j54jGcYIVvKPcgA8yKbxfrR9u, https://drive.google.com/open?id=112fU_hK6X083JH58dBmAXbu5hAgHJqI-","https://drive.google.com/open?id=1GgLLtTSQHodsNOQ46BL1GzEtPlOrJduH, https://drive.google.com/open?id=1A3PpM5820lgaG3D5WiawG7ulbrpbUJlr","The part of our electronics we’re most proud of is the integration of mmWave radar sensors for mapping and navigation. Compared to more common sensors like ultrasonics or IR, mmWave radars offer higher precision, greater reliability in variable lighting, and strong resistance to environmental noise. This allows our robot to detect walls and obstacles with exceptional accuracy, even under the fast-paced and unpredictable conditions of RoboCup matches. Another key innovation is our modular electronics design. We split the system into two PCBs: the bottom PCB contains the Teensy microcontroller, power circuits, and motor drivers—serving as the robot’s brain and core infrastructure. The top PCB is a modular, swappable unit that connects via a simple interface and can be easily upgraded or customized. This modularity speeds up development and troubleshooting while allowing us to adapt the robot for different tasks beyond RoboCup, such as adding new sensors or robotic arms, without overhauling the entire system.
","https://drive.google.com/open?id=1hllzNjCxMNmmFnL61EdTpI9EsZE2ksoB, https://drive.google.com/open?id=1uMF2S2PBHljeOkemfjbJl8JIgd-FzfVD","We use the Teensy 4.1 microcontroller to control our motors by generating PWM (Pulse Width Modulation) signals that determine motor speed and direction. These PWM signals are first passed through an 8-channel logic level converter, which shifts the 3.3V signals from the Teensy to 5V, making them compatible with our MC33886 motor driver ICs.","We use 11 TSOP3836 IR sensors on the bottom PCB and 24 TSSP4038 IR sensors on the top PCB to detect the RoboCup ball’s modulated IR signal. The TSOP sensors connect through a multiplexer, while the TSSP sensors link via two MCP23017 I/O expanders communicating with the Teensy 4.1 over I2C, enabling efficient, low-wiring data reading.
Each sensor is assigned a fixed angle based on its position. When multiple sensors detect the ball, we compute a vector average of their angles weighted by signal strength. This provides a smooth, accurate estimate of the ball’s direction, allowing the robot to track and approach it effectively in real time.","Your algorithm smartly combines sensor data with motion control for effective ball tracking and scoring. Here’s a concise summary:
The robot first calculates the ball’s direction using vector averaging from active IR sensors. It then rotates to face the ball and drives toward it, adjusting speed based on distance and angle. As it nears the ball, it slows down to maintain control and prevent the ball from bouncing away.
Simultaneously, the robot attempts to align its orientation toward the opponent’s goal during the approach, enabling quicker and more accurate shots once it gains control of the ball. This adaptive and coordinated strategy is consistently applied across all your robots.","Your robot is equipped with 24 SMD phototransistors arranged around its base to sense the white field lines, enhanced by 38 red LEDs that improve contrast against the green turf. Each phototransistor is wired in a voltage divider circuit, and their signals are read via two multiplexers by the Teensy 4.1 microcontroller, providing 360° coverage for precise line detection.
To interpret the sensor data, you use an approach similar to ball detection: each sensor is assigned a fixed angle based on its position. When multiple sensors detect the line, you calculate a vector average of these angles to estimate the line’s direction relative to the robot. This directional estimate helps the robot understand its proximity to the field boundaries.
Based on this information, the robot adjusts its movement to avoid leaving the field—slowing down, stopping, or reversing as needed—while still prioritizing ball tracking and overall gameplay.","We don’t rely on a single fixed algorithm to score goals—instead, we use our own custom strategy that adapts to the situation on the field. The robot constantly tracks the ball using vector averaging from the IR sensors and attempts to align itself with both the ball and the opponent's goal. When the alignment is close enough and the ball is centered, the robot activates the kicker, which is powered by a solenoid circuit boosted to 35V, to shoot the ball toward the goal.",N/A,N/A,"The algorithm we’re most proud of is our custom mapping and localization system, designed specifically for microcontrollers like the Teensy 4.1. It combines data from multiple mmWave radars and a BNO055 gyroscope to estimate the robot’s real-time position and orientation on the field.
Unlike traditional SLAM algorithms—which are often too resource-intensive for microcontrollers—our solution is lightweight, fast, and optimized for the constraints of RoboCup. The mmWave radars detect nearby walls and structures, while the gyroscope provides continuous orientation data. By fusing this information, we can accurately track the robot’s location relative to the field boundaries.
This efficient, low-overhead approach allows the robot to navigate more intelligently, especially in fast-paced or crowded scenarios, giving us a clear competitive edge during matches.",https://github.com/destinko497/robot-2025-robocup-junior-soccer-lightweight,https://drive.google.com/open?id=1sswIfP9QfKlgVXfVCdqgJ03GWl7_asxb,"Robots (cost of components that are in your robots right now): 800 Euro each
Experiments (failed builds, broken hardware etc.): 2000 Euro
Environment (fields, balls, etc.) : 70 Euro
1 Euro= 1.17 USD","65% parents
35%school",2,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",kohaniova@spse-po.sk,,
7/12/2025 6:49:04,Aperture Open,Open League,"São Paulo, Brazil",aperture.soccer@gmail.com,"aperture.soccer (Instagram), Aperture Robotics (Youtube)",https://drive.google.com/open?id=1XD8WspBdWBefJjPcO2x6ZY1vDKxCWrDp,"Leonardo Rosendo: Captain and General Hardware
Lucas Suzena: General Software
Gabriel Hamada : General Camera and Documentation
Ivan Pontes: Mechanics and Eletronics",9 hours per week.,School robotics lab.,June 20th.,"Campeonato Brasileiro de Robotica 2022 (National): Lightweight League
Robocup Jr France 2023 (World Championship): Lightweight League
Campeonato Brasileiro de Robotica 2023 (National): Lightweight League
Robocup Jr Netherlands 2023 (World Championship) : Lightweight League
Campeonato Brasileiro de Robotica 2024 (National): Open League
Robocup Jr Americas 2025 (Super Regional): Open League",Reviewed the PCBs and helped us chose and purchase some of the robot components.,"For communication we use WhatsApp and Discord, for code sharing and backup we use GitHub, and for schedule management we use Notion.",None,https://drive.google.com/open?id=1Osbxy4TbtjdoV1hw9NfQSIUDl3rulV_X,https://drive.google.com/open?id=1BCnU1nY_S5LhV1SagW5RjmsAdc6nx01U,https://drive.google.com/open?id=1XDvFmYc7Y58LW_nXoxpMBQtzg8KhoWOG,https://drive.google.com/open?id=19TSwEP5jmVuVWIvh2z4I69IKTgRsS8zc,https://drive.google.com/open?id=1N0g2qZR_k0JXBW-qLBHV4PcR-A2tvUPb,https://drive.google.com/open?id=1c-jPN0NF8YCmu3GsQ7xvAaLYwXln7ViS,https://drive.google.com/open?id=113AaTN45D8wTnqs1HHPtipMJuHsAYx6i,"We use a color detection code in the OpenMV Cam H7 Plus using the OpenMV firmware
(Python). In the STM (C++), after receiving the information of the goals and ball from the camera, we use trigonometry to calculate the position of the robot on the field.

We use two methods to calculate positions. If the robot is detecting the two goals, it uses only the absolute positions of the goals on the field and the relative angles to them to calculate the robot's position precisely. But if only one goal is appearing, the robot uses linear interpolation first to convert the distances in pixels to the goals to values in
centimeters and then, with the absolute positions and relative angles of the goals, uses
trigonometry to get its position on the field. The second method is less precise, because it depends on a precise reading of pixels on the camera, and the camera resolution is not good for precision, since we prioritize a better FPS in the camera over an image resolution bigger than necessary.

The robot relies only in angles to get the ball and conduct it to the goal, but it can use positions for tasks like defending the goal, or using a specific strategy to move on the field other than going on a straight line.",https://drive.google.com/open?id=16BvgbWK56dIAthAqE-DSmkgq8eORz4zq,https://drive.google.com/open?id=1nZauHNcQSRZ46S6gCe9XkluC-mZXUAYv,https://drive.google.com/open?id=1HFbt29fqfGtN-bhdY8Py7g6Psxtq5RzA,https://drive.google.com/open?id=1UWsT5dTzSpu7reTBB5oHxRZiYABXQJNM,https://drive.google.com/open?id=1emm9NyJIWLbpUUGDZVvZj-IpyR6vDcqn,https://drive.google.com/open?id=14hgxCKgHkE7j_uf0EH36ZRsx9vYG1Gvy,https://drive.google.com/open?id=1FnUGWQznbqzRjCahCwG-n0xl_SyrSi_V,"We used OpenSCAD, a software for creating solid 3D CAD objects using its own programming language. This makes the organization of the files and precise modeling easier.

With only one season in Open and little time to produce new robots, we managed to improve a lot our robot, going from an adaptation of our Lightweight robots to an international level robot of Soccer Open, bringing a lot of methods and inovation to our national league. Our design combines methods learned and improved by all the generations of our team since 2017, like the omnidirectional wheels using ABS instead of PLA, providing a more resistant and cheaper wheel, the use of complete PCBs printed in glass fiber and copper (a cheaper option to print boards) to reduce the numbers of cables on the robot while serving as the robot's structure, with methods of teams from all over the world, like the use of a conical mirror of aluminum molded in a lathe, explained by the Russian team ""Comma,"", complemented with a study of mirrors made heating mirrored sheets, with the help of the Slovak team ”LNX Robots”, a kicker mechanism inspired in the American team ""Team Elite"", and general inspiration of other international teams.

For the future, since we plan to keep the same boards and components for the next season, we will only improve what we already have of mechanical parts, such as producing wheels and structural parts in metal and improve our dribbler mechanism to use less space and work better.","For parts made in PLA and ABS we used a 3D printer, using saws and metal files to cut and sand exceeding parts of the supports.

For PCBs, we design our own boards in EasyEDA, and order their printing in JLCPCBs, that offers different options of printing, but we prefer ordering the PCBs in copper and glass fiber, because it is a cheaper but reliable type of material. During our years in Soccer, we developed various strategies to improve our PCBs, such as using one side of the board for vertical wires and the other for horizontal wires.

For the mirrors, we calculate the dimensions of our own conical mirrors in GeoGebra, a website for calculations in a Cartesian Plane. After defining the diameter and height of the mirror, we order the aluminum molding with a local machining company, and then sand and polish it to achieve a good reflection.

The main methods used by Soccer teams are the use of an aluminum cylinder on a lathe and the heating of a mirrored plastic sheet. Our initial idea was to mold an aluminum plate in a cone, because of the good reflection of the aluminum and that it would not require the use of a lathe, but we did not find a way to easily bend it.

We then changed to the second method, using a mirrored sheet. Normally, the material used is a PVC (Polyvinyl Chloride) or PS (Polystyrene) sheet mirrored using a thin layer of aluminum. Since this type of material was not available in Brazil, we tried using a PVC plate coated with acrylic and mirrored with a cheap material, but although we managed to heat and mold it in the conical shape, the material did not retain its reflexive properties after the process. We also tested using a mirror pyramid, but it had too many blind spots and was difficult to produce.

Another tests include the use of a chrome spray, spray mirror and mirrored insulfilm, all with insufficient outcomes. After severe searching and testing, we ended up with two solutions, each one similar to one of the methods explained above.

The first one was polishing spherical aluminum mold, which allowed us to get satisfactory reflection results. The second one is using an imported mirrored sheet made of PET (Polyethylene Terephthalate), that we cut in a circle and fold it on an 3D printed cone. Although it has a higher distortion, we managed to achieve a much better vision of the field.

In the final steps of the production of our robot, we found a way to produce the mirror on a lathe, so we calculated the dimensions of the mirror in the cartesian plane, ordered the molding of an aluminum cylinder on the lathe, and then we polished it until it had a
satisfactory reflection. This is the method we are currently using.

The images of our tests with mirrors can be seen in our complete TDP (made with the previous international template), that can be accessed scanning the QR Code in our poster. Also, feel free to come talk with us if you have any questions or suggestions.","The motors are located in the bottom board at an angle of 90° to each other. We use four Nidec 24H brushless motors of 12V that can go up to 3900 rpm and are exclusively used for the movement of the robot. We use this disposition of motors because it is the best way to implement a precise omnidirectional movement.

The four wheels of the robot use the idea of omnidirectional wheels. Being printed in ABS with 20 sub wheels distributed around the edge, the wheels have a total diameter of 65mm.

Since the motors are disposed perpendicularly to each other and each wheel has sub
wheels perpendicular to the motor turning axis, if two parallel motors move to one direction, the other two motors will still accompany the movement, as the sub wheels will spin instead of the whole wheel, allowing a quick and fluid movement on the field.","We decided to use a JF-0826B solenoid of 6V and 20N, as it was a common and cheap
option to buy, and when powered with 48V, we end up with a stronger but smaller kicker.

We made the kicker system on its separate board, as managing a higher voltage on the main board could be dangerous. The board is designed to fit inside the robot, also aiming for occupying less space.","The initial idea was to use a belting system from the motor to the roller, as suggested by the Russiam team ""Comma,"", as it would be more reliable than using gears.

But we had a problem with avaliable space on the robot, as making it too high would
prejudicate the camera vision. So, we ended up using the own case of the motor as the
dribbler roller to save space, and used silicone molded parts to provide grip to the dribbler.",https://github.com/Aperture-Robotics/Aperture-Open-SCAD.git,"A part normally underrated of the mechanic aspect of the robot is its aesthetic design. The importance of having a clean and aesthetic design goes from later helping in the electrical and software part of the work, to having a unique robot, that stands out during the matches. After all, Soccer matches should also be nice to watch in the spectators perspective.

Instead of only focusing only on the basic functions for the robot, we also included aspects that consider aesthetic purposes, differing from the other teams in Soccer Open. Some of those aspects include the mirror support having a representation of our team logo while maintaining the modernity of the robot, having a helmet for the robot, that covers the components of the robot, absorving impacts and enhancing its shape and designing custom PCBs that serve as the robot's structure and allow us to use almost no cables on the robot while keeping the eletrical part organized and reducing risks, since loose cables can twine and cause problems.","https://drive.google.com/open?id=1udUgpA-PBwi5_VDOyqD_Q3RZ1-wWcUSm, https://drive.google.com/open?id=1q4qfJtb4UEsNr7s8uU7kIURnAU7iPRvJ, https://drive.google.com/open?id=1DB0ZJlENLBIWy3HxNgR96GGUrvA78WNS, https://drive.google.com/open?id=1HALCJ7OvBESNz4GyhN82tRNFVKfeVqCy, https://drive.google.com/open?id=16oCrQ1MJQIuD9NzH8l7n2BbxxsjYHKIR",https://drive.google.com/open?id=1G7eh_zGZzAWgvekzxD-fJ5gtnBLmHZgx,"The robot uses a 12.6V LiPo battery that is used directly for the motors, and either
converted by a XL6009 step up in the kicker board to 48V, used in the kicker system, or by a SY8205 step down in the top board to 5V, used in the STM32 and other components. The SY8205 is a model of step down much more efficient than the others already tested, being able to convert nine tenths of the original electrical energy.

We also use a mini regulator in the bottom board from 5V to 3.3V to power the LEDs (note that in the top board this regulator is not needed, as the own STM converts 5V to 3.3V).","Our motor uses PFM (Pulse Frequency Modulation) to control the RPM of each motor. The motors, that also have an integrated encoder and a two phases encoder, have functions using digital pins to control directions and to brake. They are powered with 12.6V of the battery.","With the removal of the infrared sensors (used to detect the ball in the Lightweight
modality), we used two microcontrollers instead of three.

Located in the top board, the STM32F405 is the main microcontroller, being responsible for the reading of most sensors and the control of the motors and reactions of the robot. This microcontroller has 168 MHz of processing frequency, 192 kB of RAM memory, and 1024 kB of ROM memory, also allowing the expansion of the ROM memory with an SD card.

Being responsible for the reading and processing of the camera images, the OpenMV Cam H7 Plus is located on the top board and has a built-in camera. We started using it instead of the STM32H750, because although it is more expensive, the H7 Plus has many advantages compared to the STM. The differences between the two microcontrollers, together with a comparison of the two camera sensors we tested can be seen in our complete TDP (made with the previous international template), that can be accessed scanning the QR Code in our poster or accessing our Linktree in the end of this form.","We use an OpenMV Cam H7 Plus with an OV5640 camera module. Running VGA in 17-30 FPS, the camera runs the code using OpenMV firmware (Python).

A threshold is defined for the color, calibrating a minimum and maximum for the LAB (Light, A dimension and B dimension) values. Then, based on the threshold and some other values, like the maximum area and margin to merge, the code looks for blobs with those values in the image and uses its position to calculate angles and distances. In the code, we use a debug variable, that is only defined as True during tests, so the blobs are drawn in the image.

The values collected about the goals and ball are then sent to the STM32F405, where distances, positions and estimations are calculated.","The reflectance sensors are evenly disposed in the bottom board in a circle of 13 cm in
diameter, increasing the detection area evenly. In total, the robot has 32 reflectance sensors, each sensor being composed by one phototransistor and one LED. We use the models TEMT6000X01 and WS2812B for the phototransistors and LEDs, respectively. The values of the reflectance sensors are later selected with the multiplexer and received by the STM in the top board.

To use fewer pins for the reflectance sensors, we use two multiplexers that only need 4
digital pins to read 16 sensors each, so in total, including 2 analog pins to get the readings, only 10 pins are used for the 32 sensors.","The robot has one gyroscope of model MPU6050, used to get the angle of the robot in
relation to an offset. Previously, we would also have a compass of model HMC5883L to get redundant values, allowing more reliability, since the gyroscope accumulates error on the readings along the time the robot is turned on, but since we lowered the height of the compass to leave space to the conical mirror on the robot, the magnetic interference of the motors became too high, so we removed the compass.

The angle read by the gyroscome, combined with the data collected by the camera and
reflectance sensors, explained previously, compose the location part of the code,
responsible for interpreting the values received, calculating angles, distances, positions and lines directions","We use the step up to convert 12.6V to 48V, used to power a solenoid of only 6V and 20N, so it can go up to 160N. The electronic circuit of the kicker system is adapted from the American team ""Team Elite"" from Princeton Soccer Robotistry, with the main difference being that we use 4 capacitors of 1000µF to store energy for the kicks, while the original circuit uses 2 capacitors of 2200µF, since the original capacitors would not fit in our robot.

We use a system of recharge and shoot, converting and storing energy for a kick, and then releasing it to produce a powerful kick. We also have a LED that is activated when the system is charged, and two mosfets to activate the kicker. We use two mosfets instead of one to avoid energy reversion, since the converted energy could go back in the circuit and damage components.","The dribbler system only have one component, an A2212 motor of 1400KV, meaning it can go up to 17640 rpm when powered with the 12.6V of the battery, but in the code we limit it to 35%, having 6200 rpm, that is already enough to serve as a dribbler.","https://drive.google.com/open?id=1UsaPeikG0RCfjVGPK9IynMp5ybxM0MwM, https://drive.google.com/open?id=1UdMrkSlUcBDqXFugImqGe5BW6Jmhu4RP, https://drive.google.com/open?id=19zC-rw3Xbi0-csy2DWElEcGzSww0a6LI","https://drive.google.com/open?id=1DJr-6wR2pt0sVdsKyHiMdG2_crG8t3_8, https://drive.google.com/open?id=1BGSTd51_rndApBoTyHmfo1qPGdp0tDCX, https://drive.google.com/open?id=1Zed6PfWgf3ZGyfizjry1GbKPbx2zhFKI","We use different methods to make the access of information of the robot during the
matches easier, since having a simple but efficient way to access information is important to manage the strategy during the match.

Firstly, we use an LCD display to show various informations of the robot such as the battery level, and to change strategies. But the main difference in our robot, compared to the other robots of Soccer Open, is the usage of a buzzer, either to quickly warn if there are problems with the battery or camera, very important considering the accidents that can happen with LiPo batteries and troubles we had previously with camera calibration, or we can use the buzzer to play sounds with entertainment purpoises, since as we mentioned previously, the matches should consider the spectators perspective too.","https://drive.google.com/open?id=1YUUA1FNs4dt8TED2SPWwM5hvU22Nl279, https://drive.google.com/open?id=1yraemAU2vf3OpcLsESuWDQIZQZ1YSqlR, https://drive.google.com/open?id=1txM0w1J6J28lL5mag0HV2v7vSSAwiUVg, https://drive.google.com/open?id=11yLekWhT7tuPpdnHH4sWxkgA_9eObIwb, https://drive.google.com/open?id=1wZ2bSjC-Xymcqqyrl0piAXncdmbVflZN","In the main microcontroller, the STM32F405 there is a movement class, that controls the movement of the motors dividing in x and y axis, the speeds are defined by the decision class. The movement class serves only as an intermediary of the processing of the information and the physical response of the robot.

In the movement class, the main function starts with three parameters: fx which is the force in x; fy which is the force in y; ang which is the force of rotation in its own axis. All these forces are vectorially added in each motor. After this the final force of each motor is verified, because the maximum strength is 100, we make a rule of three with all the motors to maintain the same proportion of strength in all of them and with power lower or equal to 100.","Firstly, there is a color detection code in the OpenMV Cam H7 Plus using the OpenMV
firmware (Python). A threshold is defined for the color, calibrating a minimum and maximum for the LAB (Light, A dimension and B dimension) values. Then, based on the threshold and some other values, like the maximum area and margin to merge, the code looks for blobs with those values in the image and uses its position to calculate angles and distances. In the code, we use a debug variable, that is only defined as True during tests, so the blobs are drawn in the image.

In the STM (C++), after receiving the information of the goals and ball from the camera, we use trigonometry to calculate the position of the robot on the field, and with it, the position of the ball.","Detecting the angle of the ball relative to the front of the robot, the striker makes a curve to align its front with the ball and the opposite goal, making it easier to control the ball while conducting it to the goal. Meanwhile, only if the goalkeeper is too close to the ball, it will temporarily start to attack, using the same method of the striker.","Our robot has 32 reflectance sensors in a circular format on the bottom board, each sensor composed of one LED and one phototransistor. Reading the values detected by each sensor, we calibrate the code to detect the white lines, and knowing the sensors that are detecting the lines, we use trigonometry to find the angle of the line in relation to the robot.","In our main algorithm to make quick goals, the striker firstly identifies the ball and makes a curve to align itself, the ball and the opposite goal in a line. Then, the robot ensures it has the ball possession, so it can start a movement to the goal. Finding a spot free to shoot, the robot then uses its kicker to make a powerful kick towards the goal.","While the striker focuses on having the ball possession, naturally intercepting the
opponent's kicks, the goalkeeper uses a system of predefined points in front of the goal, and using the ball speed to estimate its trajectory, the robot goes to the best spot to defend.

This strategy proved to be efficient even with teams that hide the ball behind the robot, as it is easier for our striker to intercept and take the ball, and the goalkeeper still knows where the ball is, as the striker keeps sending the ball position via Bluetooth.","The robots have slots for two different Bluetooth modules, the HC-05 and the RCJ module, used to send information like positions and strategy commands. The main importance of this type of communication is that, sharing the position of the ball on the field, even if one robot isn't viewing the ball, the robot will still know its position, as the other robot sent it via Bluetooth.","In our matches against different teams, we noticed the importance of the strategy when the hardware of the robot is on its limits, as the same strategy can be bad against better teams, but work surprisingly well against other teams, that only considering hardware, should be better too. So, for this competition, differently from the methods of strategy management normally used in Open, we are using a method inspired in SSL (Small Size League) Soccer teams, the State Machine.

In the code, there are diverse states, such as kicking, turning or going to a specific position. There are also behaviors, like the striker, goalkeeper or hybrid. To control the states and behaviors, there are transitions, that are either events or conditions that cause a transition of the current state, and sometimes the behavior. This way, we can produce a strategy much more fluid and changeable, defining which states will be used, what is the robot's behavior and how it will react and transition based on the analysis made of the team we are playing against.",https://github.com/Aperture-Robotics/Aperture-Open-Code.git,https://drive.google.com/open?id=1R75G9cKnkuhafiqbP5neoFlZbCtCxiIg,"Robots: 1626,65 BRL each robot
Experiments: ~300 BRL
Environment: 165,25 BRL (does not include the field, as it was made for the previous team)
1 BRL = 0.18 USD","50% school
25% mentor
25% students",1,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",aperture.soccer@gmail.com,,
7/12/2025 11:26:01,ZG24Robotics,Open League,Croatia,"ivan.perko007@gmail.com, borut.patcev@gmail.com, ivanmat319@gmail.com ",https://www.instagram.com/zg24robotics?igsh=MWp5cTNybmhsZGxrNA%3D%3D&utm_source=qr,https://drive.google.com/open?id=14E81nmtolD3KEZi845RsAB1AE0U8MWdg,"Borut Patčev(CTO) – Team Captain, Lead Programmer, Electrical Design
Ivan Matošević(CEO) – Mechanical Design, Materials and Manufacturing
Ivan Perko(CFO) – Electrical Design, Camera Vision Systems, Sponsorships
Dino Furjan(COO) - Hadware Assembly, Testing & System Integration",Our team met nearly every weekend throughout the year.,"We worked on our robots at our homes, our mentors home and at robotics workshops held in our teachers schools.","Our team started planning the robot in August 2024, and development work officially began with the start of the school year in September.","
European Championship in Bari 2025: Open League
World Championship in Eindhoven 2024: Rescue Line, Lightweight League, Open League
World Championship in Bordeaux 2023: Rescue Line, Lightweight League, Open League
World Championship in Bangkok 2022: Rescue Line
European Championship in Guimarães 2022: Rescue Line, Rescue Maze
World Championship in Sydney 2019: Rescue Line","He provided us with his garage so we could set up a soccer field and work there, and he also bought us a sensor.","We communicated through a WhatsApp group. At the start of the year, we assigned each team member specific parts of the robot to be responsible for, and we divided the remaining tasks during our weekend meetings throughout the year.",ChatGPT,https://drive.google.com/open?id=1gSRUekuPBZXklwrO4RhuXLP1XYfZPrLt,https://drive.google.com/open?id=1wpZDlWps0NpvZl_QWTabJFGpW3n_LY9y,https://drive.google.com/open?id=1Hh8HPVbd7yspEz-PXQpAvox2thhpPqcj,https://drive.google.com/open?id=1rKVV9V6ePhgyzBXkdLRSWEDwv-SCXdjq,https://drive.google.com/open?id=1PNXqH-CzFFAQj1OBtf-oEK359WA0DYLY,https://drive.google.com/open?id=1n9tF_R3qf_aIvyV08SIiDrAETRTvD4y6,https://drive.google.com/open?id=1O4Yp4UbhRDG7ul3aDBVlMVLq9_NJcq4r,"We use LIDAR sensors placed on all four sides of our robot to detect the center of the field and the position of the goalie in front of the goal. Based on that information, the robots position themselves either at the center or in front of the goal if the ball is not visible, and then wait until the ball is detected. In addition, we use SparkFun’s optical odometry sensor, which provides us with the robot's X and Y coordinates. Using these coordinates, we determine how the robot should move across the field with precision.",https://drive.google.com/open?id=1xJzKMOpcQUKw1MMNGaZmohRhIhiFriQD,https://drive.google.com/open?id=1-iOs0mEpEonyZ9t0TFMQdt6-lF2h-4OX,https://drive.google.com/open?id=1b7DOXgR-IwsQXb6IjQb_gCYDjpLQGTN1,https://drive.google.com/open?id=1uojeIxQjxVhWrut3_87uxuw1h3gsBYB8,https://drive.google.com/open?id=1IFbGeBummSeqA5o0Ij-Z8H3cJedKGjNR,https://drive.google.com/open?id=1NIDJnZZ0TJRVtbUtc4JjG3uFi-7ft-UL,https://drive.google.com/open?id=1p635J0kF6C4tuy_X6TAtkr2MOXG1CCkQ,"We designed all mechanical components in Fusion 360, and created PCBs using EasyEDA and KiCad, drawing inspiration from Small Size League (SSL) robots. Our main goals were robustness, reliability, and the integration of advanced features such as brushless motors, a gear-driven drive system, efficient dribbler, powerful kicker, 360° vision, and a stable electrical system.
We also upgraded our camera system. Originally using the OV2640 sensor, we experienced low image quality and poor FPS. After testing alternatives, we switched to the OV5640 sensor with a 140° lens, which provided much better clarity and performance.","For manufacturing support, we used JLCPCB for PCB production and assembly (e.g., line sensor PCB), JLCCNC for CNC machining and nylon prints, and PCBWay for cosmetic parts like a carbon fiber handle and LED housing.
Material selection was key, especially for the dribbler gears running at 12,000 RPM. After testing resin, PLA, and PETG—with issues like cracking or deformation—we found PAHT-CF to be the most durable. PLA was also replaced by PETG for all structural parts due to its greater impact resistance.
A major upgrade was made to the drive system, replacing 3D printed gears with steel-chromium alloy (motor) and POM (wheel) gears. We also improved shaft retention by switching from glue to knurled, press-fit steel shafts secured with epoxy.","We use a 4-wheel omni-directional drive system with a custom motor layout—rear motors are placed at 90°, and front motors at 120°, allowing more space for the dribbler and kicker without sacrificing maneuverability. This configuration offers a balance between speed, agility, and internal space, and is inspired by Small Size League (SSL) designs.
Each omni-wheel has two 3D printed layers with embedded rubber rollers (8×3×3 mm) and metal washers to reduce friction and ensure smooth, durable rotation even at high speeds.
Motor: Maxon EC 45 flat Ø42.9 mm, 30 W, PN: 668556
Driver: ESCON Module 24/2, 2/6 A, 10–24 VDC, PN: 466023","
Due to time constraints, we replaced our original custom kicker design with a pre-made 48V solenoid kicker from Aliexpress, featuring a 15 mm stroke and powered via a voltage booster. The kicker plate consists of two parts: a metal base made by JLCCNC, screwed onto the solenoid shaft, and a 3D printed front section with adjustable thickness. This modular design lets us easily tune the effective stroke length.","
The dribbler, developed over six months and inspired by SSL designs, is the most extensively refined part of our robot. Its body is made from PETG and features a 1:1 gear transmission with three custom PAHT-CF gears and a four-rod suspension system.
The roller, molded from a 1:1 mix of A45 silicone, has a spiral groove that centers the ball. The suspension uses four rods with linear bearings, allowing vertical movement to absorb impacts and maintain consistent contact with the ball.",https://github.com/BorutPatcev/ZG24_Robotics,.,"https://drive.google.com/open?id=1jJFKxVpUJ8SFM0ASiEahXsa8NsAXoHLj, https://drive.google.com/open?id=1hxU6sltrHcfG9sOvB_YkTZpirq6H-vMT, https://drive.google.com/open?id=1-F5LuluF3MQ1-zdjBWGBtoru0BBVYBA4, https://drive.google.com/open?id=1LNs1FBBG6U0Ka3Vc-jobmlHjLuCBNz5F, https://drive.google.com/open?id=1PK9zWRD9i_AguGVDRuZ4t2reKKfRyJyI",https://drive.google.com/open?id=1HQD9kZaA2GG0DaeyHs5YJmrh-CqxIXTf,"Our robot uses four voltage levels: 24V, 48V, 5V, and 3.3V, powered by two 11.1V (3S) LiPo batteries in series, providing 24V to the main PCB.
From there, 24V powers the drive motors, motor drivers, and the dribbler motor. A voltage booster steps 24V up to 48V to drive the kicker solenoid.
The main PCB also uses Pololu regulators to generate 5V and 3.3V, which power sensors, microcontrollers, cameras, communication modules, compasses, and LEDs. These voltages are also sent to the line sensor PCB to supply its Teensy, odometry sensor, LEDs, and line sensors.","We use four ESCON Module 24/2 servo controllers (2/6 A, 10–24 VDC), one per motor. Each motor connects to its ESCON via a JST-XH cable for reliable control.
The ESCONs are mounted on a custom Motor Driver PCB, which receives 24V from the main PCB and includes fuses and protection diodes for each channel. Control signals are sent from the main microcontroller via JST-XH connectors to manage motor speed and direction","Our robot uses three microcontrollers: two Teensy 4.0 and one Teensy 4.1, chosen for their compact size, reliability, and flexibility.
The first Teensy 4.0, on the line sensor PCB, reads and processes line sensor data. The second Teensy 4.0, on the main PCB, acts as a slave, handling input from sensors and cameras, calculating ball and robot position. The main Teensy 4.1 controls the motors, dribbler, handles communication, and runs the robot’s high-level strategy.","Our ball detection system uses four Sipeed Maix Bit cameras (front, back, left, right) with OV5640 sensors and wide-angle lenses, providing 360° vision. The front camera uses a 170° FPV lens for a wider and clearer forward view.
Mounted at 45° downward angles, the cameras offer optimal field visibility while avoiding overhead interference. They run a custom color blob detection algorithm (in MaixPy, Python-based), which detects the ball and goals, filters out irrelevant objects, and maintains real-time tracking. This setup enables the robot to reliably see the ball from all directions throughout gameplay.","Our custom Line Sensor PCB features 80 ALS19 sensors, 80 LEDs with resistors, and 10 multiplexers to reduce pin usage and increase sensor density. It connects to a slave Teensy 4.0, which reads and processes the analog data to determine line position.
The odometry sensor is also connected to this board for integrated positioning. The PCB is powered by 5V and 3.3V from the main PCB and communicates with the main Teensy 4.1 via UART, sending processed line and position data for use in navigation and strategy.","
Our robot uses a combination of 4 analog LIDARs, a BNO055-based digital compass, 4 cameras, and a line sensor array for accurate navigation.
The LIDARs are mounted on all sides and connected to a slave Teensy 4.0 via analog pins, providing full-range distance data. The compass, placed on the main PCB, sends Yaw data to the main Teensy 4.1. Cameras connect via UART and assist with ball and goal positioning, while the line sensors are read through 10 multiplexers by another slave Teensy 4.0, which sends line position data to the main controller.
For localization, we combine LIDAR and odometry data to determine field position, and use the compass for heading, enabling field-relative movement and strategic positionin","
The kicker is controlled by a custom PCB featuring an IRF3415 N-MOSFET, protection diode, two 2200 µF capacitors, and a 74HC125D level shifter.
24V from the main PCB is boosted to 48V and sent to the kicker PCB. When triggered, the main Teensy 4.1 sends a 3.3V PWM signal, which is shifted to 5V to activate the MOSFET. This allows 48V to flow through the solenoid, firing the kicker. The diode protects against voltage spikes, and the capacitors stabilize power during discharge.","The dribbler motor is a Maxon EC-max 16 (Ø16 mm, 8 W, brushless, with Hall sensors), controlled by an ESCON Module 24/2 driver, the same as for the drive motors. It connects via a 2 mm to 4 mm coupler, and uses custom PAHT-CF gears and steel shafts made in-house. The roller shaft includes cuts for improved silicone bonding.
The roller, molded from A45 silicone, has a spiral surface to center the ball. All 4 mm shafts and bearings are sourced from JLC Mechatronics.
The ESCON controller is mounted on the main PCB and powered by 24V. The motor connects to the main Teensy 4.1 via PWM, Direction, and Enable pins.
Below the roller, an LED and photodiode detect ball possession, supporting strategic decisions during gameplay.","https://drive.google.com/open?id=1Hxvw-QSVJl7ktROrWmJKn8BuF3xtcFc9, https://drive.google.com/open?id=1Xo-MrBaX5wOKpSlTgU065ZRG0fXuY15H, https://drive.google.com/open?id=1xYgwChuEbI-xaTACpzXUOAjDf93KRif5","https://drive.google.com/open?id=1WWTFnR0YBtJd_v8m2-BjrRsmDOgAxajF, https://drive.google.com/open?id=1JhbCT5Xn2Wmo8DCqdrD8rDmGvCrEJlQW, https://drive.google.com/open?id=116rQMRIHZsHa4Lv2_kN53KT5m5Uzx48R, https://drive.google.com/open?id=1NM-xUTDdFlzKh_cfJtTbLrYyPNanPOJo",.,"https://drive.google.com/open?id=1JfAyVSnE0wqn_XUEnCpohjlSOjyPTXxt, https://drive.google.com/open?id=1qqs2BO9nfQPHs3l-v3wwlRB-4qGu8UAL","Each ESCON 24/2 motor driver connects to the main Teensy 4.1 via three pins: PWM, Direction, and Enable. First, the Teensy enables the motors, then controls their speed and direction using PWM and Direction signals.

We limited ESCON output to 0–40% power for better precision and smoother control. Our firmware includes a custom ramp function for gradual acceleration and deceleration, improving stability and reducing drivetrain stress.","We use a 360-degree four-camera system to detect the ball. Each camera runs a custom blob detection algorithm to identify the ball and goals while filtering out objects above the field. When a ball is detected, the camera sends its X/Y coordinates via UART to the slave Teensy 4.0. The Teensy: Parses the data, Identifies which camera sent it, Applies angle correction, Uses an algorithm to estimate the ball’s position, even when seen by one or multiple cameras. This system ensures accurate real-time localization, essential for decision-making and movement.","The robot uses a switch-case structure. When it doesn't have the ball, it enters a searching state, scanning the field with its 360° vision. Once the ball is detected, it navigates toward it. As it approaches, the dribbler is activated to capture the ball efficiently. This ensures a quick transition from detection to possession for responsive gameplay.","Using odometry and LIDAR, the robot always knows its position relative to the field center. When line sensors detect a boundary, it immediately drives toward the center.
In some cases, LIDAR alone is used to measure wall distance—if too close, the robot assumes it's near a line and adjusts.
This simple dual-method approach ensures reliable field containment with minimal sensor dependency.","The robot adapts its goal-scoring based on where it captures the ball:
Center of the field → Straight kick with basic aiming.
Sidelines → Drags the ball toward the opponent’s goal or performs a spin kick if close.
Opponent’s side (goal/front/corners) → Activates dribbler, aligns, and shoots directly.
This flexible logic ensures effective scoring from any field position.","When the ball isn’t visible, the goalie centers itself just outside the penalty area and waits while scanning the field. If the ball is detected, it moves to the closest of five preset positions based on the ball’s angle. While waiting, it uses LIDAR to check for hidden-ball tactics. If an opponent is detected hiding the ball, the goalie quickly moves to block it.
This allows the goalie to defend both reactively and proactively.","Our robots use Seeed XIAO ESP32-C6 modules with ESP-NOW to exchange presence, state, and ball position via UART. Based on this, they dynamically switch roles between goalkeeper and attacker. Ball position data will soon enable one robot to guide the other when the ball is hidden, laying the groundwork for advanced teamwork.","The robots constantly share ball coordinates. Even without direct sight, a robot can use this data to locate the ball. For example, if the goalkeeper’s view is blocked, the attacker can relay the ball’s position so the goalkeeper can reposition and defend effectively.",https://github.com/BorutPatcev/ZG24Robotics,https://drive.google.com/open?id=18KqiPRznsPEOvZ5lV-mKUWpJIURtc3Z_,"Robots: 2000 Euro
Experiments: 1000 Euro
Environment: 500 Euro
1 Euro = 1.17 USD","90% Sponsors, 10%Ourselves",1,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",ivan.perko007@gmail.com,,
7/12/2025 12:41:09,Xelerator,Open League,"Shanghai, China","zsc_hcl@126.com, xiaoli0387@outlook.com","https://x.com/MlnmXelerator,https://www.youtube.com/
@MillenniumXelerator",,"James Zheng: Circuit and Programming
David Li: AI training and Programming
Lieselotte Liu: Modeling and Circuit 
Zishuo Ge: Strategy design",Every single day,A robotics room at school.,2025.2,China Open 2025: Soccer Open League,Instruction of robot design,We communicated through Dingtalk and we use GitHub share our code.,"Claude for coding, Gemini for all situations, GPT4o for other MCP services to imporve effiecency.",https://drive.google.com/open?id=10TSg3sVOxtEYpYy1cPcXqtVbjgdRbjtG,https://drive.google.com/open?id=1J3ujBD1XIMI97TlCsgpaBm2Che5N7-YO,https://drive.google.com/open?id=1hVFvujcJFVgsJvJ8tD0V7PCbCsdqYe8_,https://drive.google.com/open?id=15a1eIWzYlm1TkG_SfreKVY7RO3GDvW7_,https://drive.google.com/open?id=10IJZ_yslMXqdMGRJRuBOafbSkaCc_mr5,https://drive.google.com/open?id=13FwWtrZgxRAZBXQ5Ps7ULz-2tlG1kh11,https://drive.google.com/open?id=17s3aGJgD7FrBcwH6XASAM1L5EOeTwD_n,Lidar,https://drive.google.com/open?id=18RdyWYH4WiphXrcdrS1ZOyZQnMAHZw3h,https://drive.google.com/open?id=10E87f7kU3mwBs9qgChLXLy5behieGEjt,https://drive.google.com/open?id=132BJ_9lmJjXQr41bmRNLh0wumtVrSCg4,https://drive.google.com/open?id=1OST1EXWA7KQ7g4OEU3IfL6CPffGQnaI7,https://drive.google.com/open?id=14PoqaHhVIVWFGYBEVQWAH0JM371X2XGU,https://drive.google.com/open?id=1Rhd_U-Ac8D3W6lqktxGogxMIGnPS9IS8,https://drive.google.com/open?id=1eCktQaoBhE7Pnn7sWzvlw3OR1GyNlgte,We design a 3d model by Shapr3D.,We use 3D printers to build our machines and some customized length cables.,Four omni wheels so that we are able to move at all directions by using the orthogonal decomposition.,Electromagnet only,"Using a wheel to dribble the ball, no other mechanical parts.",,not finished yet,,, Our robot has a 12.6V battery pack that is regulated to 5V for our Raspberry Pi 5 and used directly by the motor drivers.,The STM32 use PWM to control motor torque and hardware timer to read the encoder data.It enables us to use the PID algorithm to have a precise control of motor speed.,"We use a Raspberry Pi 5 8GB and Hailo8 26 TPS for processing the images and detection, which is powered by YOLO-V8, and we use an STM32-F103 as a lower controller for controlling the wheels and determining the robot's attitude.","First, the cameras will capture the images, then we use a self-pretrained model based on the YOLO-V8 model.","We use lidar to get the position of the robot, which is absolute to the whole court. In this case, we don't need line detection for avoiding running into the restricted areas.","We use a nine-axis IMU for get the yaw angle of the robot, and using a TOF lidar to position in the filed.","We use a DC-DC boost module to boost 12V to 48V, which can launch the electromagnet, and a relay acts as a switch for the kicker.","We use a 3D-printed wheel to dribble the ball, using a 1.6kRPM motor to power up the wheel and dribble the ball.",,,"We developed a method that can detect robot chassis on the field,by training a YOLOv8 model with a dataset including more than 20 types of chassis.",https://drive.google.com/open?id=1kJ2m3YOsHBYkkaz-rd7RrZvC0noUwtPG,"By using the encoder installed on the DC motor,AM2857 can read PPS data and use PID algorithms to control motor RPM","We trained a YOLOv8 model with a dataset including golf in several environments,",There's no difference.,"By lidar, they can get the absolute going out of bounds.","When robots are chasing the ball, robots will dribble the ball after catching the ball. Then use kicker.",By recognizing the robot and the ball's latest position.,"Yes, our robots can use a Bluetooth technology to communicate each other and give the ball position for a smarter strategy.","The robot detection, with the help of this, our robots can be much smarter than before, and have a greater chance of winning the game.",https://github.com/423Tech/Xel-RCJ2025Open.git,https://drive.google.com/open?id=1pdD7NVUWSzhphPuCIYqVlD3XUUZtp2Ow,"Robots:314 Euro each, Experiments: 100 Euro, Environment: 300 Euro","50% school,50% parents",4,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",zhengjames0423@gmail.com,,
7/12/2025 13:09:27,ETC autoPrikratki,Lightweight League,Croatia,etcautoprikratkicroteam@gmail.com,https://www.instagram.com/etc_autoprikratki/,https://drive.google.com/open?id=1uLtJWgc0mTHB4kr8Jzqho7qqEg6Rq394,"Our four-member team includes Juraj (captain, coding), Franko (mechanical design, assembly), Vinka (electronics, PCB, coding), and Duje (documentation, soldering, assembly).","We worked every Saturday all day and Mondays for 90 minutes, with extra sessions as needed — continuing until the robot worked as intended.","We worked at school, at our mentor’s home, and at our own homes.",In september.,"Slovakian Open 2024. - Lightweight League
Croatian Open 2024. - Lightweight League
European Championship 2024. - Lightweight League
World Championship 2024. - Lightweight League
Slovakian Open 2025. - Lightweight League
Croatian Open 2025. - Lightweight League
European Championship 2025. - Lightweight League",Our mentor secured sponsorships and purchased the components we needed for our robots. He was mainly focused in organising us to work as a Team.,"We primarily communicate through a WhatsApp group, which we use for everything. We also use Google Drive for sharing files and GitHub for collaborating on code.","We mainly use ChatGPT for code debugging and idea generation, as well as for grammar checks in our documentation.",https://drive.google.com/open?id=1b2W_1bG4L_2dQWdNt0lkFGNpB_dAocsn,https://drive.google.com/open?id=1i_CunLMN7zdEzn3v9gT-yR_HqFbRDqXB,https://drive.google.com/open?id=134krtEXye9Umba_je_mKTOHj7vxLur9o,https://drive.google.com/open?id=1elJitUHSOHpa-mp1xZfP5F9lnnLatRyY,https://drive.google.com/open?id=1uaWbinevUFeLUtRflY9HFGL9r6O3GXHs,https://drive.google.com/open?id=1_SjKxzZ49xvWv12CNJKACWdxynEleD-u,https://drive.google.com/open?id=1_9A2Ik07vcck6ujBi-bpBJhGSGgN-7u7,"We use a SparkFun odometry sensor and typically start the robot near the center of the field. As the robot moves while tracking the ball, it continuously updates its position using odometry. Additionally, we developed our own custom line sensor system — whenever any of the sensors detect the field line, the robot is programmed to return toward the origin point at position (0, 0).",https://drive.google.com/open?id=1gK18ahFkcm3yWzX1KRVsbR_JKjNpOeLN,https://drive.google.com/open?id=19eG1nZgnKe3zTKZ8aP7JMIC3UdqD76Av,https://drive.google.com/open?id=1eDuZi6KudBQKSa-nu8XFtNMLl4W-gGwq,https://drive.google.com/open?id=18P5VTY4DpInmnB7kBYidliRj1vNPpKxk,https://drive.google.com/open?id=1rEAOSQBoHAdzJ--nfy61YQ_ly23-IjEl,https://drive.google.com/open?id=1vyvokH0DwVt-KiXUdCQB15iud0J03K6Q,https://drive.google.com/open?id=1J4oWgnrF2ARVw5p-_o5MPG5PpXZPI575,"This year, we used an octagonal chassis to stand out from typical circular designs. Components like motors, drivers, and the kicker were placed on the bottom plate for a compact layout. PLA side walls reduced weight and allowed camera mounting. We placed the battery in the center for balance and added the kicker board at the front for easier assembly.","Most of the robot's parts were 3D printed at our school, while screws and nuts were bought locally. PCBs were ordered from JLCPCB, and custom polyurethane wheel treads were made by Gumiimpex. The biggest redesigns this year were the improved dual-layer wheels and updated plastic parts. We also separated the power supply from the main board, created a dedicated kicker PCB, and added a camera for better aiming.","We used four Joinmax JMP-BE 3561 motors and designed custom wheels to match, as off-the-shelf options didn’t meet our performance needs. After testing several prototypes, we found that roller spacing affected drift — wider spacing gave better grip, while narrower spacing caused more sliding. Each wheel has five parts, including 14 polyurethane rollers on 3D-printed rims, spinning on custom metal axles. A rear section reduces weight, and both halves are aligned with a 3D-printed spacer to prevent interference between rollers.","Last year, we used a SparkFun kicker board with a single transistor, but it burned out after two days at the world championship and damaged our robot. This year, we kept the same solenoid but designed a more robust custom PCB with a stronger MOSFET. To trigger it reliably, we added a level shifter to convert the signal from the Teensy to the required 5V logic level.","We developed a dribbler and reduced the robot’s weight using a PLA Aero chassis, which held up well during the European championship. However, due to the fast-paced nature of the Soccer Lightweight league and frequent collisions, we found the dribbler impractical. After testing 1-on-1 matches, we concluded the robot performs better without it.",https://github.com/ETCautoPrikratkiCROTeam/ETC_autoPrikratki,"Our dual-layer wheels with polyurethane rollers were this year’s most valuable upgrade, greatly improving movement smoothness and responsiveness. We also developed a new 48-sensor line sensor in a Y-formation, which boosted line detection performance by about 90% over last year’s design. Additionally, our fully enclosed and reinforced chassis proved highly durable, withstanding over three competitions and more than 60 high-speed matches.","https://drive.google.com/open?id=1-P1ufBsm_Ix59G3Rem3XeNKWeOKcvr7q, https://drive.google.com/open?id=1rf3ku-0jKuT3PNHAvvmuB3ZR00N7-x3t",https://drive.google.com/open?id=16rvNPo76h4mQHu7pSOxVSemMzQHtsJAw,"Our robot operates on 12V, 5V, and 3.3V and supports analog/digital, I2C, UART, and PWM communication. A 12V battery powers the motors, kicker, and power supply PCB, which steps down to 5V and 3.3V for other components. The Teensy 4.1 and ESP32 run on 5V, while the BNO055 IMU, ball sensor, and light barrier use 3.3V. The camera runs on 5V and communicates via UART; I2C connects the BNO055 and SparkFun OTOS. The line PCB, running on 3.3V, has 48 reflectance sensors with SMD LEDs and uses three analog multiplexers. To trigger the kicker, a 3.3V signal is boosted to 5V to activate a MOSFET, allowing 12V to power the solenoid. Four JoinMax JMP-BE-3561 motors are each controlled via PWM using MRMS ML-R motor drivers.","To drive the motors, we use locally purchased ML-R 1x50A MRMS motor drivers, which are connected directly to the 12.5V battery. Each motor is wired to its own motor driver. From the driver, we use three control pins: a PWM pin to manage motor speed, a DIR pin to set the motor's rotation direction, and an SLP (sleep) pin that enables or disables the motor. The SLP pin is wired to a physical switch, allowing us to manually disable the motors for safety or debugging purposes, without needing to modify the code.","We use a Teensy 4.1 and an ESP32 XIAO C6. The Teensy was chosen for its strong processing power, many I/O pins, and proven reliability, making it ideal for our compact robot. The ESP32 XIAO C6 supports ESP-NOW, which we use for robot-to-robot communication, allowing us to coordinate strategies and improve team performance on the field.","Our ball sensor connects to the Teensy 4.1 using two analog signals for distance and angle, plus a 3.3V power line. It provides continuous analog output for real-time ball tracking. For goal detection, we use an OpenMV H7 Plus camera connected via UART, using the find_blob() function to efficiently detect and track the colored goal marker.","We designed a custom line sensor with 48 reflectance sensors arranged in a Y-shaped layout (12 per side), connected through three multiplexers to minimize analog pin usage. Each sensor has a red LED and a resistor. The multiplexers are controlled via 4 digital pins using binary combinations to cycle through all channels. Sensors read analog values based on surface reflectivity. Red LEDs were chosen for their strong contrast with the green field and white lines, improving detection accuracy.","We use an odometry sensor to accurately track the robot's position, a BNO055 compass to determine its orientation, and a camera to detect the position of the goal.","Last year, we used a SparkFun kicker board with a single transistor, but it burned out after two days at the world championship and damaged our robot. This year, we kept the same solenoid but built a stronger custom kicker PCB with a more durable MOSFET. To trigger it, we used a level shifter to convert the Teensy's 3.3V signal to the required 5V.","Our dribbler uses one ML-R motor driver and operates the same way as a regular motor — it simply rotates. Inside the system, we designed a 45:10 gear ratio to ensure optimal rotation speed. We also custom-ordered our own polyurethane rollers, manufactured based on our mold design. We dont use dribbler in games, but we developed one.",https://drive.google.com/open?id=1L-nRjtqDyCfDk9E_tU3TgUh1mbAKP-_d,"https://drive.google.com/open?id=1XMm-xQ63Wm50zK9gziVObqZDO4zcIvab, https://drive.google.com/open?id=1eMn-GgClX3pKNK6TELQbVWfK7ADUpYQB, https://drive.google.com/open?id=19b2BQgaxb2B_fWOdYv3gOy765Yiehr7l, https://drive.google.com/open?id=1TE2BqyCFGc-fcZ3sDCMo4d82FTg8FcLi, https://drive.google.com/open?id=1IK1ptSC3tXkJIjHMLNTiF1bpZgHFgg0f","We are especially proud of our custom Kicker PCB, as we finally succeeded in creating a board capable of withstanding the demands of competition. This was achieved by using a more durable MOSFET transistor and adding a Zener diode for reverse voltage protection.
We’re also proud of our Line Sensor PCB, which features 48 reflectance sensors connected through 3 multiplexers. We chose to arrange the sensors in a Y-pattern on each of the four sides of the robot. Additionally, we used SMD resistors instead of standard ones to reduce the overall weight of the PCB.","https://drive.google.com/open?id=1TtXwsD-7_vRS0cSSfgXMmNq9O0st_ZAm, https://drive.google.com/open?id=1ZKg8eTOYGqi2uO5PgP_vKyANDwhFI5aW, https://drive.google.com/open?id=1-x2SZr4bNPjSemJXI1YU_B-wXdBYIG6i, https://drive.google.com/open?id=110kJF5PoSP5bS7NFi7YXgOMjJg1Y4_wE","Each of our four motor drivers uses three signal pins: PWM for speed, DIR for direction, and SLP (sleep), which disables the motor when not held at 3.3V. The SLP pin is connected to 3.3V and a push-button, allowing us to manually disable motors during debugging.
We created a go(...) function that calculates each motor’s speed and rotation based on movement speed (0–100%), movement angle (0°–360°), rotation (for compass correction), and a speed limit. The angle is converted into sine and cosine values to determine motor contributions. Motor speeds combine linear and rotational components and are normalized to stay within the defined limit.","The ball sensor outputs analog values ranging from 0 to 1023, which we map to angles from 0° to 360°. To read this data, we simply connect the sensor's two analog output lines to the Teensy 4.1 board.","To approach the ball, our robot reads the angle of the ball and adds an offset of +90° to orbit around it, allowing the robot to face the ball while circling it. However, if the ball is far away, we also read the distance value from the sensor. Based on that distance, the +90° offset is dynamically reduced, so the robot moves more directly toward the ball when it’s farther away and starts orbiting only when it's closer.","We developed an algorithm using our odometry sensor that keeps the robot from going out of bounds. Whenever any of the line sensors detect the field line, the robot calculates the angle back toward the center of the field using the formula: Angle equals arctangent of (x_target minus x_current, y_target minus y_current), multiplied by pi divided by 180. This computed angle is then used to guide the robot smoothly back toward the center, ensuring it stays within the playing area during the match.","Our robot keeps a constant heading toward the opponent’s goal. It uses the ball sensor to orbit the ball and approach it from the front. If the ball enters the light barrier, the robot uses the camera to align with the goal and kicks. If the ball is near but outside the barrier, it overshoots slightly to strike it toward the goal with a side wheel.","For defense, our robot stays positioned on the line between the front and back line sensors, moving left or right to follow the ball while always facing the center of our goal. If the ball is directly in front, it moves forward and kicks it away from the danger zone. If the robot doesn’t receive an ESP32 (ESP-NOW) signal that its teammate is still active, it switches to the attacking phase and starts approaching the ball with the goal of scoring.","Yes, our robots communicate using the ESP32 XIAO C6 via the ESP-NOW protocol. For example, if the striker goes out of bounds, the defender switches to attack to keep the game flowing. We tested dynamic role-switching, but it didn’t work well since one robot's camera faces forward and the other backward, making goal detection unreliable. In the future, we plan to add a second or 360-degree camera to enable seamless role switching.","As an innovation, we use an odometry sensor to track the robot’s position and developed an algorithm that pulls the robot toward the center when a line is detected, reducing out-of-bounds errors and enabling higher speeds.
We also introduced an overshooting strategy, tested at the European competition, to reach the ball faster. For the World Championship, we prepared two strategies: one with overshooting for quick interceptions, and another where the robot approaches the ball directly and aligns with the goal before shooting.",https://github.com/ETCautoPrikratkiCROTeam/ETC_autoPrikratki,https://drive.google.com/open?id=1I1jxhI1-awF15fbubzEFaam6GkeufbMqJ3UiT_4J3us,"Robots (both): 1557.54 Euro 
Experiments (without robots): around 300 Euro mostly burned teensy and motor drivers.
Everything was provided by the school, robots, experiments and environment. We don't know how much school paid for the environment.","Material and robots are 100% from school.
Sponsors funded our travel.",5,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",jura.kolaric0@gmail.com,,
7/12/2025 14:29:48,VVS Ballers,Lightweight League,India ,"kushals@vasantvalley.edu.in, shlokk@vasantvalley.edu.in, akshajg@vasantvalley.edu.in, akshaj.gupta28@gmail.com",N/A,,"Kushal Sachdeva: Innovator and Mechanical Engineer
Shlok Karthik:  Robot Designer and Mechanical Engineer
Akshaj Gupta: Lead Programmer","We met for 4 to 5 hours every day. On weekdays we worked in our school’s robotics room, and on weekends we met at our mentor’s academy for longer build and testing sessions.","We primarily met at our school during weekdays and used our mentor’s robotics lab during weekends. Both spaces provided access to LEGO kits, practice fields, tools, and a quiet environment for collaboration.","We began working on this year’s robots in November 2024. We started with research and brainstorming, then moved into building and testing soon after.","Robocup Junior Regionals North India 2022: Soccer Lightweight League
Robocup Junior Regionals North India 2023: Soccer Lightweight League
Robocup Junior  Regionals North India 2024: Soccer Lightweight League
Roboup Junior Nationals India 2023: Soccer Lightweight League
Roboup Junior Nationals India 2024: Soccer Lightweight League
","Our mentor played a crucial role in helping us integrate and debug our sensors, especially the IR Seeker and compass. He helped us purchase and configure a sensor multiplexer and ensured that our readings were accurate and stable. He also assisted in connecting our communication modules to meet the 2025 RoboCup requirements and supported us with physical robot adjustments and late-night coding sessions. Most importantly, he provided constant encouragement, shared his experience from past competitions, and helped guide our thinking during design discussions.","We communicated through a dedicated WhatsApp group where we shared updates, photos, videos, and tasks. We also had a second group that included our parents and mentor for logistical planning such as travel and documentation. For project management, we used  GitHub to collaborate on code and keep track of versions. Even when we couldn't meet in person, we ensured progress by sharing our daily work digitally and supporting each other through messages and calls.","We used ChatGPT’s deep research model to better understand our sensors’ functions and troubleshoot sensor issues. It helped us understand how to interpret IR and compass readings, avoid interference, and write more accurate movement algorithms. This helped us accelerate our learning and apply more advanced logic than we initially planned.",https://drive.google.com/open?id=1H9I9AvuAE9WJWjpyqZJpZFkDo0OIB6W9,https://drive.google.com/open?id=1TB-hl89HZEspUYmQ01xQHrG3HBnHWabj,https://drive.google.com/open?id=1dwmPjDoHOQx8f5HkCunWzPvRoYXPalEY,https://drive.google.com/open?id=1G8qN-HeuFpzKJFYzx935aX9x3eeEGNIR,https://drive.google.com/open?id=1ThE5PfB1V2ipNe77JHQWEPJpupdNtcoQ,https://drive.google.com/open?id=1Qjijr8eFqoe6utz7jomrWwY6szZtBAoI,https://drive.google.com/open?id=18JJOUFAkZWz5scrsJ30nBCKN7O5bMXvx,"We use a combination of an infrared (IR) seeker sensor and a compass sensor to determine our robot’s position and orientation on the field. The IR seeker divides the robot’s field of view into zones, numbered from 1 to 9 (with 5 being directly ahead and 0 being the blind zone). This allows us to detect the relative angle of the ball. In addition, we use a digital compass sensor that provides the robot’s heading relative to magnetic north. We calibrate the compass before each match so that the robot knows which direction corresponds to the opponent’s goal. The robot starts each match by facing forward in the calibrated direction. Using the heading from the compass and the zone from the IR seeker, the robot calculates a target direction to move. Our attacker uses this information to pivot and drive holonomically toward the ball, while constantly adjusting its orientation. The defender, which operates near our penalty area, uses the IR zone to move laterally (forward and backward) along the goal line, staying between the ball and our goal. Both robots use omnidirectional wheels that allow them to move in any direction without turning their body, enabling smooth and fast directional adjustments based on sensor feedback.",https://drive.google.com/open?id=1cJqVid3zOSCyc7f8NsYnxNh_kLQdVPtf,https://drive.google.com/open?id=1pQa6oWpXnxJSO0zdpoCfVBHoUat2auEz,https://drive.google.com/open?id=1nHoc32r7rsvh5f56P72Xe12Zd3HVS-9O,https://drive.google.com/open?id=1xoJdw2LC8LL50ODY9MOM6wgWRMtYzDsx,https://drive.google.com/open?id=1M6xK_YevBMk46UHx8u_CySLh1yF4BWyC,https://drive.google.com/open?id=12xjz7V8E_cImYXsGy4oHJEpE_f4quzRa,https://drive.google.com/open?id=1b7yt7pUa84OdbKssLqd1WcsXspvseOue,"We designed our robots through a process of group discussion, hands-on testing, and iteration using LEGO Mindstorms EV3 components. Although we considered advanced platforms like Raspberry Pi and custom PCBs at the beginning of the season, we ultimately decided to stick with EV3 because it was more time-efficient, it was also familiar to our team. We did not use any CAD software to design 3D models, as our design process was primarily physical. We built multiple prototypes using LEGO Technic parts and adjusted them based on how well they performed in real tests. For each major decision, such as motor placement or sensor positioning, we debated the pros and cons as a team and often voted on which configuration to pursue. For example, when designing the attacker robot, we discussed how to fit all four motors into a compact frame that still allowed space for sensors and cabling. We created a compact motor box using layered LEGO parts and gears to align with the omni-wheels. On the defender, we prioritized torque and balance, using three motors for movement and one additional motor to control the kicker mechanism. We continually refined both designs through testing on the field, improving things like weight distribution and gear ratios until we achieved the speed and stability we wanted.","Our robots were constructed entirely using LEGO EV3 and LEGO Technic parts, which we assembled by hand. We used the LEGO Mindstorms kit for structural elements, omni-wheels, sensors, and motors. We also used HiTechnic third-party sensors, such as the IR seeker and compass, which were compatible with the EV3 system. The entire build process was physical and modular—after creating a basic version of the robot, we tested its movement and behavior on the field and made iterative improvements. One example is the position of the IR seeker sensor: initially, we mounted it too low, and it had limited visibility of the ball. After testing, we moved it higher and angled it slightly downward, which improved its detection consistency. Similarly, for the defender, we added structural reinforcements to the kicker housing after noticing it flexed under repeated impacts. All changes were made manually, based on field performance, without outsourcing any manufacturing or using advanced tools like 3D printers or laser cutters.","We used four EV3 large motors in the attacker robot and four in the defender robot. In the attacker, all four motors are used for movement: each motor drives one of the four omni-directional wheels. This configuration gives the attacker high maneuverability and speed, which are critical for chasing the ball across the field. In the defender, we used three motors for movement. The three drive motors give the defender good torque and lateral control as it moves along the penalty box. We found that this distribution of motors allowed us to balance speed, control, and functionality for both roles. All motors are standard LEGO EV3 large motors (part number 45502), which were chosen for their compatibility, reliability, and sufficient torque for our robots' weight and tasks.","Our defender robot features a unique unorthodox design which uses elastic potential energy stored in a rubber band. This system is lightweight, effective, and simple to reset after each use. We chose this design because it does not require complex electronics or additional sensors and keeps the overall weight of the robot within the lightweight league limit. During testing, we experimented with different rubber bands to achieve the right balance between power and control, and we reinforced the surrounding structure using LEGO beams to ensure durability. The kicker helps our defender quickly clear the ball from the penalty area without needing a dribbler or additional force.",Our robots do not have a dribbler system.,N/A,"One of the most effective mechanical innovations on our robots is the motor box structure used in the attacker. This design allows us to stack and align four motors in a compact space, keeping the overall footprint low while enabling omni-directional movement. By optimizing the positioning of gears and wheel mounts, we were able to reduce chassis height and improve balance. Another innovation is the elastic rubber band-based kicker used in the defender. This solution allows us to deliver fast, forceful kicks using stored mechanical energy, rather than relying on heavy, slow mechanical arms or additional electronics. These systems were developed through continuous iteration and problem-solving based on performance during test matches.","https://drive.google.com/open?id=1VpShBsx_oDbCfAbvadbedJZfSuxVlEO-, https://drive.google.com/open?id=1r3jdWd-5bQZdTyBWVPtv_RgEENoRpGSY, https://drive.google.com/open?id=14rOrTwVJFbI7s0YDuRCI0PSKfDKFlava, https://drive.google.com/open?id=1pp2kE9-pbgAvBeBlCkthKpUOKC3gBwPy, https://drive.google.com/open?id=1e8xYfYaBOApwasy68lyEw2nQaqepxtS7",https://drive.google.com/open?id=1F9xYYX4hCENweWmurt8s-RjUXs3SJRBS,"We use the official LEGO EV3 rechargeable battery pack, which supplies approximately 9V to the EV3 Brick. The brick then internally regulates voltage to provide appropriate power to sensors and motors. There are no external voltage regulators or converters, as the EV3 platform includes built-in power management. The battery is compact and fits neatly into the base of each robot, keeping the center of gravity low and consistent.","All motors are connected directly to the EV3 Intelligent Brick’s motor ports. The EV3 Brick sends power and pulse-width modulation (PWM) signals to each motor through its internal motor driver circuits. No additional circuitry is required. We use the LEGO EV3 software to set motor speed, direction, and duration in code, which the brick interprets and executes.","We use the LEGO EV3 Intelligent Brick as our main and only microcontroller. It was chosen for its robust compatibility with LEGO motors and sensors, ease of programming, and past experience within our team. It allows us to focus more on optimizing performance and less on debugging hardware connections or programming syntax. Its built-in display, ports, and integrated motor control system make it an all-in-one solution suitable for rapid testing and iteration.","We use the HiTechnic IR Seeker V2 sensor to detect the infrared signals emitted by the RoboCup soccer ball. This sensor is designed with five internal infrared detectors arranged in a circular pattern, each covering a different directional zone. The output of the sensor is a zone number ranging from 1 to 9, indicating the angle at which the ball is located relative to the robot. Zone 5 represents the forward direction, with zones 1 to 4 indicating positions to the left and zones 6 to 9 to the right. Zone 0 is used when the ball is not detected. The sensor also provides a signal strength reading, which we use to estimate how close the ball is. These readings are processed by the EV3 Brick, allowing the robot to turn toward and drive in the direction of the ball. The sensor is positioned on the front of the robot and angled slightly downward to maximize its field of view and reduce interference from ambient light. This system allows both the attacker and defender to identify the ball’s location and make real-time directional adjustments.","Instead of relying on traditional white-line sensors, our robots use a combination of ultrasonic and infrared proximity sensors to detect the boundaries of the field. The ultrasonic sensors, mounted at the front and back of each robot, measure the distance to the nearest wall. As the robot approaches a wall, the sensor reading decreases. Our code responds to this by proportionally reducing the robot’s speed to prevent collisions or going out of bounds. We also tested infrared proximity sensors mounted on the sides of the robots to detect immediate obstacles or side boundaries, but found that the front and back ultrasonic sensors were sufficient for most scenarios. This approach reduces jerk near the field edges, allows smoother motion control, and avoids the complications of sensor drift on white surfaces. The system works reliably under different lighting conditions and has helped us avoid penalties during matches.","We use three primary sensors for navigation: the HiTechnic compass sensor, the HiTechnic IR Seeker V2, and EV3 ultrasonic sensors. The compass sensor provides the robot’s heading in degrees (0–360) relative to magnetic north. The sensor autocalibrates  before each match to ensure that 0 degrees aligns with the direction of the opponent’s goal. The compass helps the robot stay oriented correctly on the field and ensures consistent behavior regardless of the robot’s starting position. The IR Seeker identifies the ball’s direction and is essential for positioning the robot relative to the game object. The ultrasonic sensors, mounted at the front and rear of the robot, help determine the robot’s proximity to field boundaries. All sensors are connected directly to the LEGO EV3 Brick using standard sensor ports. By combining data from all these sensors, the robot can navigate the field, track the ball, avoid leaving the play area, and stay correctly aligned at all times.","Our kicker is entirely mechanical and does not rely on an electronic triggering circuit. It consists of a rubber band tensioned. the rubber band pushes the ball forward when it comes towards it. This elastic-powered system allows the robot to kick the ball with significant force. Because the system relies on mechanical energy rather than electrical actuation, it is both lightweight and consistent in performance.",We do not use a dribbler system in our robot.,,,"We are especially proud of our ultrasonic sensor-based proportional slowdown system for boundary detection. Instead of triggering abrupt stops or turns, the robot scales down its speed as it approaches the wall. This makes the movement smoother and allows more accurate sensing. It also reduces the risk of going out of bounds and makes the robot more stable under pressure. Implementing this control logic using the limited processing capabilities of the EV3 Brick was a major accomplishment for our team.","https://drive.google.com/open?id=1spLH_bfNt1IKwAkxoAP2eh3ys9nVAPGV, https://drive.google.com/open?id=1GoEMmaKfvt4uVy8AspuE-xbdRp9zoKQg, https://drive.google.com/open?id=1Qzlu0OSE8UloieAPp4vu0ZXgoo3ZQYRA","The LEGO EV3 Intelligent Brick controls all motors using built-in programming blocks. We use the graphical EV3 software to set motor speed, direction, duration, and rotation. For example, if the robot needs to rotate toward the ball, we set the left and right drive motors to opposite speeds until the IR zone reading centers at 5. When driving holonomically, each wheel receives a different speed value to enable lateral or diagonal movement. The processor continuously reads sensor values, calculates the required motor response, and sends control signals to the motors in real time. We use loops and conditional logic to handle continuous decision-making during gameplay, and the EV3 Brick interprets all commands without the need for external circuits.","We use the HiTechnic IR Seeker V2 to detect the ball’s location. The sensor outputs a directional zone (1–9) and a signal strength value, both of which are read by the EV3 Brick using I²C communication. Zone 5 indicates that the ball is directly in front of the robot, while zones 1–4 represent angles to the left and zones 6–9 represent angles to the right. Zone 0 indicates that the ball is not detected. These values are read in each loop cycle and used to determine whether the robot should rotate, drive forward, or make lateral adjustments. The attacker uses this information to turn toward the ball and drive in a straight or angled path. The defender uses the same data but interprets it differently to stay aligned along the goal area.","Yes, each robot uses a different algorithm tailored to its role. The attacker uses a triangulation-based pursuit algorithm. It reads the IR zone value to determine the ball’s angle and uses the compass to maintain orientation. If the ball is detected to the left or right, the robot rotates holonomically in that direction while still facing forward. As the ball approaches zone 5, the attacker accelerates forward, slows down slightly near the ball, and attempts to push it directly toward the goal. The defender, on the other hand, does not rotate as much. It starts aligned sideways and moves forward or backward along the penalty box. Its algorithm constantly checks the IR zone and signal strength. If the ball enters a defined zone of danger (strong signal in zone 4, 5, or 6), the defender advances slightly to intercept and activate the kicker if needed. These complementary algorithms allow both robots to work independently but in sync during gameplay.","Our robots use ultrasonic distance sensors instead of line sensors to avoid going out of bounds. Each robot has front and rear ultrasonic sensors that continuously measure the distance to nearby walls. When the robot approaches the wall, the sensor reading drops below a threshold (e.g., 30 cm), triggering a proportional response in our code. The robot reduces speed gradually as it nears the wall, then either stops or reverses direction. This gradual slowdown helps reduce abrupt movement, minimizes the chance of sensor misreading, and improves overall stability. We chose this approach because ultrasonic sensors are less sensitive to ambient lighting conditions and do not rely on contrast between the white boundary lines and the playing surface. It also allows smoother, more reliable boundary control in real match conditions.","Our attacker does not use a kicker or dribbler, so the algorithm relies on clean pursuit and momentum. The robot tracks the ball using the IR seeker, aligns toward the goal using the compass sensor, and drives with increasing speed. Once the ball is pushed past the halfway point and near the opponent’s penalty box, the robot accelerates sharply and allows the ball’s momentum to carry it into the goal. The idea is to maintain orientation, avoid interference, and use the robot’s own speed as a driving force. The defender can also contribute by kicking the ball from our half to the opponent’s side using the elastic-powered kicker, especially during counterattacks.","Our defender follows a simple but effective algorithm. It starts positioned sideways along our penalty box and moves laterally along the line. When the IR sensor detects the ball approaching from zone 4, 5, or 6 with strong signal strength, the robot moves slightly forward to intercept. If the ball enters the capture zone, the robot activates the rubber band kicker using a timed motor rotation to clear the ball. If no ball is detected, the robot remains centered. The use of a compass allows the robot to maintain consistent alignment, while the ultrasonic sensor ensures it does not move beyond the allowed area. This reactive but stable behavior enables the defender to effectively block and clear incoming threats.","No, our robots do not use any form of wireless or inter-robot communication. Each robot is programmed to fulfill a distinct role and operates autonomously based on its own sensor inputs. However, the behaviors are coordinated during design so that the attacker and defender do not interfere with each other. The attacker always focuses on ball pursuit and scoring, while the defender remains within the penalty area. This separation of roles has proven to be effective and avoids any risk of collisions or command conflicts.","Our most innovative algorithm is the one that combines compass and IR seeker data to create a dynamic triangulation system. By treating the compass as a fixed heading and the IR zone as a relative direction, we calculate precise movement vectors that allow the robot to approach the ball from optimal angles. We also implemented smoothing to reduce jitter when the ball hovers between two zones. These strategies make our robot faster and more stable in tracking the ball, even during complex plays.",https://github.com/Akshaj-Gupta/ev3-inernat2025-brazil.git,https://drive.google.com/open?id=1Z6dYU2flA_F0CtbMPMIJH1wBlCQ4SZ1G,"Robots (final components currently inside both robots): approximately £1,000
Includes the EV3 Bricks, motors, omni-wheels, sensors, LEGO Technic structural parts, and wiring.

Experiments (failed prototypes, spare parts, replacements): approximately £500
Includes trial chassis, alternate kicker prototypes, damaged motors, and sensor.

Environment (practice field, IR ball, carpet, tools, etc.): approximately £200
Covers cost of building a full-size training field, purchasing an IR ball, and basic testing equipment.",100% Parents ,4,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",kushals@vasantvalley.edu.in,,
7/12/2025 14:44:31,IKARO,Lightweight League,Italy,paolo.torda@gmail.com,https://www.instagram.com/ikaro_robotics/,https://drive.google.com/open?id=1JdYeySTD63AxsJkSq5bp9OIVdnOFcYxN,"Lorenzo Addario : Camera software developer
Francesco D'angelo : Electronics and PCB Designer | Mechanical Developer
Andrea Perrina :  software developer",during year,"During the school year, once a week for 3 hours; in the final period, every day.","October 2024 for hardware, December for software","
Italian Championship (Verbania) 2024: Lightweight League
Rome cup 2024 (Rome): Lightweight League 
Italian Championship (Pescara) 2025: Lightweight League
Rome cup 2025 (Rome): Lightweight League 
World Championship 2024 (Eindhoven): Lightweight League","During the first year (2023), they received support with PCB design and software configuration. Over time, they became capable of developing the robot on their own, with the teacher providing only external supervision. In late 2024 the robot was made from their works.","The majority of communication occurs in person in the laboratory, with additional use of WhatsApp, Gmail, and Google Drive for coordination and file sharing","actually there is only a limited use of AI, for software debugging and problem solving.",https://drive.google.com/open?id=1sivJT3Vgm3aHT7Y8sOiywQfNacfzlXGL,https://drive.google.com/open?id=17cigWgQ4JfqH77k8pV_3IukjHmhR9TVr,https://drive.google.com/open?id=1fvecQoDRko_BKEjoc1Tl3pDZk4_3vQ5Y,https://drive.google.com/open?id=1qhQF85OvwLI-Pe12oOJssWwnbqcmJody,https://drive.google.com/open?id=17mxUJozYTlSH51UH0c7FDyacXcu20Zkb,https://drive.google.com/open?id=1WBPfbSyqtqKyWKuHOiPeBLzIX2Nzuycj,https://drive.google.com/open?id=1awoScIbeyJVeT1CKP0alTEVXoxpTdPci,"Our robot is equipped with a camera and a conical mirror to see 360°.We use colour recognition to identify 
the angle of the two doors. 
We need this in order to decide the strategy of the game and to direct the robot towards the opponent's 
goal when attacking. 
Knowing the dimensions of the field and the angles at which the goals are located, we can determine the 
position in the field. 
For the robot, the centre of the field is the point (0,0), so the two goals have the coordinates (0, 200) and 
(0, -200). Using the chamber to find the angles between the goals and the robot (α) and (β), we find the 
equations of the two straight lines passing through the centre of the goal and the robot. The intersection of 
the two lines gives us the coordinates in the robot's field. This feature is actualy (12/7/2025)work in 
progress. ",https://drive.google.com/open?id=1dIeJl7uYPa-4Tb94Dy-PPsrxph87DEhd,https://drive.google.com/open?id=10HPlxxLPVkIeXWgvkVuVfDawKL4_5alY,https://drive.google.com/open?id=1uI5ykehdJkmDYa9y5V9l59GqTPnj_2rb,https://drive.google.com/open?id=1NqbrjR_U6GNzi5dS0yFGgexWCG48Jc3l,https://drive.google.com/open?id=1Ygr4EDCii3OXfoYaH7ykh-1tmPqF523m,https://drive.google.com/open?id=1X9X8mUQ4M4GpJW9a-bsKWLT3uwCEhOts,https://drive.google.com/open?id=1oBTrJeh_ASoO9AyJSaEO9BxPsGrzOygR,"For design the mechanical parts we use Autodesk fusion.
For the realization was used 3D printer and cnc milling machine.
Our robots have been equipped with two bases, the lower base is the one on which the 4 motors, kicker, line sensors, and boost voltage system are attached. 
The upper base, on the other hand, is used to support the main PCB. 
These two bases are designed to be as light as possible, with many holes to save weight but 
without hurting the strength. Our robots have been equipped with two bases, the lower base is the one on which the 4 motors, kicker, line sensors, and boost voltage system are attached. 
The upper base, on the other hand, is used to support the main PC. 
As the material used, we chose vetronite because it is the material with the highest quality/price value. 
Omni-Wheels :
This year we decided to differentiate the wheels                                
on the robots, the defender needs more fluidity 
and stability in lateral movements, the striker 
needs speed to get to the ball quickly and 
braking to avoid going outside the lines. 
After several tests, we realized that braking is 
more suited to silicone cylinders and fluidity of 
movement to rubber rings. 
The silicone used is a two-component from two 
different densities that we poured and dried in 
“roll” shaped molds. It has a low enough density 
to have a very good grip but high enough to not 
wear out too much while playing. 
Improvements : 
Introduction of the dribbler mechanich.
","PCB was realizad from one of our sponsor (FAE Technology, Bergamo (IT)), we produce the schematich and the pcb design  with Eagle / Autodesk Fusion
All the plastic and rubber parts was made from us in our laboratory. The mirror was made with the help of another teacher with a Proxxon lathe.","The wheels were designed using Autodesk Fusion, with the exception of the hubs, which were purchased from Pololu. The inner part is made of carbon-fiber-reinforced PLA and consists of two parts clamped together using the same screws as the hub. The rings and the tires were made using two-component silicone. First, we 3D-printed the molds in PLA, then poured the silicone into them. The choice of silicone type was inspired by a previous Italian team from another school. The color of the silicone also indicates the compound: white is softer but wears out quickly, while green is more durable and, for us, optimal.","The kicker we use is a commercial solenoid, we design with the 3d printer the support.The kicker uses a solenoid mechanism. The voltage is boosted to approximately 40V to charge a capacitor, and the kick is activated through a relay.",we don't have a dribbler,https://drive.google.com/drive/folders/1Sr0x7_nmIDnWCsggzRnweyczGPE1vKvz?usp=sharing,"""The mechanical parts we are most satisfied with are the omnidirectional wheels. We studied two different types: one with rings and one with cylinders. The ring-based wheel provides smoother and more precise movement, while the cylinder-based version offers better grip. Their use depends on the type of carpet; in general, the more precise wheel is better suited for the goalkeeper, while the one with more grip is more appropriate for the attacker.","https://drive.google.com/open?id=1tJ6UDRCOsF_PCMNEFyj5y7jyNtlQK5LN, https://drive.google.com/open?id=1WZWWC2MYfuTJhcJYqaONxk_fHsCtLvbC, https://drive.google.com/open?id=1mwTjqHlLmIUSXLDilxPImO8zZ6ydTLxq, https://drive.google.com/open?id=16p57bcxC2zgNuj0dLmGxXgDTK1U0jshm, https://drive.google.com/open?id=1PlAaSQZQM2aJtdS0xPHiu0JJXNNLTL44",https://drive.google.com/open?id=1EWkYOOeorDVQrl2ahH3WCoDkhSs8cvLR,Our robot has a 11.1V battery pack that is regulated to 3.3V for our microcontrollers ( Teensy and RP2040  )and used directly by the motor drivers. All the electronics wors at 3.3V,"The robot is equipped with a 3S LiPo battery (11.1V). The motor drivers run directly on 11.1V, the main electronics operate at 3.3V. A step-up voltage converter is used to supply 40V to the kicker system.","The main processor chosen is the Teensy 4.1, selected for its high number of I/O pins (all of which are in use), a good number of analog inputs, and at least three serial ports. These serial ports are used to communicate with the camera, the ball detection system, and optionally with a Bluetooth module. Other advantages include its high clock speed (600 MHz) and ample memory capacity.

A secondary microcontroller, the Arduino Nano RP2040, is used to read the ball sensors, calculate the angle and distance, and communicate with the Teensy via serial. For this role, at least 18 digital inputs and a serial interface (in addition to USB) were required.
","To calculate the ball angle, the Arduino RP2040 continuously reads each sensor over a 10 ms period. The sensor that has the clearest view of the ball will register a higher number of zero readings (indicating strong detection) compared to the others. The sensors with the highest number of detections are selected, and a weighted average is calculated to determine the ball's angle. The sensor readings also provide an estimate of the ball's distance, although this measurement is not very precise and depends on the ball's orientation.","To detect the field lines, we use 8 sensors, each consisting of a white-emitting LED and a phototransistor. Each sensor is read using an analog input, and the output value increases when a white line is detected. The detection threshold is set in software. The 8 sensors are arranged in a cross pattern, with 4 positioned internally and 4 externally.","The navigation sensors include the camera and the IMU. The IMU is used to orient the robot in the desired direction using a PID algorithm—typically towards the north or the opponent’s goal. Using the camera combined with a conical mirror, we can calculate the angle to the opponent’s goal when attacking, or to our own goal when defending.

If both goals are visible in the camera’s field of view, the robot’s position on the field can be estimated using an algorithm based on analytic geometry. This method is effective especially when the robot is angled relative to the goal.

Line sensors are also used for position recognition. For example, the goalkeeper returns to its own goal and stops when the southeast external sensor detects the area line.","The kicker circuit includes a step-up voltage converter that boosts the input to around 40V, a capacitor charged to this voltage level, and a relay used to trigger the solenoid for the kicking action. The solenoid is a commercial component.",we don't have a dribbler.,"https://drive.google.com/open?id=1MIx-Wm7q2aERfddV-A2G_yi9BE85VZRK, https://drive.google.com/open?id=1iBXqmeuORFZ_69yqu-MFYsYO8y5Q2g0s, https://drive.google.com/open?id=1ty9y8EYhYJOvfRAiMLSTfNpPzaP6kLe_","https://drive.google.com/open?id=1-WwucWmXkVHKqp6EC1Ig_f8UM5XGw9cW, https://drive.google.com/open?id=1c6bWV5PDtdXXwjk2CZ0TcWsxgAFRGUvD, https://drive.google.com/open?id=1p74Kzuc-FRt8NWkqyKSLgFbkh6z0zoOr","Overall, we are very satisfied with the PCB design. In two and a half years, we have progressed from having only basic knowledge of PCB design to developing a complex system, significantly improved from last year’s project. The motor drivers have proven to be reliable, and we have not encountered any issues related to noise or malfunction.

The kicker control circuit, which uses a relay, is not optimal—we initially intended to design one using MOSFETs—but it has nonetheless proven to be reliable. For this reason, we decided to focus our efforts on other aspects of the robot."" While there are no significant innovations compared to last year's robots, numerous small improvements have been implemented.",https://drive.google.com/open?id=1CzbnmNq9a9S2YnARFXOB2CM0ytDhRusZ,"To drive the motors with omnidirectional movement, we use a calculation system based on publications from RoboCup Major. Additionally, we employ a PID controller to prevent the robot from oscillating and to keep it consistently oriented towards the north or the goal. For these calculations, we use data from the IMU along with an Arduino library.","To calculate the ball angle, the Arduino RP2040 continuously reads each sensor over a 10 ms period. The sensor that has the clearest view of the ball will register a higher number of zero readings (indicating strong detection) compared to the others. The sensors with the highest number of detections are selected, and a weighted average is calculated to determine the ball's angle. The sensor readings also provide an estimate of the ball's distance, although this measurement is not very precise and depends on the ball's orientation.","Determining the robot’s optimal movement toward the ball required numerous tests and is still not fully optimized. Generally, the 360-degree field of view is divided into sectors. For the rear and side sectors, the robot moves toward the ball but avoids approaching it directly to prevent accidental collisions. For the front sectors, we use a PID system to ensure the robot captures the ball with its ‘mouth.’

Since the ball detection system is not perfect, the robot sometimes miscalculates movements and approaches the ball from the side. Slowing down the robot improves accuracy but negatively impacts overall game performance.","The robot’s software is based on a state machine. Usually, the robot operates in the 'playing' state, but when it detects a line, it first enters a 'braking' state for 25 ms, followed by a 'reaction' state where the robot moves away from the active line sensors. The duration of the reaction state varies depending on the situation, but generally, the robot remains in this state until it has fully re-entered the playing area.","The robot tends to capture the ball with its ‘mouth’ and orient itself toward the goal, as indicated by the camera.When the robot has the ball in its ‘mouth’ (where a sensor is located) and is properly oriented towards the opponent’s goal, the kicker is activated. To protect the circuits, the kicker can be triggered at most once every 2 seconds.","The goalkeeper stays on the goal area line, oriented toward its own goal and positioned in front of the ball. Usually, it remains in this position unless the ball is close for at least 2 seconds. In that case, it switches to attacker mode and attempts to score.","Currently, we have not yet completed communication between the robots.","The most important innovation is the introduction of a PID algorithm to position the robot in front of the ball, both as attacker and goalkeeper. This is expected to provide greater control and precision.",https://drive.google.com/drive/folders/1Sr0x7_nmIDnWCsggzRnweyczGPE1vKvz?usp=sharing,https://drive.google.com/open?id=1H9puK6L6qzhNkvKhp-9i8zU26KDGU4d1,"The most expensive components are the motors, which cost around €150 each, and the camera, which costs approximately €100. The Teensy costs about €35. The PCBs and most electronic components were provided by our sponsors. We estimate the cost of each robot to be around €700–800.

To this, we must add the cost of components that were damaged—such as at least two cameras (due to handling errors), one Teensy, and some batteries. In this version of the robot, we did not make major purchasing mistakes, as most experiments were initially conducted using components already available in our lab. The field we use is also quite old, at least 10 years.

Overall, we can estimate the cost per robot at approximately €1,500, with an additional €200–300 per year for experimentation, and around €1,000 for basic equipment such as the field and at least two balls.","40% sponsors
40% school
20% parents",1,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",paolo.torda@gmail.com,,
7/12/2025 16:15:40,Lovbot Legends,Lightweight League,"Vancouver, Canada","Will Wu: 
willwu7370@gmail.com
	
Kyle Gu:
kyle.gu08@gmail.com",https://www.youtube.com/@LovbotLegend,,"Will Wu: Mechanical, Electrical; Kyle Gu: Software, Camera",Regular week: 14 hours a week; 3 weeks before the competition: 50 hours a week,Robotics club room,September 2024,"2024 Worlds @ Eindhoven: Lightweight League (Lovbot Quantum)
2023 Worlds @ Bordeaux: Open League (MapleTech Nebula)

Western Canada Championship 2024: Lightweight League
Western Canada Championship 2023: Open League","Our mentor helped us with the high level strategy and planning including the buying/sourcing of sensor parts along with general direction for the robot. For example, we research the parts that we want online and/or from other teams, and our mentor helps us make an informed decision based on their past experience. A good example is that they recommended us to use a sliding resistor on our circular light sensor this year (as the led was too bright at Eindhoven last year and resulted in poor white line detection). ","We mainly communicated through a WhatsApp group and assigned tasks using a google spreadsheet. Whenever we decided to make hardware changes, we would ensure that we had one fully functional robot so that someone could always work on the software.","We integrated ChatGPT into our workflow across both software development and documentation. On the software side, it served as an efficient debugging assistant, helping us quickly isolate syntax errors and refine our implementation. For our poster and written materials, we used it to improve clarity and tone, rewording unclear phrasing and ensuring our final documentation met a professional standard. All ideas, though, are completely original and we cited our AI usage when necessary (for example, we cited matplot code from ChatGPT on our poster).",https://drive.google.com/open?id=1BLrWb02ctq4mWpE518EiLYA0qu1ZDvFr,https://drive.google.com/open?id=10yYRy7nqqhE6G_FzkZrq02TYZbXOtJnk,https://drive.google.com/open?id=1rjqNAD9MxISb405UF0uQpa001a953tfW,https://drive.google.com/open?id=10NrijQXXxuPR-tuBrRvldHdKz2TqLKa4,https://drive.google.com/open?id=1Ad7cihiDr0aX75XBA9_5euiyjoP9tfzB,https://drive.google.com/open?id=1teig5JKeH5wkmg0JrBVCbYm0BhFOiBQe,https://drive.google.com/open?id=1tsEXWytyLQpXx_5E14m1BKwvgpDE_uds,"We have four ultrasonic sensors that we used to map into Cartesian (x, y) coordinates. In this case, we can easily just call a goToCoordinate(int x, int y) function and the robot will move to that specific coordinate on the field. For reference, x = 0 and y = 0 at the center of the field. 

This year, we implemented a mouse sensor (Odometry Sensor from SparkFun) to record the drift from our nearest accurate ultrasonic reading. If the ultrasonic readings ever get blocked, we can just get another (x,y) reading from our mouse sensor from the last accurate position given by the ultrasonics. We reset the drift of the mouse whenever we get an accurate ultrasonic reading.",https://drive.google.com/open?id=1rjwZ8be2XG-upzlSkGLUpsr6tvNGHcp0,https://drive.google.com/open?id=1yL6Kktgbma-mlQx6ibSLobttFKS5Q42F,https://drive.google.com/open?id=1I20L8MHLrqm7lKtgoq4nNQPm_MbumgF1,https://drive.google.com/open?id=1Zx_06wC7rXcRNVh7ecrEJvjpBg_mlKKd,https://drive.google.com/open?id=199HPDIhEcqSVHdM6CkyemnB2mxPN3cvF,https://drive.google.com/open?id=1r3bVXhXEXkHID7yhuO_GTO0yAEmaAVK5,https://drive.google.com/open?id=1pJ5U_VsHcroc5fLu5c1IO_y8QjxhoI4B,"We have around 4-5 years of Solidworks experience dating back to RoboCup lightweight in 2019 at Syndey. We used Solidworks for CAD and then Bambu Lab for 3D Printing. We built off 30% of our design from last year (Lovbot Quantum) and then redesigned everything from the second chassis and above. A lot of considerations we made this year were from mistakes/learnings from last year. 1) We removed the dribbler for increased reliability. 2) We switched from an OpenMV camera to an M5 Stack Camera after talking with Kotaro from Edge. The M5 is a lot more reliable. 3) We made our own 3D printed wheels this year because we did not find larger commercial wheels to lift our robot higher above the surface. Last year, due to smaller wheels, the circular light sensor was getting interfered because it was too close to the ground.

There are a lot of minor considerations we made, but these are some of our biggest decisions that we made for this years robot.","We used Bambu Lab's P1S to 3D Print around 80% of our robot. Our 3 fiberglass chassis are cut with a CNC (LY BGACNC 6040Z). 

We used JLCPCB to manufacture our PCBs. 

We didn't really need to make much changes, but we did shift from a lot of externally bought hexagonal pillars to 3D prints this year. I think the 3D prints are much stronger but also heavier, so we had to play with the infill a lot and used many rolls of filament for testing (I think we printed the entire robot to 3% infill to meet the weight requirement)","We used x4 Polulu 9.7:1 Gearmotors. We originally used the JoinMax motors due to their high RPM, and it worked in the past when we competed in open. We then realized that the motor RPMs highly varies across motors and caused us to rely on software-hacked motor correction to keep the robot straight at all times. We then tried the high power polulu motors and the RPM speeds were surprisingly very linear and consistent. We have always had 4 motors since it's the perfect balance between traction and weight considerations.

For the wheels, we essentially reverse-engineered a metal GTF Robot wheel and made it larger. For the mini wheels of the omniwheel, we use the same ones that come from a Dyson vacuum. We then 3D print the wheel and assemble the wheel with a metal wire connecting the mini wheels. As to why, we needed larger wheels for better white line detection, but never found anything suitable commercially.","We bought a Takaha CB1037 from Japan and connected it to a capacitor. Our wheels run on 12V, the Teensy board runs on 3.3V/5V, and the capacitor is rated up to 48V. We added the capacitor as a buffer to handle sudden drops in voltage and suppress voltage spikes, particularly when the motor draws a large current during startup or sudden directional changes.",We removed our dribbler from last year because it often caused battery issues and was not necessary at all in lightweight.,https://grabcad.com/library/2025-robocup-junior-lightweight-lovbot-legends-1,"We had 3 main innovations we were proud of this year:

1) 3D-printed Omniwheels. As explain earlier, we are really proud of the omni-wheels we designed. We had undergone 7 different versions of the wheel until we finally landed on a design that we thought was better than the commercial options. 

2) Mouse Sensor Navigation: We may be the first team to integrate a mouse sensor for drift correction. To handle its computational load, we used a Seeed Xiao to relay data to the Teensy. It drifts only 3–5 cm over a full lap, making it a reliable backup when ultrasonics are blocked. We're still investigating minor slowdowns possibly caused by the sensor.

3) 3D-Printed Chassis: This is our first year using a nearly fully 3D-printed robot. Initially overweight by 100g, we tested various infill settings and settled on 3% gyroid, bringing us 15g under the limit. A prototype is shown in our design photo.","https://drive.google.com/open?id=1sgFBhV1tjqGo6W4MjFazyJtD0TS4fpay, https://drive.google.com/open?id=1xKeWO0EYB38Gs7SuUO1L0UP9V5BIQHIy, https://drive.google.com/open?id=1J8ppX6tjruHbFw6RPLzuTN3sng-j_Zh2, https://drive.google.com/open?id=1knwKeIr9-soi3SaU4hRP7wIYKCBVI78W, https://drive.google.com/open?id=1YtCRaDaTUkrIS6-l-2kC-Iam9aMYBVnj",https://drive.google.com/open?id=11uyys-621jAQeCngiCsGaZtxTV9k60M9,We have a 3s 1500mAh LiPo Battery (12.6V full charge) connected to our switch board which connects to our motors which run on 12V. The switch board connects to our teensy shield which has a buck converter that steps down to 5v.,"We drive our motors using two H-bridge motor controllers purchased from AliExpress. Each controller is capable of independently driving two Polulu motors, allowing for full bidirectional control and variable speed through PWM.","We have been using the Teensy4.1 for over 3 years since it has 600 MHz frequency (almost 100x faster than Arduino Mega) and because it has exactly enough analog ports for our robot. We also have a Seeed xiao which connects to our mouse sensor, but we are still figuring it out and the design is not finalized yet. The mouse can connect directly to the teensy but we found it slows down the processing power, so we've been spending the last few weeks trying to test the seeeduino.","Our robot uses the TSSP58038 IR receiver for ball detection, which is tuned to detect the infrared signal from the ball. The IR ball emits this signal in bursts at a known pulse frequency. The TSSP58038 outputs a digital low signal whenever it detects a valid IR pulse, and our system measures the duration of these low pulses to determine if the detected signal matches the expected ball signature. The detection circuit is built into a custom PCB, which outputs an analog signal representing the ball's angle and strength. This signal is read through two pins on the Teensy: eyePort (which selects the sensor) and eyeValue (which reads the corresponding strength).","Our line detection system uses 32 photoresistor (MG45-12 photoresistor from ali-express) sensors arranged around the base, each wired as a voltage divider to detect changes in surface brightness. The analog signals are routed through two 8-bit multiplexers to a single analog input on the Teensy, allowing us to read all sensors efficiently. A sliding resistor is included in the LED circuit to adjust brightness and improve contrast based on lighting conditions.","We use 4 ultrasonic sensors which sends an analog signal to the teensy. As for direction, we use a BNO055 as the compass to keep our robot facing straight. In addition, we've innovated a mouse sensor that gives us a drift value from the nearest accurate ultrasonic value.","Our kicker system is powered by a 48V step-up converter, which boosts the 11.1V LiPo battery to the high voltage needed for kicking. The output charges a capacitor, and when triggered by the Teensy, a circuit rapidly discharges the capacitor through a solenoid, creating a strong kick.",No dribbler.,https://drive.google.com/open?id=1sllel7SJUNt61HOQSBheg15wmwY_7Xwd,"https://drive.google.com/open?id=1Blgugk-zZYWb-CM01EtHGpW95GjAyXed, https://drive.google.com/open?id=112WZBrRk7fCeT-WeIqzWJsX_wjppFFQi","We're most proud of our upgraded line detection system, which we redesigned for greater precision and flexibility. Originally, we used 24 photoresistor sensors in a 60mm diameter ring. This year, we expanded it to 32 sensors on a 120mm ring, nearly doubling the sensor density and field coverage. This significantly improved our ability to detect lines from multiple angles, especially during high-speed movement or edge-following maneuvers.

To adapt to varying lighting conditions, we also added a sliding resistor to the LED circuit, allowing us to fine-tune the brightness of the downward-facing illumination ring. This adjustment helps optimize the contrast between white lines and dark flooring depending on ambient light, reducing false detections or blind spots.","https://drive.google.com/open?id=1eS6bJXQwSvcrJi1BZlCXF4GZBsgOFsLi, https://drive.google.com/open?id=18m8oA5uczaoCrWG5f9xdimonWfGD9odx, https://drive.google.com/open?id=1utjBoO_72phvwTkqnOt9KYdBtVryLT2n, https://drive.google.com/open?id=1jOo-rs_WG_Ds8YWMDb8DW57cGOl8apaa","We use the Teensy 4.1 microcontroller to control our motors using PWM signals. The Teensy generates high-frequency PWM outputs that are sent to the motor controllers, which interpret the duty cycle of each signal to determine motor speed. A higher duty cycle results in faster rotation, while a lower duty cycle slows the motor down. Direction is controlled using additional digital pins.","The compound eye PCB sends analog signals through two pins: eyePort selects the active sensor, and eyeValue provides the signal strength. By cycling through sensors and reading these two analog ports on the Teensy, we determine the direction and proximity of the ball. ","Our algorithm uses a PID controller to adjust the robot’s movement based on the ball’s direction and distance. The proportional term reacts to the angle between the robot and the ball, helping it turn toward the target, while the derivative term smooths the motion to prevent overshooting. We add the PID output to the current angle of the ball as an offset. The PID is controlled by the ball distance (ballValue).

These are our PID parameters: double dirKp=0.21, dirKi=0.00, dirKd=0.03; ","This is an algorithm we spent over 3 years developing. We have the 32 light sensors detect clusters of white line, returning the average angle of that cluster. We then do vector addition of the total clusters and then return both the angle and magnitude of the white line vector. We realized that there are special cases (for example, the white angle is the 270 when the robot is within the white line and on the left side of the field AND the white angle is also 270 when the robot it outside the white line and on the right side of the field). In both cases, the white angle is 270, and the robot does not know which side of the field it is on so we need to apply a flip() logic. With the flip logic, if we detect a change >120 degrees of the final vector, ie. from 270 to 90, then we flip the final vector by doing (whiteangle + 180)%360; In addition to this, based on the getFlip() function, we can vary our speeds (ie. the speed is higher the farther out the robot is)","We use our M5 camera to directly aim towards to the goal with one simple line: setTarget(getOpposingAngle() + getCompass()) %360; With this line, we always aim towards the goal (we constrained the angle from 315 to 45 so it doesn't turn too much). We then kick when the angle difference between our target angle and compass is within a certain threshold (ie. 10 degrees).","We are very proud of our white line following algorithm. You can see a full demo of our white line here: https://www.youtube.com/watch?v=B6lyV9Sz0HU. We consulted with Edge a lot and we took a lot of inspiration from their algorithm last year. We essentially take the white line vector and add it to a vector which is parallel to the the white line angle (ie. the parallel vector is 90 if the ball is on the right and 270 if ball is on the left). We also apply a corner slowdown ratio when the white angle starts to get curved so that the robot does not go past the goal when defending. Finally, to ensure that we are not called a damaged robot, we go forward if the ball is in front of our robot for more than 3 seconds. ","Yes, we have an HC05 bluetooth communication module which we use to run strategies. You can see a demo of one of our strategies here: https://www.youtube.com/watch?v=KrcUmff-UcM. Essentially, the defense robot will come out of the goal and block the opposing goalie if the offense robot has the ball in the corner for more than 3 seconds. We found that a lot of defense robots in previous years were completely unstoppable, making lightweight play (in my opinion) very flat and uninteresting compared to open. We though this was one of the ways where we can exploit teams that solely follow the white line for defense. Note that this does not violate the pushing rule because the opposing robot must touch BOTH the defending robot and the ball for it to be considered pushing. ","We are most proud of our localization algorithm which we use to set an invisble white line in case our white line fails. It also allows us to run at a much faster speed compared to our opponents which creates greater score opportunities. 

You can see a demo here: https://www.youtube.com/watch?v=B96fBnEuuu8. In the video, the robot is able to stop before hitting the wall even though there is no apparent white line on the ground. In this case, it is very easy for the robot to run at very high speeds without hitting the white line at all. 

You can refer to our poster for specifics, but the algorithm is created by essentially subtracting 4 wall vectors (distance from wall) from the current around ball vector. In this case, the wall vector should apply a repelX and repelY force which repels the robot from hitting the wall.",https://github.com/willwu24/LovbotLegends,https://drive.google.com/open?id=1P3lmMcdwarDbzJec8fJWInp1FAUS8Ifq4UZoPZdXWHU,"
Robots: $3366.52 Total; $1.683,26 USD Each Robot (according to BOM) which includes filament, failed sensors, etc.
Environment is an upfront cost (our club has always had the field for 10+ years)",80% Parents 20% Sponsors,8,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",willwu7370@gmail.com,,
7/12/2025 16:17:01,Lovbot Altrons,Open League,"Vancouver, BC, Canada",ezhou1025@gmail.com,N/A,,"Felix Hang: mechanical & electrical design, offence program
Emma Zhou: documentation, defence program, gameplay strategies ",20 hours per week,robotics studio,September 2024,"2025 RoboCup Americas Superregional Open League
2025 RoboCup Western Canada Open League
2024 RoboCup World Championships Open League
2024 RoboCup Western Canada Open League","This year, we set out to build a reliable dribbler but initially struggled to find the right mechanism and gearbox that could deliver enough power and torque for effective ball control. With the guidance of our mentor, we were able to source the appropriate gearbox components, bearings, and refine the overall structural design of the robot. Thanks to this support, we successfully developed a functional and reliable dribbler.","The team met everyday from the end of June to the day that we left, meaning we had time to assign work to different members and schedule our workload accordingly. This allowed us to contribute the work evenly among the days we had and among the members evenly so that we could accomplish what we had hoped to achieve. All team members were punctual and worked efficiently. ",We mainly used ChatGPT for the implementation of specific algorithms or functions and to consistently check over our code for apparent bugs and to keep it organized. We would also run our electrical design over with ChatGPT for constructive feedback. ,https://drive.google.com/open?id=1x9mExHf4K2ihRzDqpro2ktcMTnBuq7Ox,https://drive.google.com/open?id=1Kes3sqrdFECwYXHvX18zpQhuQSVdLKhf,https://drive.google.com/open?id=1ms1l2sJLLek7hOezqwBH8b9Q5BsMXalO,https://drive.google.com/open?id=1RWRAMisHvwTK_7CO7MgcJETeXh5vJ8iH,https://drive.google.com/open?id=1ky2kWkaKpGL7rJn4rE9YBlPghE7I0BTN,https://drive.google.com/open?id=1IVEqfow-fH39RjKNPa6B1icPltsHelJw,https://drive.google.com/open?id=1SFSjNTJ__JsddYsbMx-TCuMN2bwwHcfE,"We localize our robot by using four ultrasonic sensors, each mounted on one side of the chassis, to measure the distances to the surrounding field walls. These distance readings allow us to locate the robot’s position on a Cartesian coordinate system, effectively mapping its location for the known dimensions of the field. The raw ultrasonic data is converted into centimeters to provide a consistent and intuitive unit for both calculation and debugging. By comparing the sensor readings to the field boundaries, we can estimate the robot’s x and y coordinates in real time. This positional data is then used to guide the robot's movement and orientation, allowing us to navigate accurately and implement path planning strategies during gameplay.",https://drive.google.com/open?id=1-jkr_R5-kHc_otAEy8Fu9YxsvRnZ-Ctl,https://drive.google.com/open?id=1_e5BirKNBgs56_GS2MsBu_Vlt4w3cq5A,https://drive.google.com/open?id=1yZT62NH5B4pecIM2bpqI5iHOdZ4u1__V,https://drive.google.com/open?id=1C5xlxLkObnSt_FmL0Ataoq-G7W7_40WI,https://drive.google.com/open?id=1VLHQfeOUCMpv2Xzq_pJ4531dALBJAqs8,https://drive.google.com/open?id=1_YCbevzD2i_mxHmL52Oq_HElhGexhvhQ,https://drive.google.com/open?id=1IRkW3e4_J2ewEQZwBdeTDN_cEQwrkc1e,"We used SolidWorks and Fusion 360 to design our robot. Our first chassis blocked much of the camera’s view, so over several weeks, we revised the layout to improve visibility and better fit the components.

By December 2024, we had lowered key parts, repositioned the ultrasonic sensors for clearer readings, and adjusted the camera-mirror setup for a wide-angle view. We also redesigned the top plate to reduce light interference.

Space and wiring were major challenges due to the robot’s compact size. To improve this, we plan to add more custom PCBs and use smaller components to save space and simplify maintenance.","We used a mix of in-house fabrication and external services to build our design. Most parts were CAD-designed and made using laser cutting, CNC milling, or 3D printing. For stronger parts like gears and shafts, we used metal machining. Our PCBs were designed in-house and manufactured by JLCPCB. We also made our mirrors in-house using a mold and heat-forming process.

During assembly, we faced issues like wiring congestion and camera visibility. We fixed these by adjusting component placement and refining the layout. These changes helped improve the robot’s performance and reliability.","For the drivetrain, we used four motors positioned at degrees 45, 135, 225, and 315 respectively to ensure equal strength in moving in all directions, while also leaving enough space for the ball capturing zone at the front of the robot. 

We built our own 3d printed wheels by trial and error: we would experiment with different diameters and different widths and program the robot to run the same code to find the best specs to make the robot run as smoothly as possible. ","Our kicker mechanism uses a Takaha solenoid as the actuator, which delivers a rapid linear motion to strike the ball. The solenoid is powered by a voltage boost circuit, implemented through a custom PCB that steps up the robot’s 12V battery supply to 48V. This higher voltage significantly increases the energy delivered to the solenoid coil, resulting in a stronger and faster kick. When activated, the solenoid’s plunger extends forward with high force, transferring momentum to the ball.","We used a Maxon motor with high torque going to a 2:1 reduction gearbox for further increase in torque rather than speed, for better control of the ball. The gearbox outputs to a custom made silicon mode to grip the ball. ",N/A,"We designed every part of the robot with easy maintenance and quick repairs in mind. From the start to the final build, we made sure any mechanical or electrical problems could be fixed quickly—even during the pressure of a competition match.

We also spent a lot of time improving the size and shape of the convex mirror to give the camera the best view of the field. Our goal was to get a clear and accurate image, especially for things farther away. A steeper mirror helped the robot see nearby objects but caused image distortion. A flatter mirror reduced distortion but created a blind spot near the robot. After testing different versions, we found the best shape that gave the camera a wide, smooth view with little distortion.",https://drive.google.com/open?id=1XJBR-L90xCPLWDR3MZnCL-z2e9Xz7cIc,https://drive.google.com/open?id=1YjEthK3pfznsE5-ufLRfdLf4ke5hgS_T,"The main body of our robot is powered by a 12V battery pack, which supplies power directly to both the Teensy shield and the motor drivers. The shield regulates the 12V input down to 5V to power its onboard components, including the Teensy microcontroller. The Teensy then further reduces the voltage to 3.3V for use with its analog input pins. ","To drive our four JMP DC motors, we use two motor controller boards (each handling two motors) connected to our Teensy shield. The Teensy sends PWM signals for speed control and digital signals for direction, which the motor controllers use to power the motors accordingly. Power is supplied by a main battery regulated through a custom-built switch system and stabilized with a capacitor to handle current spikes. We use a custom extension board to simplify wiring, integrate motor controller ports, and add test/debugging functions. In software, we calculate a movement vector (direction and speed), then convert it into individual motor speeds using vector decomposition, allowing omnidirectional movement with precise control. ","We used the Teensy 4.1 because it’s fast, compact, and has everything we need for a robot with lots of sensors. With a 600 MHz processor, it handles real-time decisions like tracking the ball and reacting quickly without lag. It also has 18 analog ports, as well as plenty of digital, and other-protocol input and output ports, which makes it easy to connect our camera, ultrasonic sensors, compass, and motor controllers all at once. The extra RAM and flash give us space to run more advanced code without worrying about memory limits. Overall, it’s powerful, efficient, highly customizable, and small enough to fit nicely into our robot and onto our shield. ","We use an OpenMV camera pointed upward at a convex mirror, giving the robot a wide-angle view of the field and its surroundings. The camera processes the image to detect colored objects—like the orange ball and colored goals—by identifying blobs based on predefined color thresholds. It calculates the angle and distance of each detected object relative to the center of the image.

To improve communication speed, we shrink the data before sending it over UART to the Teensy microcontroller, which receives it through the Serial7 port. On the Teensy side, the data is rescaled back to its original form for processing. This allows the robot to make quick decisions based on the ball and goal positions.","Our line detection system uses downward-facing individual grayscale sensors to detect a white line on a green field. Each sensor sends out light and measures the reflection as an analog signal. White areas reflect more light and produce a higher signal, while green areas reflect less and give a lower signal. The robot reads these analog values to determine the line’s position and stay on track.","For navigation, we use an MPU6050 gyroscope to track the robot’s orientation. It provides real-time angular data, allowing us to determine the direction the robot is facing. This sensor connects to the Teensy via I2C.

To estimate the robot's position on the field, we use four ultrasonic distance sensors, one mounted on each side of the robot. These measure the distance to nearby walls or field boundaries, giving us a rough idea of our position relative to the edges. The ultrasonic sensors are connected to the Teensy through digital I/O pins using a trigger and echo configuration.

Additionally, the OpenMV camera helps with localization by detecting the direction of the two coloured goals, which further improves orientation and positioning accuracy during gameplay.","We drive the kicker using a Takaha solenoid powered by a voltage boost circuit. The circuit takes the robot’s 12V battery input and increases it to 48V, supplying enough power to the solenoid coil for a strong, fast kick. When the microcontroller sends a signal to activate the kicker, the boosted voltage energizes the solenoid, causing its plunger to quickly extend and strike the ball. The boost circuit ensures the solenoid receives sufficient current and voltage to deliver a powerful kick every time.","Our dribbler system uses a high-torque Maxon motor connected to a 2:1 reduction gearbox, which increases torque while reducing speed for better ball control. The gearbox drives a custom-made silicone roller that grips the ball securely during play.

To control the motor, we use a 20A electronic speed controller (ESC) connected to an analog port on the Teensy shield. The ESC receives control signals from the microcontroller, allowing precise regulation of the dribbler’s speed and responsiveness.",,,"One of the biggest improvements we made to our electronics this year was switching from the Arduino Mega2560 to a smaller and faster microcontroller. The Mega2560 had been reliable and easy to use in past years, but it had some drawbacks. It only had one I²C connection, making it hard to add more sensors, and its large size didn’t fit well in our compact Open League robot. It also wasn’t fast enough for some of the things we wanted to do.

The new microcontroller made a big difference. It’s smaller, faster, and gives us more flexibility with wiring and sensor use. Our robot now runs more smoothly, and it’s easier to organize everything inside. This upgrade helped us build better, more efficient electronics that are also easier to maintain.","https://drive.google.com/open?id=1CMSz5jymmGM9pmI6Qnzc0tO0os5UYG26, https://drive.google.com/open?id=1Nx0Ew8u-QX7-GwniP7cL4XY9eJlh9KM7","We use the processor to move the motors by controlling the direction and speed pins connected to each motor driver. The Teensy 4.1 sets specific pins as outputs so it can send signals to the motors. For each motor, one pin controls direction and another controls speed using PWM (pulse-width modulation). The direction pin sends either a HIGH or LOW signal to determine which way the motor spins, while the PWM pin sends a fast, pulsing signal to control how fast it spins. A higher duty cycle in the PWM signal results in faster motor movement. By continuously adjusting these signals, the processor is able to move the robot smoothly and accurately in response to movement commands.
","We find the ball using a camera that faces a convex mirror, allowing it to view the entire field from above. The camera detects objects based on color by scanning for pixels that match a certain color threshold, identifying them as blobs. If multiple blobs are detected, we select the largest one and use its color to determine whether it represents a ball or a goal. The camera sends this data through a serial connection to the processor in a packet of bytes. To make sure the data is accurate and not corrupted during transmission, we verify it using a checksum—a simple method where all the data bytes are added together and compared to a final checksum byte sent with the packet. If the values match, the data is accepted. If the packet confirms a ball detection, the processor records the angle and distance of the ball for use in movement and strategy.","To ensure that the chances of us being able to catch the ball are high, we always try to position the bot directly behind the ball so that we can move with the ball in the capturing zone. To do this, we use the camera. By using the camera we can see where the ball is and what direction the bot has to move to make sure that it can end up directly behind the ball with no issues like knocking the ball away. ","We use ultrasonics to determine the distance from the wall, which we then use to determine whether we should stop or not. If the distance from the wall becomes too small, we tell our robot to stall until the ball is moved to avoid leaving or going out of the boundary lines. If our ultrasonics becomes unreliable and is malfunctioning, we can rely on our grey scales to determine whether we have hit a white line or not. If we have hit a white line we can either wait until the ball is moved or we can return to the centre point for a certain amount of time.","When the offensive robot gets the ball, it looks for an open spot near the opponent’s goal, aims there, and kicks to score. If the ball is near the crowded center, the robot dribbles backward slowly while turning, then spins fast to shoot and surprise the opponents. Near the edge, it dribbles along the sideline to keep control and move forward. If the ball is stuck in a corner, the robot hides it, quickly dribbles out, and heads toward the goal before a “lack of progress” call. Getting out of the corner this way improves our chances to score.","The goalie is designed to handle any situation when the offense doesn’t have the ball. It needs to block the ball from entering the goal from any angle at any time. Our strategy is for the robot to find the best angle to block the ball by calculating where the ball is coming from and positioning itself there. The goalie also adjusts its speed based on where the ball is, how far it is, and which direction the ball is moving.

Since the goalie stays near the goal, it moves close to the field’s boundaries, called the penalty area. To keep it inside the field, we treat the penalty line like an invisible wall the robot can’t cross. The goalie always stays on this boundary while defending. If the ball stops moving on the field, the goalie switches to offense for a short time to avoid missing chances to score.","Since we play with a passive orange ball, only tracked by the camera, the ball may often disappear from the robot’s vision which is caused by another object being in front of it. As soon as both robots fail to locate the ball, we would immediately begin to search for the ball across the field, in case an opponent robot is attempting to perform strategies that involve hiding the ball. The robots will also share ball information with one another should one of them see the ball and the other one doesn’t. The offence robot will be mainly in charge of the front section of the field, leaving the back half for the goalie to avoid them fighting one another for the ball and the possibility of double defence. ","One of the innovations we’re most proud of is how we use the five physical buttons on our robot to control and configure its behavior. Since our robots don’t have screens, debugging and adjusting settings can be challenging. To solve this, we designed a flexible system where each button can be assigned to control different modes, roles, or strategies. This means we can easily switch between robot settings—like adjusting speed, changing behavior modes, or activating debug features—without needing to reprogram or connect a laptop. During competitions, this gives us a huge advantage because we can quickly adapt to the opposing team’s strategy with just a button press. It allows us to make real-time decisions and customize our robot’s behaviour based on the situation, which increases our chances of performing better and winning more games.",N/A,https://drive.google.com/open?id=1m-MMlEUI_Fg7NdE9BG5iyDtVKnIghlps,"2 robots: $1500 x 2 = $3000 CAD = $2200 USD

Experiments (3D Print Failures, Prototypes, Extra Motors & Drivers, Damaged Solenoids and sensors, teensy, Misfit Chassis): $2400 CAD = $1750 USD

Environment (Soccer Field, Lighting Setup, Tools, Power Supplies, 3D Printers): $4000 CAD = $2925 USD",100% parents,5,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",ezhou1025@gmail.com,,
7/12/2025 18:24:25,Lovbot Dynamics,Lightweight League,"Vancouver, Canada",henry01pd2028@outlook.com,N/A,,"Henry Zhou: Hardware Manager & Defence Programmer
Ethan Xie: Documentation & Offence Programmer",10 hours per week,Robotics club office,September 2024,"Kelowna Western Canada 2024 LWL
Kelowna Western Canada 2025 LWL
Super regional Americas 2025 LWL","The blocking logic had been proven to be impossible to perfect, because of the myriad amount of cases and complexity of interference with the rest of the code, so our mentor helped us refine the code and improve it to the best we could.",We documented all our changes of each workday on a google doc and made sure to have new goals we want to accomplish each week.,"ChatGPT and deepseek is used for debugging and refining mathematical calculations, or simply just to make the code neater. For example, our speed calculation based on various analog readings are calculated and combined using a function that AI helped develop.",https://drive.google.com/open?id=1kq7PUzMWuyMMfpuiSdIIT1JK4lyeR6kS,https://drive.google.com/open?id=1TSLhVroSITZv4EOtda4JXNaC2_eVT-Gw,https://drive.google.com/open?id=1KCPlWIw6FUQkaII9sGE7_9Luk9637Lml,https://drive.google.com/open?id=1E4NE2ioZaJUHd6w-zPFRq0iRRp5XmGOv,https://drive.google.com/open?id=1aNavwir2sJcjEUuTjkK94D6UAFMEZENC,https://drive.google.com/open?id=1x9axqoOJGYqztDJkebvInLNKPdF6IVqY,https://drive.google.com/open?id=1uc1H8h4s4C274SgcunZqH7SwoiZJ7cDp,We use ultrasonic values to calculate the coordinates the robot is on the field whenever it is unblocked and slow down when the robot is close to the wall.,https://drive.google.com/open?id=10I6O6dYPdd83FEyoLqvCL_AWsOzyCurA,https://drive.google.com/open?id=16jjXXKWeZQusgk4iQXE4hEE8cNydElob,https://drive.google.com/open?id=1ERdmsJwQZ_88h8yeCGflKmy3kkLC2Xij,https://drive.google.com/open?id=1bu4NocXGzcJ0vP7qQzIaR7WtesiSOFDQ,https://drive.google.com/open?id=1qge4vv7xv1wpKGjY952OllFEpkfNF87J,https://drive.google.com/open?id=1Cc4nh0Mk_xKrL8FLravwCEI2JhQJu1Uu,https://drive.google.com/open?id=1EjzXliXonLExARNeHL6ttiX_B0y87Ya-,"We used solidworks to design the robot and make sure that the screw holes fits and that there are enough wire room. We also considered designated spots for ultrasonic and grayscale so that no part of the robot will block those pivotal sensors. The design still has flaws in that many parts can collide and potentially break, which means that the parts needs to be more separated.","The primary machine we used is the 3D printer, which printed the chassis, mold for IR sensor and the protective shields. Our parts are cut by our own CNC machines and the program we use is bambu labs. The chassis is cut so that it saves as much weight as possible while being strong enough to hold everything together. The ultrasonic position is awkward as it can sometimes see the IR ball and provide an inaccurate value.","We use 4 omniwheels because they allow for full 360-degree movement, making our robot extremely agile and responsive on the field. The wheels are placed 90 degrees apart in a symmetrical X-configuration, which enables the robot to move smoothly in any direction—forward, backward, sideways, diagonally, or even rotate in place—without changing its orientation. To build each omniwheel, we designed and 3D printed two interlocking parts, then inserted mini rollers into the gaps. These rollers are secured using metal wire, creating a durable and lightweight design. This custom wheel system gives us precise and flexible control, especially during fast-paced maneuvers and directional shifts during gameplay.","Our robot's kicker is powered by a capacitor-based system designed to deliver a quick and powerful strike. The capacitor is connected to the 12V battery and gradually stores electrical energy. Once fully charged, the circuit boosts the voltage from 12V to 48V, allowing the capacitor to release a high-energy pulse when triggered. This sudden discharge powers the kicker mechanism, delivering a strong and rapid motion ideal for launching the ball with speed and accuracy.",We don't have dribbler.,,"We are most proud of our customizable and flexible chassis design, which allows for a wide range of hardware configurations. The chassis features numerous mounting points and screw holes, giving us the ability to easily adjust component placement, swap out parts, or add new modules without redesigning the entire frame. We use three separate chassis units, each carefully designed to maximize the strength-to-weight ratio, ensuring durability while keeping the robot lightweight and agile. This modular approach not only improves performance but also makes maintenance and upgrades much faster and more efficient during testing and competition.",,,"Our robot is powered by a 12V battery pack that supplies energy directly to the motor drivers. To power the microcontroller and sensors, we use a buck converter to efficiently step down the voltage from 12V to 5V, ensuring stable and reliable operation. This approach minimizes heat loss compared to linear regulators and maximizes battery life. The power circuit is designed to deliver clean, consistent voltage levels tailored to each subsystem’s needs, supporting both high-current motors and sensitive electronics without interference.","We drive our 4 DC motors using 1 four-channel motor driver modules, each capable of independently controlling 4 motors. The motor drivers receive 12V power directly from the battery and logic signals from our microcontroller. For each motor, we use two digital pins to set the direction and one PWM pin to control the speed. The microcontroller sends these signals, and the motor drivers adjust the power delivered to the motors accordingly. This setup allows precise and reliable control of all motors while keeping high current away from the microcontroller.","We use a Cortex-M4 microcontroller for our robot because it offers a large number of analog input ports, which are essential for reading multiple sensors simultaneously. Additionally, it features an efficient built-in voltage regulator that steps down our 12V battery supply to a stable 5V, simplifying our power design and improving overall energy efficiency. ","Our ball detection system uses a circular IR sensor with 18 individual ports. To improve accuracy and prevent signal interference between these ports, we designed and attached a custom mold on top of the sensor that clearly separates each port. This separation ensures precise detection of the ball’s position by isolating the signals from each sensor segment.","We use grayscale sensors that output analog signals corresponding to the reflectance of the surface beneath them. These signals are sent to the microcontroller, which interprets the values to determine if the robot is over the white line or the surrounding surface. By comparing the sensor readings to a preset threshold, the robot can accurately detect and follow lines on the field.","For navigation, we primarily use ultrasonic sensors, which sends signal to our microcontroller. The sensors updates the coordinates whenever it is in an unblocked position, providing useful information in where the robot is on the field. The direction the robot faces is always controlled at around 0 degrees using MPU sensor.","Our kicker system is powered by a capacitor connected to the 12V battery, which stores electrical energy over time. The circuit boosts this input voltage to 48V, allowing the capacitor to release a powerful burst of energy when triggered. This high-voltage pulse drives the kicker mechanism, enabling it to deliver a fast and forceful strike.",N/A,,,"Our main electronic innovation is the design of a T-shaped grayscale sensor array, where we combine 6 individual grayscale sensors on each side of the robot. This configuration significantly widens our field of view, allowing the robot to detect lines and edges over a broader area. Despite the increased coverage, the design maintains high consistency and accuracy in sensor readings by carefully calibrating and aligning the sensors. This innovative approach improves line detection reliability and helps the robot better navigate complex courses with greater precision.","https://drive.google.com/open?id=1gPEdz0nKx1F6Gig-1QF4G6rSt1DIHIXx, https://drive.google.com/open?id=1-dMdM5xgN5_23TynFpSn-Ii_vZAAac82","The microcontroller sends control  PWM signals to the motor driver modules, which then switch high current from the battery to the motors. This setup allows the microcontroller to safely regulate motor speed and direction without handling the high current directly.","Our IR sensor reads 18 separate values, each corresponding to a specific port arranged around the sensor. These readings provide up to 18 possible ball angles, ranging from 0° to 340°, allowing us to accurately determine the ball’s direction relative to the robot. We process these analog values directly from the sensor without using a camera, enabling fast and reliable ball tracking.","For the attack robot, the robot calculates an offset based on the distance of ball with the robot, which is between 0~90 degrees. This is then either added or subtracted from ballAngle to constantly decide the direction it should go towards.

For the defense robot, instead of catching the ball, the robot constantly shift left and right, acting like a goalie. The difference is simple, the direction on the attacking bot is not constrained while the defense robot is constrained to either moving left or right to follow the ball on the X axis.","This is achieved by our new system of dynamic repel feature, which divides the field into 3 zones using ultrasonic thresholds. Safe zone means that the robot can move freely in the zone, buffer zone meaning that the robot should slow down, while repel zone meaning that the robot should immediately repel the opposite direction to where it is heading at that time, making it avoid going out.","For our attacking robot, we incorporated kicker functions and a function to aim towards goal, which drastically increases the chance of scoring. The kicker is used either to move the ball forward to apply pressure, or simply just a shooting attempt.","Our defense robot uses a real-time blocking algorithm to continuously track and intercept the opponent’s shots. It positions itself strategically between the ball and our goal to minimize scoring opportunities. Additionally, the defense bot is equipped with a kicker mechanism that can clear the ball away from our side of the field, helping to relieve pressure and regain control during critical moments.",,"This year, we heavily rely on our ultrasonic to prevent our robots from going out of their designated areas instead of grayscale sensors (explained in previous parts). This change is made because it is almost impossible for the robot to react on high speed to white line. Instead using ultrasonic sensors, we have a buffer zone to slow down the robot before getting close to the wall, making it harder to go out. This is also used on the defense bot but the zone is around the goal white line.",,https://drive.google.com/open?id=1L2FYRb3xst9gL2TcR4oYC9vXm8d_Tzjr,"Robots (cost of components that are in your robots right now): 1000 Euro each
Experiments (failed builds, broken hardware etc.): 1750 Euro 
Environment (fields, balls, etc.) : 150 Euro

1 Euro = 1.14USD",80% parents 20% school,6,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",henry.zhou28@stgeorges.bc.ca,,
7/12/2025 18:37:15,AIR,Lightweight League,"Ritsumeikan Moriyama High School, Moriyama, Shiga, Japan",Tanuki.1116.au@gmail.com,https://x.com/air_3838?s=21&t=FOVZXhIMGPvi0YPvd8sd3Q,https://drive.google.com/open?id=1axyjSr9OPtu9hwuw9JAkyAfoHj5TU0PI,"Asahi Uchida: Captain, Circuit, PCB design and Programming 
Kosuke Kano: Programming 
Kengo Nakazawa: Hardware design
Sora Matsui: Hardware design assistant",Five times a week for two hours,Robotics club at our school Ritsumeikan Moriyama High School.,4 years ,"Japan Open 2021: Soccer Entry league
Japan Open 2022~2025: Soccer Lightweight league ","I asked my mentor to purchase tape, soldering iron, tools, etc., which we use in our daily development. Our mentor can’t do anything on our development, just only advice.","We used LINE as a communication tool and Github to manage the team. We also used Notion to manage schedules, goals, and development notes. Since we basically met and developed the team every day, there was no need to use such tools too much.",Translated the poster's and this TDP Japanese into English using chat GPT.,https://drive.google.com/open?id=1HNpPhVI-17ZfU5CUp4WSNI5RumQ7ISUM,https://drive.google.com/open?id=1Ct-6Y6rMJuaUlD-kdhA_dkudC4BWahQI,https://drive.google.com/open?id=17_4Pe5ekIoUJvSrI3frFcidv34emMkMz,https://drive.google.com/open?id=19J6R2vveJqmtXuBeJP72X69Bb0JwQKWC,https://drive.google.com/open?id=1oYugrz4hJJ3uZa_TPoVRf_NcqiHicL_7,https://drive.google.com/open?id=1cE29WCPZ6ByIQCFvCMYnJ739OhdLwNO4,https://drive.google.com/open?id=1pvafH--bEsWvfO30yfuq-9qIMqx1UK66,"We have not implemented any special method for precisely determining the robot’s position on the field. In the context of RCJ LWL, we believe that such information can actually become excessive, leading to unnecessarily complex processing and increasing the risk of errors. Therefore, we feel that simply estimating the approximate position using the angle of the goal detected by the camera provides a sufficient and well-balanced solution.",https://drive.google.com/open?id=17ODHHFOwMiGFitE6rSRioIPFa71oXl3y,https://drive.google.com/open?id=16MrORgIYxYhhH3XdLX6VdhnIvXXlZUjA,https://drive.google.com/open?id=14R3rDBOPB4MC3hzjmiEyhvNTnkqdx3UL,https://drive.google.com/open?id=1OBNbUqX5BjuwXYgINCc22I4YSl5A3MMz,https://drive.google.com/open?id=1C9skSL46mrGP2LCW4qa1ExNfI-vt6bTY,https://drive.google.com/open?id=120EVOykOaucyVogbHcgS0ciXOwToiz6K,https://drive.google.com/open?id=13H-7Xcy4UR4W39EvGYD7b1amGnzhFVhp,"The robot frame was designed in Fusion360 and 3D printed. Circuit boards were designed with KiCad and ordered from JLCPCB.
I programmed using VSCode. We added a camera to stabilize goal detection and introduced a kicker to shoot while avoiding opponents. To improve maintainability, the motor can be removed without full disassembly, and the line sensor can be detached from below.
Omni-wheel improvements included replacing a 3D-printed fixed part, which melted from motor heat, with a metal hub. We also increased the infill to 100% and used ABS filament. These changes made the tires durable even at high motor speeds.","All robot frames are 3D printed in our club using Bambu Lab, FlashForge, and Raise3D printers. Therefore, we rarely order from outside companies, except for special frames. Circuit board designs are ordered from our sponsor, JLCPCB. For urgent needs, we use universal circuit boards.
When attaching the kicker, the motors initially interfered due to their wide size. We fixed this by rotating the motors slightly, taking advantage of their flat surfaces to avoid interference.","Both Robot1 and Robot2 use four motors for higher torque. Four wheels provide better resistance to pushing forces than three wheels due to their combined movement vectors.
We made the omni wheels ourselves. For Robot1, each side wheel has its own shaft secured with washers on both ends for durability and smooth rotation. Urethane was used for its wear resistance and ease of laser cutting, suitable for many matches in the World Championship. For Robot2, side wheels are fixed together with a wire and washers, using silicone rubber as before.","The kicker is fixed to the lower frame using a custom-made 3D-printed mount. To ensure that the kicking force is transmitted effectively, we fine-tuned the position of the kicker.",,https://github.com/Gamu2124/RCJ2025-Brazil_CAD-design-files,"Our greatest pride is the improved maintainability. We redesigned the structure to minimize screws and nuts. Previously, motor mounts were separate and fixed with screws; now, they are integrated into the lower frame, reducing damage risk from loose screws. This design also allows easy motor removal without disassembling the whole robot, greatly improving maintenance.","https://drive.google.com/open?id=1WN5L4tTjP5EgvGlgEnocQzZ1-P-OZVnf, https://drive.google.com/open?id=137-e6qq1G0c56n0qdd5EoT-FHFLRdboF, https://drive.google.com/open?id=1J-pEFnmy6zC-_W9LCmyrnxv0GeMfRyv6, https://drive.google.com/open?id=1r-SAyPAAPhzp_enYoB-9h6a_8wzW_w4F, https://drive.google.com/open?id=1bJC-tc0OnnRdKqNee_UgarYkHAgsXova",https://drive.google.com/open?id=183nf04zRkcFu0oq7SPrkViv7lD22Qh13,"We use an 11.1V LiPo battery. The power distribution board steps down this voltage to 5V and 3.3V using a DC-DC converter. The 3.3V output powers only the motor control board, while 5V is supplied to each microcontroller. Both the main and line sensor boards further step down 5V to 3.3V via linear regulators. The kicker voltage is boosted from 11.1V to about 40V.","The motors used for robot1 are DRV8432, and for robot2 are DRV8774. The elements are operated by inputting the power supply voltage and high voltage 3.3V and 5V. The input PWM is sent from the main microcontroller.","Our main microcontroller is the Teensy 4.1, about 38 times faster than the ATmega2560 we used before. It solved previous speed limits and offers easy debugging and many UART pins. For sub-microcontrollers, we use the ATmega32U4 for 16 ball sensors—too many for the main controller—and the ATmega2560 for line sensors. The ATmega32U4 was chosen for its dedicated processing and strong support. Previously, line sensors were read as analog inputs via a multiplexer, causing slow response and out-of-bounds issues. Switching to digital outputs processed by the ATmega2560 greatly improved performance.","We use TSSP4038 sensors as ball sensors, reading digital signals. By combining their vectors, we calculate the ball’s angle with 0.1° precision and estimate the distance using the Pythagorean theorem. The UnitV AI Camera is used only to detect the goal’s angle.","We use 24 sets of phototransistors and LEDs as line sensors. In Robot1, analog signals are converted to digital using comparators and processed by a sub-microcontroller. In Robot2, analog signals are read directly by the main microcontroller via a multiplexer.","We use the BNO055 sensor to detect the robot’s orientation. Data is read via I2C communication and processed by the main microcontroller. We do not have sensors such as ultrasonic sensors or LiDAR for position detection installed. Although currently under development, we plan to implement self-localization using cameras in the future.","For the kicker, we boost 11.1V to 40V with a step-up converter. The microcontroller controls capacitor charging and discharging via digital pins that switch a P-channel MOSFET. To isolate the main microcontroller from the 40V line, we use an AQW212 optocoupler.",We don't have dribbler,"https://drive.google.com/open?id=1av1kICUuhU7M-ZXPbWHk2MJdx_kmg8Ln, https://drive.google.com/open?id=1o4XxhyBAypE8takjPAsQU0oVYgdPLhZ2, https://drive.google.com/open?id=1w9VdBgtX6IXPVoxHFHD3oVNW-WuZu4GT, https://drive.google.com/open?id=1CmcZXyQGcmMC4N3Qs1YPxXnbeSyHv7jP, https://drive.google.com/open?id=1VE45WGVCTGTToT8ewZXVkcug076XxlOX","https://drive.google.com/open?id=15B2zRDO_IdJ713X-WRxcYlyXk_0I1fc9, https://drive.google.com/open?id=1fZnlaSROHvuAL-ZutyAXNvBhLTd95Vkk, https://drive.google.com/open?id=1JWk3mQJ_zreDQaZLD7I-p69BrVbGaQFB, https://drive.google.com/open?id=1lmAdlyDv9Aq7cuiAOfeJ2RrXbDSFqucD, https://drive.google.com/open?id=1Plaj4T5wOfzrtlx-BZJdJLs5DZNidl-Q","This section covers the line sensor. Previously, analog signals were read via a multiplexer, causing slow processing. Adding a microcontroller and using comparators to convert analog to digital enabled fast, reliable line detection. To improve maintainability, we redesigned the robot so motors can be removed from below, requiring a large hole in the center of the line sensor board. Despite having the most wiring, we made it a two-layer PCB to keep wiring neat and maintenance easy. We are proud of these line sensor board improvements.","https://drive.google.com/open?id=1XZBcHs6v2CjiAoOOFE0FRsWA17PKPVfl, https://drive.google.com/open?id=1KbmR9fa6Ur7dKa7NNzQwevtwDExgUTf2, https://drive.google.com/open?id=1y73xIbV_nPlck5Ay60lhV1llU0DsMLfV, https://drive.google.com/open?id=1BqDXOxTgpM9tYb5DK52wfHVP3qF04D2y, https://drive.google.com/open?id=1HUlHHEgyIOaG9ulrerPQmF5tbB64RKTS","The motor is operated using the DRV8432 and DRV8774 motor drivers. This product has a built-in switching element, and can drive the motor by providing the appropriate PWM, power, and signals. The processing is done by Teensy4.1. The angle is calculated from the detected information, and the speed of each motor is determined accordingly. Specifically, this is expressed by the formula sin(radians(ang - mAngle[i])) * speed + DIR.","Ball sensor digital values are accumulated over fixed cycles. From the total, we estimate the ball’s approximate direction by finding the closest sensor angle. Using the sensor with the highest value and its seven neighbors, we perform vector synthesis to calculate the precise ball angle. Distance is then estimated using the Pythagorean theorem based on this vector.","Robot1 acts as the attacker, circling the ball and controlling movement by linearly scaling based on ball angle and applying distance-based corrections. Robot2 is the defender, usually guarding the goal with line tracing. From the neutral point, it moves toward the ball’s angle to try and knock it away.","We use line sensors to detect white lines. In Robot2, analog values are thresholded into digital 0 or 1, like Robot1. Active sensor positions generate vectors to detect line direction. When multiple sensors detect continuously, their vectors combine to find the line’s overall direction. If detections are scattered, synthesized vectors are further combined to calculate the final direction and line angle. If over half the robot crosses the white line, the dot product is used to decide moving opposite the detected vector to return. Even if fully inside the line area, the robot can recover using the last stored detection vector.","After circling the ball and confirming possession, the robot enters the shooting phase. It detects the goal’s angle and moves forward, adjusting orientation to face the target. Once aligned, it shoots using the kicker. To handle goalkeepers, we developed a camera-based enemy avoidance system. Unlike typical teams that detect only short defenders, we split the goal into two zones when a defender is present. This lets the robot recognize tall defenders and avoid them by identifying the opponent, greatly improving stability and shot success.","Robot2 plays defense by line tracing the white line in front of the goal and moving sideways to block the ball. It adjusts its speed based on the ball’s velocity to handle angled or fast shots and predicts the ball’s future position for better defense. To prevent leaving the goal area, Robot2 uses a rear-facing camera to automatically return to its original position, ensuring it stays in front of the goal.",,"We are especially proud of our camera-based enemy avoidance program. Previously, our shooting success rate was low, and we struggled to use the kicker and camera effectively. Since implementing this program, we consistently avoid defenders and make accurate shots. Notably, we successfully bypassed the goalkeeper of ""Edge,"" the team that won last year’s World Tournament overall championship. Their defense was considered the strongest in RCJ LWL, so scoring against them was a major achievement we are very proud of.",https://github.com/Gamu2124,https://drive.google.com/open?id=13_2jpun1usE1WLPjgzjHNNAH6_dpc-Sv,"Robots (cost of components that are in your robots right now):150000 yen each
Experiments (failed builds, broken hardware etc.): 100000 yen
Environment (fields, balls, etc.) : The total, including the items used in the club activities, is 1,500,000 yen, but for the team, it is 50,000 yen.
1 USD = 147.33 yen","40% sponsors
10% school
50% parents",1,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",tanuki.1116.au@gmail.com,,
7/12/2025 21:38:13,Hyperion,Lightweight League,Australia,"Email: matthew.charles.adams@gmail.com (Matthew Adams)
Email: sam.garg2101@gmail.com / Discord: fitzsywastaken (Sam Garg)
Email: thomasm_01@outlook.com (Thomas McCabe)",Not Applicable.,https://drive.google.com/open?id=1yYRPjbjFPdUIeakOINHkeLEc5mQNmFID,"Matthew Adams: Hardware & Electrical
Luke Atherton: Hardware
Sam Garg: Software & Strategy
Thomas McCabe: Software","5 to 7.5 hrs, 2 to 3 days a week. (Total 15 to 22.5 hours)",At our school's robotics room.,"Our team started working on this year’s robot very late last year, starting ideation and the design process in late December 2024. ","RCJA Onstage Challenge (2021) – Matthew & Sam 

RCJA Secondary Rescue Challenge (2022) – Matthew, Sam and Thomas 

RCJA Secondary Rescue Challenge (2023) – Thomas 

RCJA Open Rescue Challenge (2022) – Luke 

RCJA Soccer Standard League (2023) – Matthew, Sam, Luke 

RCJA Soccer Standard League (2024) - Thomas 

RCJA Lightweight Soccer League (2024) – Matthew, Sam, Luke ","Some parts of the software that have required more work and help from our mentor are our light sensor library. The bit shifting inside our light sensor library was confusing, and therefore we reached out to our mentor to help us understand how this worked. 

From a hardware and electrical perspective, there was some contribution from our mentors. Mentors assisted in the operation of 3D printers and our CNC machine for manufacturing custom designed parts. Additionally, the PCB design was difficult, with many different layouts that could have been considered, and therefore, we asked our mentor for advice on the possible placement of components. Additionally, before ordering our PCB’s they would check to ensure there were no major errors. ","We printed out an excel document that we stuck against the wall near our desk, which included the major deadlines that we needed to meet. Some examples include the robot orbiting, the robot defending, the camera working, the TSSPs working, etc. Also, we communicated through a WhatsApp group and used GitHub for easier collaboration.","We used AI (ChatGPT) to assist in this technical document and improve our formatting, not only this, but we used within our website to make it look more professional and provide some suggestions to make it look good. In addition, we also used it to find some simple issues in the code and used it as a second eye when debugging some things inside the code, however it was not used often and was only used when needed from a software perspective. ",https://drive.google.com/open?id=1LMOnz3F09jha5XlGM1xvVnvf_qlNTxOH,https://drive.google.com/open?id=1XrZ_SwXLVDlkDw0mKoXpPhIz1ppkEAQ0,https://drive.google.com/open?id=16CJA3TVil2053wMqCfH3xT7H8f6kaqH0,https://drive.google.com/open?id=17KMDpOmysDb7QPe5X7PfWhaxlht2d59s,https://drive.google.com/open?id=15rpylh14uDhSP2Bdr5JPJi-R_46dThW0,https://drive.google.com/open?id=18HllNWxFLDm6mIpsBvIWmZRH8SLeyO3m,https://drive.google.com/open?id=1WP-2O66mkHnf8W8FU6EF_e_uaasyGbTg,"We determine our position on the field using the OpenMV H7 Plus camera, which also provides information about our distance from the goal. This data allows us to switch between goal tracking and facing forward during regular movement with the attacker. Our positioning system also helps us adjust our vertical placement on the field when defending.",https://drive.google.com/open?id=11ZZcUERojKFYoUOlnpl1MQdHrRbyRlOH,https://drive.google.com/open?id=1feGhtQ4aBSFNiArEDjA_tTA2zSJh5uny,https://drive.google.com/open?id=1SNfLjENJYLPZuh8dJ4BN95RfbZ1TZzBY,https://drive.google.com/open?id=1_dsdTsySa7nVa96m2dLKHLeToYHSX3c4,https://drive.google.com/open?id=1gMwr6fhZ8e-9oY3HU3D6R_iNWtfc91VV,https://drive.google.com/open?id=1gyGcrrCWgNO1gFHD_bm54Gdih2RrzlTy,https://drive.google.com/open?id=1p9l3I33XOkbBwhtMTcGL7W4RyZ89i-g5,"The CAD program Autodesk Fusion 360 was used to make the design. During the design process, size, weight and accessibility to important components were considered. For example, the microcontrollers, camera, fuses and batteries were key things that were considered.

Some things that we did have to change after our initial design, was the way the mirror was mounted for optimal 360 view of the field. This meant that instead of using standoffs and a plate, we used an acrylic tube to limit blocking the image on the camera.","The machinery used to make and manufacture our design was the Bambu Lab 3D printer with PLA and ABS filament, as well as a CNC miller with 3mm thick aluminum. We order PCBs from the company JLCPCB. The components of these boards are ordered from a variety of websites and companies, but we try and order them from Digikey, making them our main website for ordering components. A change we had to make was where the battery was for easy access and secure fitting, as well as where the wheels were positioned to detect the line early.","This part is for describing how many motors your team used and why you chose this many motors for your robots’ movement. If you have built your own wheels, it’s also recommended to explain why and how you designed the wheels. Please mention any part numbers of parts you used here as well as in the Bill of Materials (BOM) form. 

We use 4 motors for increased power and speed, and to improve balance and control for full 360-degree movement of the robot. For this 360-degree movement to occur, we made omnidirectional wheels, so the robot rolls flawlessly around the field. The wheel frame is made from ABS filament, while the rollers are made from silicone with a metal core. These wheels are positioned around a metal wire to keep them in place. ",Not Applicable ,Not Applicable ,https://github.com/SamGargRobotics/Hyperion2025/tree/main/Hardware/CAD%20Files,"The part of the mechanical system that we are most proud of is the speed and smoothness of the movement, due to the position of the wheels and their design, as well as the motor choice. Another mechanical system we are proud of is the mirror system, particularly the use of an acrylic tube, which eliminates the blind spots created when using standoffs, allowing for constant, consistent, 360-degree goal vision. ","https://drive.google.com/open?id=1MvMrdLo-S0TNAtuPm2faainjRDlVKplh, https://drive.google.com/open?id=1-O4kcBWpV2hhUmh7FrlMDG0BVUPIPZGw",https://drive.google.com/open?id=1zj2JFtK7ZfK65liXLQd6z-xFbrj7Z88e,"Our robot uses 1 12.6V 1300mA battery for our motors and motor controllers, which gets regulated through a linear 5V regulator for the Teensy 4.1, and then it goes through a 3.3V linear regulator for the OpenMV, TSSP’s, HC05, BNO005, and Light sensor board via a FFC connector. ","We use VNH7070s as our motor controllers, which are powered by 12.6V. They then connect to the motors via JST connectors. The motor controllers are controlled by the Teensy with PWM and Enable A and B signals. PWM signals allow us to have fast yet controlled and accurate movement with the robot.  ","Last year, we used an Arduino Mega, which was 16 MHz and chunky. This year, we use a Teensy 4.1 as our only microcontroller. This was chosen due to its size, ARM Cortex-M7 processor at 600MHz, and four times larger flash memory than the 4.0, which was commonly used with past teams.  ",We use 16 Tssp58038 sensors in a circle for a full 360-degree detection. These sensors are powered via 3.3V with resistors for protection of the sensors. The signal outputs are directly connected to the teensy pins. ,"We use a separate PCB for our line detection. This PCB is powered with 3.3V transferred through an FFC Connector from the main board. This PCB contains 32 Red LEDs and 32 photo transistors. Each LED and photo transistor is accompanied by resistors and 0.1uf caps to smooth out signals and to prevent breaking the fragile components. The signals are transferred to 2 16-bit Multiplexers (MUX) 1 for the right side of the board and 1 for the left. These Multiplexers are used for easy reading of many sensors. The outputs from the Multiplexers are transferred through the FFC to the main board, then transferred to the Teensy. ",We use an OpenMV-H7-plus R4 to calculate where the goals are and a BNO055 to calculate the direction in which the robot faces. The OpenMV and BNO055 are powered with 3.3V and are connected to the Teensy via UART connection (UART is RX and TX). ,Not Applicable ,Not Applicable,"https://drive.google.com/open?id=1yAB2W75EoZ_kHwv3Z2GIWXxNu678cT2B, https://drive.google.com/open?id=1v-Uu0IIs0GQBcpb7qd96CMfAcPF82Y6L",https://drive.google.com/open?id=1RO0zf-We4XVj7hxjPW8Rkcykn97AHN_s,"The parts of our electronics that we are proud of are the design of the PCB. For example, the routing for the motor controllers was difficult and time-consuming because we needed to try and fit 100 mil width traces to reduce resistance in the circuit and have the motor controllers be in an easy-to-access position for easy repair if the motors come unplugged or damaged. Additionally, the motor controllers had to connect to the teensy so space for all the traces had to be considered. ","https://drive.google.com/open?id=1vTq7ZKEh4Myf4COj3FCn9UEa1J5z0G2r, https://drive.google.com/open?id=1GTGEWElfVdnps9HCc-ztIVmTNV-uzfaf, https://drive.google.com/open?id=1pY0lCu0hXR2xOw3s2MaZDbmHtEaHDuKW","The drive system is responsible for translating directional movement and rotation commands into specific speeds for each of the robot’s four motors. When the system is initialized, the relevant pins for motor control are set to output mode, preparing them to receive PWM signals for speed and digital signals for direction. During operation, the system receives a target movement speed, an angle, and an optional rotational correction. The angle is internally shifted to align with the robot’s orientation system, and for each motor, a calculation determines how much it should contribute to the desired direction. This is done by projecting the movement vector onto the motor’s relative orientation using a cosine function, then scaling it by the given speed and adding the rotation correction. After computing motor values, the system checks for any that exceed the maximum allowable PWM value of 255. If any do, all are scaled down proportionally to preserve movement accuracy. If debugging is enabled, the calculated values for each motor are printed to the serial monitor. Finally, each motor receives its speed through a PWM signal and is assigned a forward or reverse direction based on whether its calculated value is positive or negative. This system enables smooth, omnidirectional movement with integrated rotational control. ","The TSSP5038 library is used to determine the direction and strength of the IR-emitting ball by reading each sensor (TSSP) 255 times per cycle. Each read returns either HIGH or LOW, producing a final value between 0 (never saw the ball) and 255 (saw the ball every time). A reading of 255 is extremely rare and typically indicates a faulty sensor. In such cases, the reading is temporarily replaced with the average of the two adjacent sensors to maintain functionality, although clusters of broken sensors cannot be corrected and require hardware replacement. Once all readings are gathered, the four highest values are selected and multiplied by their respective X and Y coordinates on a unit circle. The sum of these results gives an X and Y vector, which is then passed through the atan2 function to determine the ball’s angle. Ball strength is calculated using a weighted average: (Top1 × 3 + Top2 × 2 + Top3 × 1 + Top4 × 1) ÷ 7. If this strength value is greater than 0, the ball is considered detected and likely present on the field. ","Our robots rely on data from the TSSP sensors and their corresponding libraries to calculate the direction of the IR-emitting ball. Interestingly, both robots use similar movement strategies to approach the ball, but their underlying logic differs based on their roles—attacker or defender. In attack mode, the robot plugs the calculated ball direction into a specifically tuned exponential function. This function outputs a direction that guides the robot smoothly toward the ball. Once the ball is caught, the robot uses the x and y coordinates of the goal—provided by the onboard camera—to calculate the angle to the goal, allowing the robot to face it accurately for a shot. 

On the other hand, the defender employs a different algorithm that uses PID control combined with vector mathematics. This method helps the robot determine both the direction and the precise speed required to intercept or track the ball efficiently. It uses both vertical and horizontal PID values to stabilize and fine-tune its positioning. While the attacker turns to face the goal, the defender, by contrast, faces away from it, using calculated angles from specific algorithms to better anticipate ball movement and protect the goal area. ","To locate the line, we use a method called clustering. This involves breaking up sections of the light board that read above a certain threshold and marking them as white. Clusters are then formed by identifying continuous sections of these white values — a cluster starts when a white-marked index is found and ends when the next index is no longer marked. The centre point of each cluster is calculated, and the average of all cluster centres gives us the direction of the line. We then send over the direction opposite to this line to guide the robot away from it. 

We use the clustering method because it effectively identifies the location of the line while filtering out sensor values that are outliers. It’s a simple yet robust approach to line detection that avoids excessive complexity and special-case handling. ","Our robot does not use a dedicated dribbler or kicker mechanism; instead, we rely on strategic movement and accurate positioning to score goals. The primary tools we use are a camera for goal tracking and TSSP sensors to detect the direction and strength of the IR-emitting ball. The camera helps identify the position of the goals, allowing the robot to orient itself relative to the goal. Meanwhile, the TSSPs provide real-time data on the ball's direction, which we use in conjunction with our movement direction calculation algorithm. 

This algorithm adjusts the robot’s heading based on the ball’s position, allowing it to approach from an optimal angle rather than charging directly. This helps us keep the ball between the robot and the goal, which is crucial for accurate and consistent goal scoring. Additionally, the robot orbits the ball when it’s not directly aligned with the goal, moving in an arc to realign both itself and the ball towards the target. This orbiting motion helps maintain control and positioning until a clear shot path is available. Together, these methods simulate the role of a dribbler by keeping the ball close through intelligent movement and allow us to effectively score without the need for a mechanical kicker. ","Our robots primarily rely on defensive positioning rather than directly preventing opponent shots. We calculate the distance from our goal using pixel-based x and y offsets detected by the camera. By applying the Pythagorean theorem, we compute the goal distance in pixels. Based on this, we use two tuned PID controllers—one vertical and one horizontal. The vertical PID handles the robot’s movement forward and backward based on how far it is from the goal. The horizontal PID adjusts side-to-side movement based on the ball's lateral position; if the ball is to the left, the robot moves left, and vice versa. To achieve a combined response, we use vector math to blend the two PID outputs using Pythagorean and tangent calculations. This results in a final direction and speed vector that ensures the robot moves efficiently to block or intercept threats while staying optimally positioned in front of the goal. ","We use an HC-05 Bluetooth module to enable communication between the robots. Through this connection, the robots share ball direction and strength data, as well as their current logic state—whether they are attacking or defending. The ball strength values play a key role in determining each robot's role. By comparing these values, the robot with the stronger ball signal is assigned the attacker role, while the other switches to defence. This ensures coordinated and dynamic role switching based on real-time ball visibility. ","One of the innovations we are most proud of is the integration of the camera into our main.cpp, which plays a vital role in our robot’s performance. This system allows us to track the goal with high precision, significantly improving our attacker’s accuracy when aiming shots. For the defender, the camera ensures the robot can correctly orient itself away from the goal while maintaining an optimal distance to block incoming shots effectively. Additionally, the camera helps us determine our position on the field, which enables us to implement more advanced strategies. For example, we can decide when to switch between goal-tracking mode and regular BNO-based correction, ensuring our robots respond more intelligently during gameplay and increasing our chances of winning. ",Our GitHub Link is here: https://github.com/SamGargRobotics/Hyperion2025/tree/main/Software,https://drive.google.com/open?id=1pIbcVkXokxuHcKBte3-nEanknFgKTQcQ,"Robots (cost of the two current robots): 1781 Australian Dollars 

Experiments and Spares (failed builds, broken hardware, additional spare components and parts): 660 Australian Dollars 

Environment (fields, balls, tools): 0 Australian Dollars (no environment cost as environment was re-used from school teams from previous years) 

1 Australian Dollar = 0.66 USD ","As we are part of our school’s co-curricular robotics program, we receive all of our funding from our school. We didn’t receive any direct sponsorships or funding from parents, so 100% of our funds to build our robots were from our school. ",4,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",thomasm_01@outlook.com,,
7/13/2025 1:52:21,Apex,Lightweight League,Taiwan,im.terry0802@gmail.com,,https://drive.google.com/open?id=17qJttnIYm2NJKxDFjr4uqNkOthSRtQth,"Abiel: Programming, Board design
Halston: Circuit and PCB design, Engineering 
Terry: Board design, Engineering, Circuit design
Ryder: Programming, Engineering",Every weekend at least 4 hours(weekday if have time) ,"No. 191, Section 3, Roosevelt Rd, Da’an District, Taipei City, 106", 2025/3/30,"RoboCup Japan Open 2025 (Nagoya)
RoboCup Taiwan 2025
",Mental health support and technical guidance	,The team manages its workload by assigning daily tasks and dividing responsibilities based on each member’s capability. Meetings and discussions occur to ensure the team has efficient development and prevent ongoing setbacks.   ,"The team collaborates with ChatGPT as a research assistance, because ChatGPT can recommend  suitable electronic parts in a few seconds and guide the team through complex programming bottlenecks. ",https://drive.google.com/open?id=1xCpNFBypwakNeTjb7ivJHPnTiot6RVhw,https://drive.google.com/open?id=1ExfDkEXQ8L7gY0ppVszo3JvN5IOmU4l_,https://drive.google.com/open?id=1EX8tFBhOuZilFWV-W4rJuxsv-OtrtbID,https://drive.google.com/open?id=1qQQNH3q-MjVtTPFQmqhiUwbaG2C8gMH9,https://drive.google.com/open?id=1pK9sdGoNpRrYFwOkNGm7Bh_wYcSCRuYU,https://drive.google.com/open?id=1428uPEAUU0yW_Fef06ycIp6vzlfO7WD1,https://drive.google.com/open?id=1Q8DqIqhguAFDmnN_JfhVgr694ZTUJ4Hm,"The team incorporates ultrasonic sensors and light sensors, or light ray detector to position the robot inside the field. In order to let the robot identify its position, ultrasonic assist the robot to determine the distance between the field wall and itself. Moreover, light ray detectors detect the border line to prevent the robot from venturing outside the court.",https://drive.google.com/open?id=1qrW-OqdsbOMNCF5x-b84G8E_rD8fsbEH,https://drive.google.com/open?id=1A2U-nfzVwueHNbr8wlPd3MAZjd8rtrIg,https://drive.google.com/open?id=1g_2OFjRKgKo2vxuJRS6zANJ7Xo9zit2M,https://drive.google.com/open?id=1kLohK6npSDuzu7ybO49nnkrALsuG60AK,https://drive.google.com/open?id=15e9ah1uGkyorXbdraE8jP4eBappDhZKz,https://drive.google.com/open?id=1Ja_g3pLMTN47sP8HIIQKUhBYcvHQKI0f,https://drive.google.com/open?id=1j1x9FNoE7GJnSG9EpXIrIk0wMVpVRyiQ,"The team uses Fusion 360  to design the chassis and the layout of the robot. Fusion 360 is an online platform possessing powerful cloud-based CAD, CAM, and CAE by Autodesk. The team decided to use the following platform due to its high adaptability with complex mechanical parts, and the platform can simply convert the design into suitable manufacturing files. Moreover, the team decided to include both dribbler and kicker to our design and elevated the ultrasonic. Essentially, the team expects the robot to obtain high durability, mobility, and accuracy to express the best performance throughout the competition. The team wants high durability, so the robot can resist continuous impact from opponent robots, mobility to outrun the opponent, and outstanding accuracy to successfully shoot in goals from various angles. Eventually, the team started to create more one-piece molding equipment, like the holder for both kicker and dribbler, and more PCB for better organization to improve our overall design.","The team uses 5 motors, 1 solenoid, 4 ultrasonic, 8 light sensors(offense), 11 light sensors(defense), 2 IR receivers, 2 driver boards, and 1 processor. Specifically, 4 of the motors(IG220019) are used for locomotion and use V2306 V2 motor for the dribbler, while the solenoid serves as the kicker. Also ultrasonic sensors are utilized to measure the distance between the border and the robot. Additionally, using light sensors to avoid out of bound, while IR receivers are essential for ball tracking. Lastly, the driver boards and processor are both the core of the robot. Additionally, the team used JLC PCB to manufacture the driver board and mother board of the robot, since JLC PCB is one of the largest PCB manufactory and the collaboration with easyEda allows the user to customize their own PCB with decent quality, low-cost rapid prototype. For changes, the team utilized Infrared (IR) sensors instead of relying on multiple lines, as IR detection provided a more consistent and stable experiment result under various conditions, including lighting environment and surface materials. Therefore, the decision significantly reduced environmental variability, including changes in brightness or glare. This often affects the traditional line detection systems. By simplifying the input system, the team minimized potential sources of error, allowing more reliable navigation and easier debugging. Furthermore, it simplified the process of cable organization, provided efficiency to the team.","The team uses at a total 5 motors in each robot for basic moving and dribbling purposes. The team uses 4 IG220019 motors to operate basic moving for the robot, because the motor acquires fierce torque power, low voltage, and lightweight. Moreover the motors are manufactured in Taiwan, hence the motor also represents Taiwan’s strength in mechanical development. Furthermore, the team uses V2306 V2 motor for the dribbler, due to its powerful torque, lightweight, ability to do precise control, and minimal size. Additionally, the motor contains an optimized winding and magnet layout to prevent overheating. The team once attempted to design the wheels with silicon tubes and custom POM(polyoxymethylene) chassis to form a wheel with higher friction to gain more resistance against the impact from opponent robots.  Eventhough the wheels are not our own design, it is still optimal for the overall structure of the robot. By using an omnidirectional-wheel, it fits the design of the robot with four diagonally aligned motors for it to move smoothly on the x and y axis even if the wheel is not parallel to the direction it is moving. ","The team achieves accurate shooting by working with a kicker. Essentially, the kicker is developed around a solenoid-based mechanism, including a solenoid, relay, and processor’s signal. This combination lets the solenoid produce powerful strength for ejection. In particular, when the processor sends a signal to activate the relay. The relay serves as a high current switch to charge up the solenoid, so as the relay closes, the potential charges are released and create a strong magnetic field. The magnetic field accelerates the plunger inside the solenoid to make it move forward forcefully and strike the ball to its destination.","Our robot's dribbler mechanism was carefully designed to optimize ball control and precision during gameplay. We used a compact, high-torque motor to drive the dribbler roller, ensuring consistent spin speed and reliable torque output. Additionally, the roller itself needs to be made from a high-friction material, allowing it to securely grip the ball without slipping during fast movements. The dribbler's chassis was built with lightweight and durable materials to minimize overall weight while maintaining structural integrity.",,"Out of all of our innovations and mechanical system, as a team we are most proud of our dribbler design. The measurements for the dribbler are extremely accurate, using all available space as declared in the rules, “Robots may weigh up to 1.4 kg, may have a ball-capturing zone of up to 3.0 cm” (Soccer League Committee 2025). Because of the careful measurement of the capture area, the ball can comfortably fit the semi-circle area with the dribbler perfectly lying on the surface of the ball, providing the most friction to push the ball towards the robot and secure it while following the rule. Other than the perfect measurement of the dribbler, there is one more aspect that makes this dribbler perfect. The whole dribbler is assembled on a piece of well designed holder, being assembled isolated from the main board of the robot, providing more efficient repairment and maintenance when any part is damaged. ","https://drive.google.com/open?id=1Bdad-ZM1v2Py_86qIUHvC-SG8AlR4vrl, https://drive.google.com/open?id=148qxoFCANCehllVKw2C9mNibwEAqmj49",https://drive.google.com/open?id=1tS5NKU6RX545NfJoBMPUEDB3qgRoR1Ed,"Our robot has a 12V battery pack that is regulated down to 5V using a buck converter to ensure a stable and safe power supply for our microcontroller. The 12V output is connected to the motor driver, which will control our 4 motors."," The team uses 4 IG220019 motors to operate basic moving for the robot, while using V2306 V2 motor for the dribbler. Specifically, the team directly connects IG220019 to the driver board and uses 4 pin cable to connect to the processor. Moreover, the team connects the V2306 V2 motor to an ESC, which assists to manipulate the speed of the rotation. Then the ESC will be connected to the power and the processor. ","We use the STM32H743ZIT6 microcontroller as the main processor of our robot. We decided to use this part for our robot for its high efficiency, capacity, and excellent performance for precise locomotion and can still retain stability when multitasking. ","Our robot uses infrared sensors to detect the IR light emitted by the IR ball. Then, by comparing the signal strength of multiple sensors, we can estimate the direction of the IR ball. Once the direction is determined, the microcontroller can use it to calculate the robot's movement.","The team uses light sensors, which is a light sensor for line detection. Light sensors detect the light’s reflection ratio, which when the ratio is above a certain level. The sensor will transcript the ratio to the controller, preventing the robot from venturing out the court. All the light sensors will be connected directly to the processor’s analog pin.","We use light sensors for border navigation and ultrasonic sensors for determining where the robot’s position is on the field. Both sensors use analog data transfer, using 3-pin Dupont line to transfer GND, 5V vcc to the sensor, and an analog signal to the processor motherboard. We can adjust the robot's positioning accordingly with the signals from the sensors. For example, with the use of light sensor, we first scan the white border line at multiple position and record the numbers, later we average the sensor reading to acquire the number when the light sensor is on the white border line, so when the robot is running on court, it can detect when the sensor touches the border and move at the opposite direction to prevent getting out of bounds.","We utilized the solenoid kicker with a relay to perform kicking action. When the processor motherboard sends a high signal to the relay, it completes the circuit, allowing current to flow to the solenoid.. The solenoid then extends, delivering a quick and powerful kick to the ball. This system allows for precise timing and control over each kick. "," The team connects the dribbler with the processor, as the processor sends a high signal to the dribbler’s motor, the motor will begin rotating. The rotated motor will connect with a rod with gears to deliver the kinetic energy to the silicon roll to perform dribbling.",,,"We are most proud of our customized motherboard, it is designed by the team to fulfill every type of signal the robot needs. With the use of the powerful chip STM32H743ZIT6, we can use keil uvision to program our robot efficiently and use all the available pin to connect to various sensors in order to ensure smooth robot movement on the court. Since the motherboard is designed by us, we are able to decide what function it should include to make our programming easier and robot stronger. For example, our motherboard includes EEPROM to store important information like the average light sensor reading on white border line, so instead of manually keying all the numbers into the program and load it into the robot, we can use the robot to directly scan the border lines to get all the numbers stored  and ready to be implemented into the algorithm. Although we are most proud of the motherboard, since it is designed by the team and not official technical companies, some small problems can still occur while running the program, like motherboard resetting or the lack of pins to connect to sensors. This could be a major problem for other teams, but for us, we can just change the design of the board, like changing the capacitor to be able to hold larger voltage or changing the chip to allow it to connect to more sensors, and this is why we have multiple generations of motherboard. With each times improvement, we are more proud of our newest design and our robot will become better and better.","https://drive.google.com/open?id=1tOmBHZziBOt7BvGWOScHuWt4W4W8TYHb, https://drive.google.com/open?id=1RrsfXPm7wPoenOiOWVnwpbcJX6hjPYZN",The processor manipulates the motors steering direction and their speed through the driver board. ,"The robots use Infrared board (IR) to detect the ball, which plays an essential role. The ball itself will emit its signal, as a receiver the IR can easily detect the location of the ball. Which will be converted into signals to command the processor to operate commands.","The team uses different algorithms in both offense and defense robots. For instance, the offense robot uses Pythagorean theorem to find the nearest path to reach the ball and perfectly capture the ball into the dribbler. Additionally, the defense robot uses the degree of the ball to the robot to identify the ball’s location and maneuver to the degree where the ball cannot reach the goal in a straight line.","

Our robot uses light sensors to detect the boundary lines of the field. The light sensor emits pulses and measures the reflections to create a detailed detect of the surroundings. The robot identifies the contrast between the playing field(Green) and the border lines(white). These readings are processed in real time to determine the robot position relative to the edges. If it gets close to the boundaries, the system automatically adjusts its path to maintain its safety inside the field. ","For offense side, the robots detect the ball’s position using onboard sensors and strategically find the shortest path to reach the ball at full speed. After the robot reaches the ball, the dribbler will be activated and grasp the ball into the kicker. Eventually the processor will command the kicker to launch the ball into the opponent’s goal with high efficiency. Although the strategy might be simple and straightforward, the team believes the offense side should require high mobility, strength, and accuracy. Furthermore, the team developed a spin kick, which may trick the opponent’s defense algorithm and successfully score in an unexpected angle.","For defending, the robots detect the ball’s position using onboard sensors and strategically move to the ball. They constantly monitor the ball to prevent it from crossing the field’s white line, effectively maintaining control. By adjusting their position, the robots block opponents and reduce scoring opportunities, showing quick response times during defensive conditions.","The robots don’t technically communicate with each other, however by serving their own role in the game, the robots can ensure consistency of scoring and preventing opponents from scoring. ","Spin kick, side kick, and corner kick are the part that we are most proud of. Based on previous competitions of Robocup lightweight we attended, most of the time our robot is stuck with opponent robot at the corner. Although our motor and chase ball algorithm is better than the opponent, the powerful motor will push the opponent robot to the corner, leading to lack of progress or out of bounds, which is not an effective strategy. By implementing spin kick, side kick, and corner kick in to our algorithm, we are now able to score from corners with ease and also accordingly to the situation. When our robot is at the corner alone with the ball, it will preform a corner kick, which the robot will turn towards the goal and shoot at a well calculated angle. The whole action will be preformed under 5 seconds, leaving short reaction time for opponent defense robot and with the precise shooting angle, it can bypass the opponent's defense system and score. If our robot is at the corner but enable to preform a side kick to score, the side kick action will be skipped and the robot will preform a spin kick. A spin kick is done by spinning the ball in extreme speed and kicking the ball in a tilted angle looking at the opposite side of the target goal, because of the speed the ball is spinning towards the robot and the target goal, after it is kicked out, the ball will roll back against the shooting trajectory, creating a curved path for the ball to roll towards the goal. The robot will preform a spin kick when it is stuck with opponent robot or the defense robot is directing blocking the path for side kick, the curved path done by spin kick will go around both robot and score effectively. With these two strategies, our robot will have more chances to score and hopefully win us the game.",,https://drive.google.com/open?id=1Fnj2HgHgjIftVR5B3s-hHQrhGuegatCx,"Robots: 98198.36 NTD
Experiments: 56280.78 NTD
Environment: 250000 NTD(already use 6 years)
1 NTD = 0.034 USD",100% parents ,5,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",halstonchen1119@gmail.com,,
7/13/2025 2:10:29,Reset,Open League,Taiwan,ethankeju@gmail.com,,https://drive.google.com/open?id=1AUeAlpTsvZv3S2aB_s6-nyztoQJPgPpQ,"Ethan Lin : Hardware Design, Manufacture
Osborn Lin : Software Design, Manufacture","8-12 hours in total per week, distributed on weekend.",Robotics Laboratory outside of school.,Our team start working on this robot since the last RoboCup at Eindhoven.,"2024 RoboCup Asia-Pacific Soccer Open
2024 Eindhoven RoboCup Junior Soccer Open 
2024 RoboCup Taiwan Soccer Open
2023 RoboCup Asia-Pacific Soccer Open
2023 France RoboCup Junior Soccer Lightweight 
2023 RoboCup Taiwan Soccer Lightweight
2022 RoboCup Asia-Pacific Soccer Lightweight","We couldn't design the new motherboard completely due to the complex setup coding and PCB design, with our mentor's help, we are able to change some original design of the motherboard that we found should be change in the last competition while still maintaining most of the original function that works good in the last competition.  ","We use an google calendar and a timeline whiteboard at the laboratory to keep on track of what we are doing and what we time we should get it done. Since we have only two members in our team, the workload of each of us is much higher but the communication is much easier compare to bigger team so we are able to manage the workload and communication well through this traditional and easy approach.","AI is a good tool for researching and initial design. For hardware, we use AI to search for useful and organized information on sensors and how to control different sensors. When we need to design things that involve more advance skills that we haven't have such as designing a new motherboard that can also manage power supply for motherboard, dribbler and kicker, we use AI to check if your design is feasible and which component can fit the our goal the best. For Software, we use AI to give as innovation on how code can be change given what we want to achieve through the code. Nevertheless, although AI can help coding quickly and accurately in other task, when it comes to robotic coding that involve a deep understanding of the robot and game playing, designing and coding is faster and more precise most of the time.",https://drive.google.com/open?id=1U_q-ZyfBS0CyEi3fio50RvZIkE4nsQA4,https://drive.google.com/open?id=16UIplTBJYrEiAQvGrqqOqgQGX6fH-nqU,https://drive.google.com/open?id=1ZgYDsYvcJPKmdhzlCVXed6QhPCHPpEL8,https://drive.google.com/open?id=1v5CxfETKDy5he4k9E85gNpmaxv7A9tcA,https://drive.google.com/open?id=10bvn1ZTfzUrs2VkNsa8o7HoQBJB6U_0f,https://drive.google.com/open?id=1eCc9Rz6pa8LKeUos1RJ2ov95TY4FyQxu,https://drive.google.com/open?id=1rHLz_QZ3kBOIocrwOTijTAGTgMiQCbTr,We use the mirror and OpenMV with help of some code to calculate where on the field the robot is at.,https://drive.google.com/open?id=17Ve0FpdTeupuSQ76_wVMaPER1BnYwLRo,https://drive.google.com/open?id=13vn21VTF_WsvNzuEvB_4udItEHCrDXLZ,https://drive.google.com/open?id=1TT41x1g7DPUDzUkx0rz-wSIbDQ3ra4PW,https://drive.google.com/open?id=1vvxt8BZGwr1cRWjDMwmdBmBGbBK56ZNo,https://drive.google.com/open?id=1y9FF2jTACblhNFTZopVY05qWvCLr0ob1,https://drive.google.com/open?id=1ZzcCoBimxGCUjxQ8T6EhNDmNwkUMOYeV,https://drive.google.com/open?id=1VYpD90Fzx_p0O7yQ622jGocM5hxPV6kr,"We use Autodesk Fusion for the board design, PCB design and 3D plastic component design. For PCB design, we also use EasyEDA. We come up with this design through constantly trying new components and sensors. Every new thing we try, we evaluate the robot's performance with the previous version, if the robot perform better, we will adopt the changes and if the robot doesn't improve, we will continue to seek for better sensors that owe can use.

We consider the robot stability of performance heavily while also considering the ability to fit the gameplay. The robot stability that we consider is how the robot is able to performance consistently over 10 minutes (game time) without malfunction, lack of power and damages. The ability to fit the gameplay is how our robot is able to adopt different strategy we design that can help us score and prevent opponent scoring and how the robot can follow the game rule such as not going out of bounds or etc.

To make the design better, we will have to make the robot easier to fix. In our current robot design, although it can perform consistently without malfunction and adopt most of our defense and offense strategy, every time when we have to change the motor and other components, we will have to dissemble a lot of components and boards which isn't ideal since damage may occur anytime during the competition and we won't have enough time to dissemble and fix the robot.","We use 3D printers and CnC machine to manufacture the board and the 3d components that we design with Fusion. For the PCB, we design it ourself and send it to professional PCB manufacture to make it. For the mirror, we design it ourself through Fusion and send it to companies that can manufacture the aluminum to the shape and polish it ourself. For the boards and 3D components that we can built in the laboratory ourself, we are able to manufacture a new version when a problem occur easily. For PCB, we sometime will have to adjust some wrong current or sensors that can be fix through welding external wire or changing sensors on the PCB. For bigger problem that is impossible to fix without designing a new PCB, we will have to send to company for manufacture again.",We use four motors per robot. Four motors and each using omniwheels can provide the most stable movement while not consuming too much space in the robot.,"For the kicker, we calculate through physics equations on the ideal combination of the radius of wire and amount of rounds given our battery supply and space for the solenoid. We maximize the kicking power through using all the space we have for the wire to increase the power of the solenoid. We bough solenoid on market and dissemble the wire on the solenoid to follow the combination that we calculate can produce the strongest kick. We also replace the shell of the solenoid with tape so we can maximize the round of wires.","For the dribble, we bought single side brushless motor that is use in drone so that the spin speed and the power can be big enough. To connect the motor to the silicone dribbler, we design a customize gear that can fit the size of the space for dribbler the best. To make the dribbler dribble the ball more stably, we customize the silicone. To ensure the dribble follow the regulation when dribbling, we simulate depth of dribbling given the height of the dribbler and the radius of the silicone before making it.",,"Our most proud mechanical design is the dribbler. Although dribbler seems to become the basic component that every teams have, the stability and ball control ability can make a big difference when trying to perform different strategy with the dribbler such as spin kick, ball hiding and etc. We've tried different size and amount of gear to most efficiently connect the motor to the dribbling silicon and we come out with the optimal size of gear that we design with Autodesk Fusion and send to gear manufacture to make for us. To ensure that the dribbler can dribble stably and the gears won't get stuck, we design the dribbler to make the whole dribbler system one piece. By making our dribbler one-piece, we are able to easily assemble it by putting the motors, gear, and the axle on the one-piece 3D design. For the 3D design, we test printing it with different 3D printing materials and decide to use the PETG because the gear will move very fast and the dribbler will get in contact with other robot making tenacity of the material most important, and PETG has the highest tenacity out of all the material we tried. For the one-piece 3D design, we also tried different structure and test by running it full speed continuously for 30 mins and bump the dribbling silicon while running full speed. The first version cracked on the side of the gear holder when contacting, showing that the structure need to improve. We search online on how to make perpendicular connection more stable and improve the structure and the printing method to make it stronger. We also try stress analysis in Autodesk Inventor to find where will we need to improve on the structure so it won't crack again at different place. The final version can handle running for 30 minutes with maximum speed non-stop while contacting the dribbling silicon.","https://drive.google.com/open?id=1dK1voiQ3ho5yYmzH_wahW-TKxBd8UbV_, https://drive.google.com/open?id=1bEOMnoHLZlt9wcV9V0viCQHIDQ7DpaZO",https://drive.google.com/open?id=1UJUaymImqr-E_0viSnPVj05K9CdDxwO2,"Our robot has two 12V battery pack: one for motor, mother boards and all the sensors, one for the ball control system that involve the motor for dribbler and the solenoid for kicker. For the motor and motherboard battery pack, the 12V power is regulated to 5V for our STM32H743ZIT6 processor and used directly by the motor through the motor controller. For the ball control system battery pack, both the motor for dribbler and the solenoid use 12V directly from the battery. Specifically for the motor, the 12V power is provide to the esc than supply to the motor base on the motherboard's command.","For the 4 moving meter, we control it through four individual DRV8876RGTR motor driver each in charge of one of the motor. We design a motor board that include all four DRV8876RGTR in one pub to make the robot cleaner and easier to build and fix. We use PWM signal from the motherboard to manipulate each DRV8876RGTR, DRV8876RGTR will then transfer the signal to DC signal to control the motor. For the power supply, the driver board provide 12V power to all four motors out of one 12V battery connect to it.",We are using STM32H743ZIT6 as the processor. This processor is in charge of everything on the robot.,"We use OpenMV and mirror together to detect the position of the ball. The mirror is able to provide 360 degrees view on the court through only one camera. The camera we use is the OpenMV wide angle camera. For the curve of the mirror, we use MatLab regression to find the best curve and shape of the mirror that can provide the best view of the court. The position of the ball reflected in the mirror can tell the robot the direction where the robot should go. Through careful calculation and regression of the distance on the court and in the mirror, we are also able to compute the distance of the ball to the robot. ",We design our own light sensor's PCB and connect each individual light sensor to the motherboard through analog. ,Our robot use the OpenMV and mirror to navigate the position on court. They first find the position of the goal and then calculate their own position on the four through mathematical equations. The direction can be easily find by our robot through our compass.,"For the kicker system, we use relay to connect the power supply and the solenoid. By controlling the power supply through analog signal on the relay, we are able to control when to activate the solenoid for kicking.","Our dribbler system includes a single position brushless drone motor and an esc. Together, we can control the power supply to the motor through the analog signal provide to the esc by our motherboard. Since we are not changing the speed of the dribbler, a basic esc is enough for our dribbler system.",,"https://drive.google.com/open?id=1wfgX9H5Z1uPIi1aYn91g3GbJ_znfCWTM, https://drive.google.com/open?id=1nE49gJPbFQs1gbZv3mwM_z5UpwH-852T, https://drive.google.com/open?id=1tqLLWnqaKOhqXynny8lzgZqJ97Pi0GJz, https://drive.google.com/open?id=1ggHWJPnyG5UKsXW9iPf7tAryutet4bJD","We are most proud of the motor control pub we design because we are able to not only reduce the size of the motor controller, but also include additional function of managing the power supply of the robot for all components, dribbler and kicker, which that we use to have to manage through external wiring that consume big space.","https://drive.google.com/open?id=1NUBPaJnqdOrT7TJL520TN0nmmW6Ikdl-, https://drive.google.com/open?id=1a33-yF-rHe-8OfGB2Q8ibndE6YyQPhSj, https://drive.google.com/open?id=1i-wbq0F5WILeYm8J45t1Y7yFlG8isyJp","Our processor provide PWM signal to the motor driver which then will transfer the PWM signal into DC signal that can directly control our motor. In the code, we write a function that we can call to directly move left right up or down. This code make it much easier to write code referring to the robot's movement because the original layout of our motor isn't perpendicular or parallel to the s and y axis. ","We find where the ball is through the openMV and the mirror. The mirror we design can reflect the whole court to openMV, in openMV, we spot the ball by taking the RGB values of the ball. So when the robot is playing game, they are able to spot where is the ball RGB value .","Our robot uses an OpenMV camera to detect and track the ball in real-time. We manually adjust the LAB color threshold to isolate the ball/goal from anything else. Once detected, the robot calculates the ball’s position relative to itself using vector geometry. Specifically, we determine the x and y distances between the ball and the robot’s center, then compute the angle using:

angle = math.atan2(x_distance, y_distance) * 180.0 / 3.14
angle = 360 - (int(math.fmod(angle + 180.0, 360.0)))

This yields the ball's absolute angle relative to the center of the robot, which is more reliable than direct x/y coordinates due to more consistent behaviors during rapid movement.

The OpenMV sends the ball data—including angle, distance, and x-coordinates, y-coordinates—back to the main STM32 microcontroller. The microcontroller then uses this data to make movement decisions. Most of our robots’ chasing route is based on the angle of the ball, as it provides a more stable reference point, even when the ball is partially blocked or rapidly moving.

We also designed different movement modes to deal with momentum and field dynamics, specifically inertia. For instance, we differentiate between “chase with approach” and “chase without approach.” When approaching from far, our motion is reduced lower than the actual ball angle, so the robot glides on point instead of going too far. This helps us control inertia when accelerating toward the ball for a distance, allowing for smoother and more precise captures.

Our primary goal is to capture the ball into our robot’s beak as fast as possible, enabling us to perform higher-level strategies such as diagonal kick or ball-hiding. The entire system is optimized for speed, accuracy, and adaptability on the field.","To ensure our robots stay within the white line boundaries, we designed light sensors that utilize 5528 LDRs paired with LEDs to detect changes in surface reflectivity. These sensors are strategically placed at 90° intervals around the robot, with two sensors at each —an inner and an outer sensor—perfectly suitable for detecting linear field lines and robot lifting events.

To detect white lines, we wrote a program that records the maximum value of each light sensor when we brush our robots over white lines. Then, it calculates the average between regular and max values, recorded into avg[i]. Whenever the value is greater than this average, it means that the current sensor is on the line. 

The inner sensors are responsible for detecting when the robot begins to cross the border line. Once triggered, the robot records the detection time as ot[i] and initiates a calculated retreat movement. Based on ot[i], the robot moves in the opposite direction for a specific time, allowing it to return to the field efficiently without external commands. This time-based strategy ensures accurate repositioning even when sensor data becomes unpredictable and imprecise during rapid motions.

Meanwhile, the outer sensors are used to confirm re-entry. If the robot is already in the return motion and the outer sensor detects the white line, it immediately stops the retreat and resumes its original program, ball chasing. This double-layer detection reduces unnecessary delays and enables the robot to remain responsive even under severe impact or if held outside the court.

To handle corners, we utilize a smart detection algorithm involving two adjacent 90° sensor pairs. If both inner sensors detect the line simultaneously, the robot calculates a new trajectory at a 45° angle away from the corner to safely redirect itself back into the court.

Our boundary avoidance system is designed to be autonomous, efficient, and reliable. Even if the robot is repeatedly pushed or held outside the field, it will consistently attempt to return, preserving match strategy and maintaining compliance with field regulations.","To score goals effectively, we primarily rely on two strategies: ball hiding and corner diagonal shots. Both strategies require accurately determining the relative position of the goal corners angles concerning our robot. To achieve this, we use OpenMV to detect the yellow-colored goal by manually adjusting the LAB threshold and drawing a goal blob. From the blob’s x and y coordinates, along with its width and height, we calculate the position of the opposite corner of the goal, allowing our robot to determine the target it has to shoot.
When our robot possesses the ball and is within ±30 degrees of the goal’s direction, it performs a corner diagonal shot immediately. Diagonal shooting is highly effective, as it catches defensive robots off guard, particularly those robots that rely on simple ball alignment defensive movements. By aiming for the far corner, we take advantage of the extra reaction time defenders need to maneuver.
In situations where the robot retrieves the ball near the baseline or sideline, diagonal shots are often too slow, slightly inaccurate, and easily blocked. Instead, the robot performs the ball-hiding strategy. It first turns 90 degrees and drives toward the sideline and the baseline. Then, it rotates back to 40 degrees, approaches the penalty area,  and executes a powerful corner pull shot. This approach is designed to hide the ball from the opponent robots and create an open goal.
Our kicker and dribbler play essential roles in ball control and timing. The dribbler maintains possession and stabilizes the ball during turning and aiming, while the kicker is triggered only when the angle and position are ideal. This ensures accuracy and prevents wasted shots.
Throughout all offensive plays, our system integrates light sensors and OpenMV vision to adapt in real-time, making intelligent decisions based on field position and ball visibility.","To prevent the opposing team from scoring, our robots use a responsive ball alignment algorithm as the foundation of our defensive strategy. Unlike many teams that fully stop their motors when aligning with the ball, our robot maintains continuous control based on the ball’s angle, allowing for smoother and faster reactions.

When the ball is presented on the field, our robot calculates the angle between itself and the ball. We then multiply that angle by 9 to determine the x-axis movement speed(spx). This speed control ensures that when the ball is farther away, the robot moves faster to intercept it. On the other hand, when the ball is near, the robot slows down, preventing over-chasing and allowing for more accurate positioning, especially near the corner. This dynamic adjustment enables us to maintain a balance between speed, precision, and stability.

Even when perfectly aligned with the ball, our motors do not fully stop. Instead, we keep them running at a low output level—just below the threshold of movement. This mode reduces mechanical startup lag, ensuring the robot can quickly react to sudden changes in the ball’s position. This significantly cuts down on reaction time, a common weakness in many defensive systems that fully stop and then restart.

In addition to central ball alignment, we’ve implemented a corner defense mechanism. When the ball approaches our baseline or corners, our robot automatically backs down toward the goalpost to intercept any corner shooting attempts. This positional retreat helps us cover vulnerable angles that standard center-based defense misses.

Overall, our defensive algorithm combines angle-based speed scaling, non-zero idle motor control, and situational corner retreat to maintain a highly responsive and adaptable backline defense.","Our robots do not use any communication modules; instead, we implement a visual communication system based on color, which allows our robots to work together while staying fully autonomous and hardware-efficient.

We specifically color-code our offensive robot using a pink cover. The defensive robot uses its OpenMV camera to detect this pink color on the field. This simple yet effective technique allows the defender to understand the positioning and status of the offensive robot, and possibly the ball,  without needing any radio signals or Bluetooth communication.

When the defensive robot detects that the pink offensive robot is far from our own goal area, in other words, the other half of the court, it assumes that the opponent may attempt a long-range shot. In this case, the defender centers itself in front of the goal and prepares to block. However, when it detects that the offensive robot is closer to our own goal, or our half of the court, it assumes that the ball is in the defensive zone. In response, the defensive robot begins actively aligning with the ball, preparing for interception or direct blocking.

In scenarios where the defensive robot cannot detect any pink on the field—perhaps due to the offensive robot going out of bounds or becoming non-functional—it switches into offensive mode. It then begins to chase the ball and attempt to score, ensuring that our team maintains pressure on the opponent even if part of our system fails.

This form of visual, decentralized communication provides redundancy and flexibility. It allows each robot to adapt in real-time based on the presence or absence of teammates, increasing our overall field coverage, maintaining strategic balance, and maximizing both offensive and defensive potential without relying on fragile wireless connections.","Tell us about any specific code or algorithm you build that you are the most proud of. Explain how you came up with this innovation and how it helps you win more games.

Our most distinct and innovative algorithm is our ball hide prevention system, which we specifically designed to counter a common tactic used by many advanced teams. During matches, we noticed that several opponents attempted to confuse our defensive robot by hiding the ball in the corners of the field. This often made our robot assume the ball was no longer a threat and centering itself, giving opponents a clear opportunity to score from a hidden position.

Rather than relying on LIDAR or adding additional sensors, we developed a purely vision-based solution using OpenMV. When the ball is not detected on the field, our defensive robot automatically enters a scanning mode. In this mode, it draws two rectangular regions—one in each back corner of our goal area—and reads the amount of green pixels within each region. Since the playing field is green, any significant drop in the green pixel count within a corner indicates the presence of a robot, possibly hiding the ball.

If either corner shows a noticeable decrease in green pixels, the robot assumes that the opponent is attempting a ball hide maneuver in that location. It immediately moves to the suspected corner and positions itself at a lower position, preventing a stealth shot and restoring visual tracking.

This solution is something we’re incredibly proud of because it’s both lightweight and effective. It helps us defend against one of the trickiest scoring strategies without requiring expensive hardware, giving us a significant edge in tight matches. It’s a great example of how simple vision logic, when used creatively, can outperform more complex systems.",,https://drive.google.com/open?id=1cajit-vWdbB7nOBRhcJydvn0Joc7h_R9,"Robots: 800USD
Experiment: 1600USD
Environment: 1000USD",100% parents,2,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",ethankeju@gmail.com,,
7/13/2025 2:26:35,Tachyon,Open League,Japan,"Team Member
Yo Nakano : skypeto2023@icloud.com
Yu Nakano : nakano1419@icloud.com
Whole Team
tachyon.rcj2025@gmail.com","Website : https://tabitostudio.github.io/TachyonRCJ-jp/
X(Twitter) : https://x.com/Tachyon_robo
YouTube : https://www.youtube.com/@TachyonRCJ",,"Yo Nakano : Programming and modeling
Yu Nakano : Programming, circuit and PCB design",60 minutes every Friday night,"There is a distance of 900 kilometers between team members, so we rarely meet. We meet once every few months for friendly matches hold by our friends or when we visit home, we work together.",In March 2024,"Japan Open 2022: Lightweight League
Japan Open 2023: Open League",There was no technical guidance from our mentor. We received advice from our mentor regarding fundraising for competition participation.,"We communicated on Discord and LINE. Also, we managed tasks and schedule in Notion and edit the robot's program together on GitHub. ","We used Chat-GPT and Copilot to suggest programs that would realize the algorithms we though. Also, we used GitHub Copilot to do programing more quickly and efficiently.",https://drive.google.com/open?id=1ODGzoWIwM2HiXGMIrPE63oxAMHEe85dy,https://drive.google.com/open?id=1d57ocgzvJoWLFRbMc5wA6QAvT9hkfR9R,https://drive.google.com/open?id=1qXfTGMXUrn8wRphlHc4grfLajdTqBU52,https://drive.google.com/open?id=1xk0kJRVpqlPDqHBv7Nv0pQSPXMDzUHe8,https://drive.google.com/open?id=1vFSqkWPMBVuq0ZgxLDikcE-krKuS4QRn,https://drive.google.com/open?id=1d9K9LlaqZmZNwwuQwR4TwwYNOh3qy_Xx,https://drive.google.com/open?id=1QP2YtDNyjHqD-qNADsNfp1jsiOqMwOdW,"The robot estimates its position on the field by getting color components from 160 specified points from the camera. Specifically, the robot gets 16 vectors that indicate how far the field extends in 16 directions around the robot. The robot calculates its relative position from the center of the field using the direction and magnitude of the synthetic vector of these vectors.
The robot uses the estimated position to move to the center of the field when it is an attacker and loses sight of the ball, or to move in front of own goal when it is a keeper.",https://drive.google.com/open?id=1dduOlSxnoqGKSAfM26zwEqZxrUfXOjWI,https://drive.google.com/open?id=1rHnhBtMnOJqRAdM9-HGGB32cxEHG2hHj,https://drive.google.com/open?id=1Y90zEQsmv8AxOEgHzBxxQwuORFqFnAde,https://drive.google.com/open?id=1pcaGY1OSH1bnxLweElk-x_9J6f8FR7LY,https://drive.google.com/open?id=1idFfheh0Xinr-NIYXEj6H9W1JGB5kd8H,https://drive.google.com/open?id=1MQEtWbKSrL38qpIrY0eVZKbYAZUi-YlC,https://drive.google.com/open?id=1bsERLrEMoG0sgvG7FStKOfZXtE4e4Shn,"I used Fusion 360. I designed the outline of the part onto the sketch, matched the coordinates of the new part and the screw holes, and after export the part, I constrained the part to another part and the screw holes to actually assemble the parts while designing.
Because the camera is mounted high up looking down, we took great care in the design to ensure that no parts would obstruct the camera's view.
We found that some screws were difficult to remove when disassembling the robot, so we changed the shape of the frame to make it easier to access the screws with a screwdriver.","The parts that could be printed on a 3D printer were produced by a team member using a 3D printer, Ender 3 V3 KE. Metal parts that required CNC manufacturing were produced by JLCPCB (JLCCNC), and printed circuit boards were produced by JLCPCB.
For complex 3D printed parts, we adjusted their shapes to make it as easy as possible to attach support material and make them stable during printing.","Our robot is equipped with four motors per a robot for locomotion. This design allows us to easily calculate the speed of each motor when moving in any arbitrary direction, by positioning the motors perpendicular to the robot's sides at 90-degree intervals and using vector and trigonometric principles.
Furthermore, we utilized omni wheels for the tires. This enables the robot to move in any direction using just four wheels.
The tires themselves are constructed using 3D-printed wheels and side rollers, along with silicone tubing and shafts.",The voltage boosted by the boost converter is applied to the solenoid when kicking.,I sketched the cross section of the dribbler in Fusion 360 and designed it while checking where the rollers should be placed and how large the gears could be placed.,,"Our most innovative feature is the new vision system, built using three cameras equipped with fisheye and wide-angle lenses. While it's common to explore four directions with four cameras, or to survey the robot's surroundings with one camera and a conical mirror, our robot utilizes three cameras for ball detection. By using fisheye and wide-angle lenses, it gains a broader field of view, allowing it to cover the robot's surroundings comprehensively. This vision system received high praise at the Japan Competition.","https://drive.google.com/open?id=1Ytg2Y2yx3F727HgaZz40ECHifwljsOcX, https://drive.google.com/open?id=18iAxmgZ7E2GgT6NcBAGuaurRcjWJvzOu, https://drive.google.com/open?id=1uYA39R5DOAO8SkjUb8EvTw6EXl5dOHtT",https://drive.google.com/open?id=1lKO9jialppTKAtJyWXs4oqncenpec0YO,"The robot uses 12.8V, supplied by eight Ni-Zn batteries with a nominal voltage of 1.6V each connected in series. This voltage is directly utilized by the motor driver. Furthermore, a switching regulator supplies 3.3V to the RP2040 and OpenMV, and 5.0V to the UnitV-M12 and ATmega32U4.",The motor operates using an IC called DRV8874.,"The robot features two microcontrollers: the RP2040 and the ATmega32U4. We chose the RP2040 because it offers versatile pin configurations, including PWM output, digital input, and serial communication. Its multi-core architecture also enables parallel processing. The ATmega32U4 was selected for its ability to connect directly to a USB connector without needing an external serial conversion IC, which simplifies the surrounding circuitry. Both of these microcontrollers also have the advantage of being programmable in a manner similar to the popular Arduino microcontroller boards.","Beforehand, we extract the ball's color components while observing the scene from the camera and record them in the source code. Based on this, the camera extracts colors similar to it from within its view, and then transmits the area of that region and its relative angle to the robot's processor.","Red LEDs shines red light onto the floor, and a light sensor converts the amount of reflected light into an electrical signal. This signal's value is read by a microcontroller. If the value exceeds a threshold, it's determined that the line sensor has reacted.","The robot moves using a gyro sensor to maintain a constant direction as its reference orientation. It acquires the color distribution of the field from its cameras and uses this information to roughly estimate its position within the field. Additionally, it uses ultrasonic sensors to measure its distance from walls, determining whether the robot is near a wall or in the center.","We use a boost converter to increase the voltage, store it in an electrolytic capacitor, and then apply a signal to a MOSFET to discharge the electricity, thereby operating the solenoid.","The motor driver rotates the motor, which increases torque using gears. This rotation then drives rollers, and these rollers, in turn, impart rotation to the ball.",,,We divided the PCBs used in the robot according to their functions. This not only minimizes the impact on other areas in the event of an electrical failure in one PCB but also leads to a reduction in PCB replacement costs.,"https://drive.google.com/open?id=1k8HQQ7Pk695-VQ-gTZyg5RLr24tqH_EC, https://drive.google.com/open?id=11CodoxnzUmmWomv12BGl23XmJnvoUWXP","The motor control uses a DRV8874 and an RP2040. Each motor is controlled by one digital input from the RP2040, which sets the direction, and one PWM input, which indicates the speed.","The robot uses three onboard cameras to search for the color of the ball. From each camera, it obtains the direction where the ball's color is present and the size of the blob of the ball's color. The location where this area is largest is then taken as the estimated position of the ball","The robot moves in a direction determined by multiplying the estimated relative angle of the ball to the robot by a certain number. This number varies with the distance between the robot and the ball, ranging from 1.2 to 1.5, and increases as the distance to the ball decreases.","The robot detects white lines by emitting red light from its underside and measuring the amount of reflected light. Upon detecting a white line, the robot moves in the direction of the estimated center of the field, calculated from the distribution of court colors in the camera's view.","The robot faces the opponent's goal as long as it is visible and kicks the ball in that direction. If the ball is captured by the dribbler, the robot moves towards the goal, and when the distance to the goal reaches a certain threshold, the robot rotates its body and scores by using the remaining spin on the ball.","Moving along the white line in front of the goal, the robot defends the goal by positioning itself between the ball and the goal.",The robots communicate with each other using a module called TWE-LITE UART. This communication is used for the robots to switch between attacker mode and defense mode.,"Algorithm for Integrating Camera Information and Estimating Ball Position
This is an algorithm that integrates information from three cameras to determine the estimated position of the ball. Each of the three cameras is located at a different position and operates independently. As a method for integrating the information from these three cameras, we focused on the size of the area where the ball's color is visible in each camera. Trusting the information from the camera showing the largest area of the ball's color is largely consistent with the color detection method performed by each individual camera. In essence, we have successfully integrated the fields of view programmatically.",https://github.com/Tachyon-RCJ/Robot_code_world,https://drive.google.com/open?id=1s85BXuUll1f8193d4E-4FIc_RzZ9ocX8,"Robots: 65000 JPY each
Experiments: 60000 JPY
Environment: 5000 JPY
1 JPY= 0.0068 USD","70% sponsors
30% team",6,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",tachyon.rcj2025@gmail.com,,
7/13/2025 2:26:52,Tachyon,Open League,Japan,"Team Member
Yo Nakano : skypeto2023@icloud.com
Yu Nakano : nakano1419@icloud.com
Whole Team
tachyon.rcj2025@gmail.com","Website : https://tabitostudio.github.io/TachyonRCJ-jp/
X(Twitter) : https://x.com/Tachyon_robo
YouTube : https://www.youtube.com/@TachyonRCJ",,"Yo Nakano : Programming and modeling
Yu Nakano : Programming, circuit and PCB design",60 minutes every Friday night,"There is a distance of 900 kilometers between team members, so we rarely meet. We meet once every few months for friendly matches hold by our friends or when we visit home, we work together.",In March 2024,"Japan Open 2022: Lightweight League
Japan Open 2023: Open League",There was no technical guidance from our mentor. We received advice from our mentor regarding fundraising for competition participation.,"We communicated on Discord and LINE. Also, we managed tasks and schedule in Notion and edit the robot's program together on GitHub. ","We used Chat-GPT and Copilot to suggest programs that would realize the algorithms we though. Also, we used GitHub Copilot to do programing more quickly and efficiently.",https://drive.google.com/open?id=1wKg6eQzd_Q30vMWADBU_G7n0M6nLtD-t,https://drive.google.com/open?id=1xH1ACHD197PSoJQ92YRBnWKNq4UwYWWK,https://drive.google.com/open?id=1BiosSRH8YlBmLjHcAIan1RfgQ7yVixDC,https://drive.google.com/open?id=1Tu4usL1TeR0H9zUq5lWr5j9jmNHqSQHP,https://drive.google.com/open?id=1sIqVgY9OBDwGZwnJBqLp_BbCU6X3MNoO,https://drive.google.com/open?id=1nY3UxNlyzubDg8bIqVB6wGqt_xt4Zl8z,https://drive.google.com/open?id=1y437kVb6rq7heBHgLu8aBYzLx3lKpVbx,"The robot estimates its position on the field by getting color components from 160 specified points from the camera. Specifically, the robot gets 16 vectors that indicate how far the field extends in 16 directions around the robot. The robot calculates its relative position from the center of the field using the direction and magnitude of the synthetic vector of these vectors.
The robot uses the estimated position to move to the center of the field when it is an attacker and loses sight of the ball, or to move in front of own goal when it is a keeper.",https://drive.google.com/open?id=1fMGZlN0lQDUG4gTqKlbVGXDpKBr41if6,https://drive.google.com/open?id=1iZDR6yyv0wkCqSSFGZETlPT8Rma5JvSc,https://drive.google.com/open?id=1Jd8jAu5avf1ZaoL_uV3onkHanMYIOA8X,https://drive.google.com/open?id=1YgjxRvWLfAvfRSeVmQ8xKRnItgiMYU9_,https://drive.google.com/open?id=1V-XBblnRzaV3Y2h3GZjY3NpkfGI7dVaq,https://drive.google.com/open?id=1DFS0fMOXs6MZZ7CURcftNTjU49H3Ihtx,https://drive.google.com/open?id=1bR2K0R3XFEFOKAvwyhqwOEr1qt2fb3vv,"I used Fusion 360. I designed the outline of the part onto the sketch, matched the coordinates of the new part and the screw holes, and after export the part, I constrained the part to another part and the screw holes to actually assemble the parts while designing.
Because the camera is mounted high up looking down, we took great care in the design to ensure that no parts would obstruct the camera's view.
We found that some screws were difficult to remove when disassembling the robot, so we changed the shape of the frame to make it easier to access the screws with a screwdriver.","The parts that could be printed on a 3D printer were produced by a team member using a 3D printer, Ender 3 V3 KE. Metal parts that required CNC manufacturing were produced by JLCPCB (JLCCNC), and printed circuit boards were produced by JLCPCB.
For complex 3D printed parts, we adjusted their shapes to make it as easy as possible to attach support material and make them stable during printing.","Our robot is equipped with four motors per a robot for locomotion. This design allows us to easily calculate the speed of each motor when moving in any arbitrary direction, by positioning the motors perpendicular to the robot's sides at 90-degree intervals and using vector and trigonometric principles.
Furthermore, we utilized omni wheels for the tires. This enables the robot to move in any direction using just four wheels.
The tires themselves are constructed using 3D-printed wheels and side rollers, along with silicone tubing and shafts.",The voltage boosted by the boost converter is applied to the solenoid when kicking.,I sketched the cross section of the dribbler in Fusion 360 and designed it while checking where the rollers should be placed and how large the gears could be placed.,,"Our most innovative feature is the new vision system, built using three cameras equipped with fisheye and wide-angle lenses. While it's common to explore four directions with four cameras, or to survey the robot's surroundings with one camera and a conical mirror, our robot utilizes three cameras for ball detection. By using fisheye and wide-angle lenses, it gains a broader field of view, allowing it to cover the robot's surroundings comprehensively. This vision system received high praise at the Japan Competition.","https://drive.google.com/open?id=1P8c_k01QE--3rSZJsjKVCbhhhmA9LxDZ, https://drive.google.com/open?id=11CGEQa2cJuH-HvojgZoAo2BUwSkSJEoG, https://drive.google.com/open?id=10uf_i9ERrowp2J5E8fz8CXm-lpfi0mG5",https://drive.google.com/open?id=1OwAKcW0ZmsHCVGEa_9ncTmouLkwaLsQK,"The robot uses 12.8V, supplied by eight Ni-Zn batteries with a nominal voltage of 1.6V each connected in series. This voltage is directly utilized by the motor driver. Furthermore, a switching regulator supplies 3.3V to the RP2040 and OpenMV, and 5.0V to the UnitV-M12 and ATmega32U4.",The motor operates using an IC called DRV8874.,"The robot features two microcontrollers: the RP2040 and the ATmega32U4. We chose the RP2040 because it offers versatile pin configurations, including PWM output, digital input, and serial communication. Its multi-core architecture also enables parallel processing. The ATmega32U4 was selected for its ability to connect directly to a USB connector without needing an external serial conversion IC, which simplifies the surrounding circuitry. Both of these microcontrollers also have the advantage of being programmable in a manner similar to the popular Arduino microcontroller boards.","Beforehand, we extract the ball's color components while observing the scene from the camera and record them in the source code. Based on this, the camera extracts colors similar to it from within its view, and then transmits the area of that region and its relative angle to the robot's processor.","Red LEDs shines red light onto the floor, and a light sensor converts the amount of reflected light into an electrical signal. This signal's value is read by a microcontroller. If the value exceeds a threshold, it's determined that the line sensor has reacted.","The robot moves using a gyro sensor to maintain a constant direction as its reference orientation. It acquires the color distribution of the field from its cameras and uses this information to roughly estimate its position within the field. Additionally, it uses ultrasonic sensors to measure its distance from walls, determining whether the robot is near a wall or in the center.","We use a boost converter to increase the voltage, store it in an electrolytic capacitor, and then apply a signal to a MOSFET to discharge the electricity, thereby operating the solenoid.","The motor driver rotates the motor, which increases torque using gears. This rotation then drives rollers, and these rollers, in turn, impart rotation to the ball.",,,We divided the PCBs used in the robot according to their functions. This not only minimizes the impact on other areas in the event of an electrical failure in one PCB but also leads to a reduction in PCB replacement costs.,"https://drive.google.com/open?id=1J35UOEkzi4ZVpOHPwecN8u5YXJcQ1pSa, https://drive.google.com/open?id=1rKI1Z2QaBHGqxthMZzTY2srv9o7cxn-F","The motor control uses a DRV8874 and an RP2040. Each motor is controlled by one digital input from the RP2040, which sets the direction, and one PWM input, which indicates the speed.","The robot uses three onboard cameras to search for the color of the ball. From each camera, it obtains the direction where the ball's color is present and the size of the blob of the ball's color. The location where this area is largest is then taken as the estimated position of the ball","The robot moves in a direction determined by multiplying the estimated relative angle of the ball to the robot by a certain number. This number varies with the distance between the robot and the ball, ranging from 1.2 to 1.5, and increases as the distance to the ball decreases.","The robot detects white lines by emitting red light from its underside and measuring the amount of reflected light. Upon detecting a white line, the robot moves in the direction of the estimated center of the field, calculated from the distribution of court colors in the camera's view.","The robot faces the opponent's goal as long as it is visible and kicks the ball in that direction. If the ball is captured by the dribbler, the robot moves towards the goal, and when the distance to the goal reaches a certain threshold, the robot rotates its body and scores by using the remaining spin on the ball.","Moving along the white line in front of the goal, the robot defends the goal by positioning itself between the ball and the goal.",The robots communicate with each other using a module called TWE-LITE UART. This communication is used for the robots to switch between attacker mode and defense mode.,"Algorithm for Integrating Camera Information and Estimating Ball Position
This is an algorithm that integrates information from three cameras to determine the estimated position of the ball. Each of the three cameras is located at a different position and operates independently. As a method for integrating the information from these three cameras, we focused on the size of the area where the ball's color is visible in each camera. Trusting the information from the camera showing the largest area of the ball's color is largely consistent with the color detection method performed by each individual camera. In essence, we have successfully integrated the fields of view programmatically.",https://github.com/Tachyon-RCJ/Robot_code_world,https://drive.google.com/open?id=1BuMO7JMCIWqnWrLLsq30s_sGpjeJDiHW,"Robots: 65000 JPY each
Experiments: 60000 JPY
Environment: 5000 JPY
1 JPY= 0.0068 USD","70% sponsors
30% team",6,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",tachyon.rcj2025@gmail.com,,
7/13/2025 6:23:42,LNX Robots,Open League,"Bratislava, Slovakia",lnxrobots@gmail.com,"https://www.instagram.com/lnxrobots
https://www.youtube.com/@lnxrobots9860 
https://lnxrobots.github.io
https://github.com/lnxrobots ",https://drive.google.com/open?id=1iiNLulFGwfIt9R55osDRymfY-U4vma-y,"Tomáš Kováč – Programming, PCB and Mechanical design  
Matúš Mišiak – AI training, Programming and Mechanical design 
Michal Imrišek – Strategy and Programming 
Radko Bábíček – PCB and Mechanical design 
Radoslav Kováč – Team Mentor",We mostly work individually from home. We meet weekly or biweekly for 2-3 hours.,"computer room at school, at someone's house",8/2024,"RoboCup Junior Slovakia 2023: Soccer Open 
European Championship 2023: Soccer Open 
World Championship 2023: Soccer Open 
RoboCup Junior Slovakia 2024: Soccer Open 
RoboCup Junior Croatia 2024: Soccer Open 
European Championship 2024: Soccer Open 
World Championship 2024: Soccer Open 
RoboCup Junior Slovakia 2025: Soccer Open 
RoboCup Junior Croatia 2025: Soccer Open 
European Championship 2025: Soccer Open ","Our mentor provided invaluable support in securing sponsors, enabling us to fund the construction of our robots and cover travel expenses for competitions. Since we primarily work from our individual homes, our mentor assisted us by helping coordinate the logistics of delivering hardware parts between team members. Additionally, the mentor helped us maintain focus by guiding project planning and establishing clear priorities.","We have a Discord server which we use to communicate with each other. It helps us to keep motivated by seeing each other working hard. During each meeting, we track our progress by setting new tasks and marking already completed ones in a spreadsheet.","We used ChatGPT as a learning and support tool for electronics. Since we’re all self-taught in this area, it was especially helpful for understanding concepts and debugging hardware issues. We also used GitHub Copilot to speed up coding, helping us write and complete functions more efficiently, which boosted overall productivity. Additionally, we used ChatGPT to improve the grammar and readability of both our poster and this TDP. ",https://drive.google.com/open?id=13m_6Kh3wxrVYtQs0nVih60mMZDMw3gnn,https://drive.google.com/open?id=1R85TMjrbpgaxTHile1ZnNqvIaVk-QCNQ,https://drive.google.com/open?id=126K2MYDJE2LUqP6RSWvr9QDfQhBQsBmj,https://drive.google.com/open?id=1rr1rt9iH-4gHcDsd--yEf19MMebYT87w,https://drive.google.com/open?id=1vGo2efY-43_a4NpWotbwXbgVz6clbMiU,https://drive.google.com/open?id=1S0iWe7b5W0GmZXPJuPczgtQC-ToNYq6X,https://drive.google.com/open?id=1b_LJuUF2qCH0BfaEFMHbM2ms7H1DvbDk,"We use a LiDAR sensor to determine our robot’s position on the field. The LiDAR provides a point cloud of the surroundings, which we rotate based on the robot’s real-time heading to align it with the field's orientation. We then apply a Hough transform to detect the field walls and estimate the robot’s exact position.
Once the current position is known, we calculate the direction and distance to the target location. From that, we compute the angle and speed needed to move the robot efficiently toward the destination.",https://drive.google.com/open?id=1UK_THiynW8qQF767FMn_qkW785TNy0ri,https://drive.google.com/open?id=1mBuIqmhvhK-Peza1RXenlLRphtRcY4uF,https://drive.google.com/open?id=1TyHksK7vaEZISy1yGzoFX2IJWAlcFvln,https://drive.google.com/open?id=1AwRLVg8w6w2_ZUZSDwnu2Numcj8ESjVI,https://drive.google.com/open?id=1iZNz6PSywRjBL6LHLavxzHaMGLRB3VDQ,https://drive.google.com/open?id=1otN1_OGsIG0QSy8phKxjamFkDwlNrmSY,https://drive.google.com/open?id=1Zq6iRvYpKbgM9rYq-iKqfQUK5sYz6DTI,"We used Fusion 360 to make our design and Eagle for our PCBs.
Firstly, we created a 3D model of the part in Fusion 360. We have our whole robot designed there so it's pretty easy adding new things to our robot since the rest of it is already precisely modeled. Later we got them made from aluminum or we 3D printed them ourselves.  
There are countless hours and versions behind the way our robots look now from material selections to the actual parts placements.  
Last year we had lots of cable breakages which made maintaining the robots a complete nightmare. This year we really wanted to improve this part of our hardware, and we managed to do so quite nicely. We shrunk the number of cables from around 150 down to only 20 thanks to using board-to-board connectors for everything, even our motors.","To build our design, we began by 3D printing all parts of the chassis. This allowed us to quickly prototype and identify design weaknesses. For instance, we found that the undercarriage supporting the motors was structurally too weak and prone to breaking. As a result, we redesigned this part to be made from aluminum for improved durability.
All plastic components were printed in-house using PET-G filament. The aluminum chassis parts were laser-cut by idilna.cz, and we carried out the subsequent processing (sanding, bending, and gluing the pieces) ourselves. The solenoid plunger was manufactured by a local machining company through steel milling.
For the 360-degree mirror, we worked with a local company that used vacuum forming with laminated polystyrene. Prior to that, we experimented with DIY vacuum forming using a vacuum cleaner, but the pressure was too uneven. We also attempted to machine the mirror from aluminum on a lathe. While the result was usable, it required excessive polishing and was ultimately not worth the effort compared to the vacuum-formed version.
Our PCBs were manufactured externally by JLCPCB, but we soldered some of the components ourselves.","We have five motors. 
Four motors are used for movement, these are the “Maxon EC45 flat 70W” (with encoders, for better speed control in lower speeds). We chose four motors because in combination with the right placement, all of them will always contribute to the robot’s movement, regardless of the direction (if we only had three motors, one would be stationary when going in certain directions), hence making the robot stronger in robot-to-robot duels. We also made our own omni wheels, as we needed 6cm diameter ones (so our drive motors fit there, as they have a diameter of 43mm) and weren’t able to find any suitable on the market. 
Each omni wheel consists of two 3D-printed halves, a circular iron wire axle (1 mm thick), and 24 small idler rollers. The rollers are also 3D printed and fitted with O-rings for improved traction. To form the axle, we bent the iron wire around a PVC pipe with a slightly smaller diameter than the final wheel, ensuring a precise circular shape. The rollers were mounted onto this ring, then enclosed between the two printed halves and secured using a Pololu motor mounting hub. The hub is glued to the iron axle using Loctite 638 (green) for a reliable hold. 
The last motor is the “Maxon EC-max 22 25W ” and it is used for the dribbler. ","Our kicker is a high current solenoid which we designed ourselves. To save space we also made it a flat solenoid as it’s commonly possible to see in the Small Size League (SSL).  
To calculate the exact values of our solenoid we first set a hard weight limit since we were working on it before the weight limit was lifted and our last years robot was only 100g lighter than the limit and we tried to keep it as light as possible. To keep the solenoid powerful while keeping it light, we came to the conclusion that increasing the number of turns is a bad idea, hence we have to increase the current which we kick with. To approximate the coil strength, we calculated the strength of the TIGERs Mannheim SSL team’s front kick solenoid with info we gathered on discord and from their TDPs. We then tried to get 1/3 of this power by playing around with the variables. We came to the numbers of kick current of 28A and coil winding specs we customised to our needs.  
We then designed the plunger of the solenoid consisting of aluminum non-magnetic part and iron magnetic part which we got machined. All this theory proved to be well calculated as we stuck with the first wound solenoid as it had proven to be strong enough to satisfy the rules limits.  
We also experimented of the displacement of the ball from the plunger and different rubber and springs to pull back the plunger.","We experimented quite a lot with different designs and silicones for our dribbler. However, we found out pretty fast that stationary dribblers are not great at holding the ball (the dribbling bar is not moving). 
Then there are 2 options for a point mounted dribblers high mounted and bottom mounted - one has the point of rotation above the dribbling bar which dribbles the ball the other has it lower. 
The bottom mounted were found superior since they didn't push out the ball before actually getting into the dribbling position. (Linear sliding dribblers are a good alternative however they are quite hard to finetune in our opinion)",https://github.com/lnxrobots/hw-rcj-soccer-open/tree/main/gen3/mechanics,"We try not to overcomplicate our hardware since we prioritize consistent design over flashy ones. However, we had at least 7 cable breakages on our maxon motors last year since they are brushless with encoders and each has around 20 cables. We managed to create our own pcb that is directly soldered onto the motor and has board-to-board connectors coming from it ensuring a stable and rigid connection. Also we are really proud of our dribbler however they havent changed much from last year we only made them wider to capture the ball easier.  ","https://drive.google.com/open?id=1gbQE5s_HjSGTzVk0cXITNCm2a5Hxd6F3, https://drive.google.com/open?id=1JtslAvLVUdMclkAmB3InA4eqbBKJFvZE, https://drive.google.com/open?id=1fl76B4ESTEys07GZBBF2cJaGhWtzeFtI, https://drive.google.com/open?id=1_u30kAl1yfLDBgmuWlrvvo3Z-YcRH_TW",https://drive.google.com/open?id=18hxcmK5Zg5rsm3Y_I1zzNYLMoeMepgct,"Our power system is based on two 3S LiPo batteries (11.4 V each) connected in series to provide a total voltage of 22.8 V, which supplies power directly to our motor drivers and motors. We use a 5 V, 5 A buck converter to step this voltage down to 5 V for the Raspberry Pi 5. From there, we further regulate the voltage down to 3.3 V using low-dropout regulators (LDOs) to power our STM32 microcontrollers.
For the kicker, we employ a 47.5 V boost converter that charges large 4.4 mF capacitors to store the required energy. A dedicated 15 V LDO powers the MOSFET gate driver to ensure fast switching, minimizing the MOSFET’s time spent in the linear region and improving efficiency.
All converters were carefully selected from Mouser and integrated directly onto our custom PCBs, which helps reduce space and simplifies wiring.","We drive our motors using Maxon ESCON 24/2 motor drivers, which operate in a closed-loop configuration for precise control. Each motor is equipped with an encoder that provides position feedback at a resolution of 1024 counts per revolution. This enables accurate speed and position control, even at low velocities, and is essential for maintaining smooth omni-directional movement and executing fast directional changes. 
The ESCON motor drivers receive PWM control signals from our STM32 microcontroller and then adjust motor output accordingly using PID control, leveraging the encoder feedback in real time. ","Our robot uses three main processors: two 32-bit STM32 microcontrollers and a Raspberry Pi 5 paired with a Hailo-8L AI accelerator.
The Raspberry Pi 5 serves as the central processing unit. We chose it because it offers high computational power and supports easy integration with the Hailo-8L module, which accelerates our neural network inference for real-time computer vision. Its multi-core architecture allows us to run separate processes for each peripheral (e.g. camera, communication, sensors), enabling efficient parallelism and more real-time responsiveness. Additionally, its compatibility with Python allows us to iterate quickly and take advantage of a wide range of community-developed libraries. The Raspberry Pi also hosts various hardware components such as the camera, Wi-Fi/Bluetooth connectivity, and storage, making it a compact and flexible mainboard.
The “top” microcontroller, an STM32F767, handles all time-critical control tasks. It is responsible for the motor control, kicker, IMU, light gate, and user interface. We chose this model for its speed, rich feature set, and large number of GPIO pins, which are essential for directly interfacing with multiple components in real time.
The “bottom” microcontroller, an STM32G474, manages lower-level sensing tasks. It processes data from the line sensors and LiDAR, pre-filtering and formatting the data before passing it to the Raspberry Pi. This division of responsibilities ensures fast and reliable sensor feedback without overloading the central processor.
We chose STM32 microcontrollers over 8-bit alternatives like Arduino due to their significantly higher performance, wider peripheral support, and widespread use in industry. They also offered a learning opportunity, as we wanted to explore more advanced embedded platforms. ","...for more see ""LNX Robots - RoboCupJunior Soccer TDP form.pdf"" in the TDP File Upload link...",.,.,.,.,"https://drive.google.com/open?id=1On5VyupzVK6XJta7tLjUCwI61f8xGTee, https://drive.google.com/open?id=1uk1xzAtksOUa4LuIWy-PCG9GMcbhcLa5, https://drive.google.com/open?id=1fzrft5cTauu7KSaQsttHz8PK8I2W9ul9, https://drive.google.com/open?id=1Ze-Pi8KMQaPKf1HkvlBNneKaEZ1yvYjL","https://drive.google.com/open?id=1o20W_2FTU4pvJlACGGKanrh3dhr00g3n, https://drive.google.com/open?id=1eIsQ9yvcCDf0p1WSWTnLwjT5aZhKTIL0, https://drive.google.com/open?id=1zJ2hvHg_0h2nAGD_QNJFNqgtOOuY_xCa, https://drive.google.com/open?id=1ZRjr_lb_yssAYTvTY07tEBJ_k9g7CC6U",.,"https://drive.google.com/open?id=14mG--ZxGtG6eLqczPSHMbufV-XS5oeLk, https://drive.google.com/open?id=1akZJctQL7E51qkMkV_F3dMWW6qPFK5Vz",.,.,.,.,.,.,.,.,https://github.com/lnxrobots/rcj-soccer-open-gen3,https://drive.google.com/open?id=11xkmpjIGN08thMutUYkxLM2rNx9XAybV,.,.,3,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",kovacr@gmail.com,https://drive.google.com/open?id=12fpgvP4LHy8uxCUD5t0t6I1G_74yKTJC,
7/13/2025 13:32:19,Lovbot Thunder,Open League,"Vancouver, Canada","zhangroy141@gmail.com
ericmiao110@gmail.com
williamzhao649@gmail.com",,,"Eric Miao: Hardware & Electronics
William Zhao: Offense Software
Roy Zhang: Defense Software",10 hours every week; full days every day as competition neared,Robotics club,September 2024,"Western Canada Open 2024: Lightweight League
Worlds Eindhoven 2024: Open League
Western Canada Open 2025: Open League
Eastern Canada Open 2025: Lightweight League
Americas SuperRegionals 2025: Open League",Making sure our electronics don't short or burn; helping fix broken hardware or software logic problems (e.g. whether we should give up trying to resurrect a camera which the IDE fails to detect),"Staying consistent, coming to the lab on time, communicating effectively via Instagram group chat","ChatGPT, Deepseek
Mainly helped with debugging code and evaluating logic, acted as a secondary ""tester"" to make sure faulty code doesn't get executed.",https://drive.google.com/open?id=1uCss9J36ppafHZQPbvKQ7ZfWc-E8hsYZ,https://drive.google.com/open?id=1NJW0x2XqTu6WXzpQaEtkhNdMQDhrD6L3,https://drive.google.com/open?id=1Tnox9VHRc0tJU89QCPxRimpWgfl4FYcw,https://drive.google.com/open?id=1kcsg20skqWFiwXko4Xagup9odnh0gf-y,https://drive.google.com/open?id=1lVPpzdGpJgb18ZtnzS8RH3pzQrztuHYx,https://drive.google.com/open?id=1WVLFAreVke8kmmvXW5MwUFTjl_hYdpRI,https://drive.google.com/open?id=1bpidMc4Z7dpYY0ORQeLZsaTf-JRMFiLL,"We used four ultrasonic sensors positioned 90 degrees apart on all four sides to determine distances from the walls. When our robots are not blocked, we can create a simple coordinate system that allows our robot to position at any desired x and y coordinate.",https://drive.google.com/open?id=1JS5Ztvo9nDb8jHHyzOLtB-Auva6nKjku,https://drive.google.com/open?id=1X5J_mL7HGCr94MA_E7TNjThXuNkgsfLg,https://drive.google.com/open?id=1jzFYpmE5OGFTbd6JGzEszRNORdQKU2pc,https://drive.google.com/open?id=1MrDuXBHYpNXnMKG3NJQsba6EbgWPS7rA,https://drive.google.com/open?id=1i2aTQLDRWa3AHBsp2cKiBh8ko7-125CW,https://drive.google.com/open?id=1fUB9tdVpN4aN7_PnUoJu8PzQnQn3rlrk,https://drive.google.com/open?id=1Ml8vr4Onj-4G6IjwgVcLaxk58w9qN5rm,"Our team used solidworks as our CAD to design our robot. As we designed, we focused on making each section modularized so we could fix our robot rapidly during competition. Currently, we could also make some improvements. For instance, it would be nice to have a 3D printed case that goes around our robot and covers the wires to keep the electronics. But because of time constraints, this was sadly not possible. ","Our robot is completely 3D printed except for the mirror and electronics. We used different types of printer all originating from bambu labs to do this. Additionally, for the mirror, we made it ourself using a 3D printed mold and heat press aluminum. Throughout our design process, we encountered a couple of problems. For instance, a major modification that we made was when we decided to add a dribbler to our offence robot. This meant that we needed to change our design and create screws holes for the dribbler mount. This was easy as every part was modularized and it paid off. ","We used four motors positioned at 50°, 130°, 230°, and 310° with omnidirectional wheels to enable full 360° holonomic movement. This setup allows the robot to move in any direction and rotate without turning first, giving us an advantage in both offensive positioning and defensive control. Compared to a three-motor system, our four-motor configuration offers greater stability, smoother acceleration, and more balanced force distribution, which is crucial at high speeds. It’s also more efficient and reliable than a five-motor setup, avoiding unnecessary weight (and space), power draw, and mechanical complexity. Overall, four motors provide the optimal balance of agility, control, and simplicity. ",The kicker uses a solenoid that we made ourselves. We wrapped it using 22awg wire and stripped the core from a premade solenoid. The kicker box and coiling piece are both 3D printed. These parts were all modelled within solidworks which made it easy for us to see how everything fit together. ,Our robot does have a dribbler which was also designed within solidworks. The piece that makes contact with the ball is made out of silicone with a shore hardness of 20a. This made it catch the ball with quite a bit of grip which allowed us to run different strategies. The mold was also 3D printed which was sanded in the post processing.,https://github.com/Eric1773/Full-Parts-List-,"The kicker is the component that we are the most proud of. This year, we chose to make our kicker by ourselves which made it much stronger than its commercial counterparts.","https://drive.google.com/open?id=1tvuuov8XWta-qlIZAcGse5KUN0jz_wZl, https://drive.google.com/open?id=18D277NYmZvuxWn0fW6byS5TQ7V8LvLWj, https://drive.google.com/open?id=1aK2Udl3XxZDezu_qOoszDkELCuQc_hTA",https://drive.google.com/open?id=1_cW96NoFRiIdJCEp0F3Fam1HPudgwV-v,"Our robot uses a 12V battery that directly supplies current to the capacitor board, microcontroller, and motor drivers. The voltage is regulated to 5V in our Teensy, which is then supplied to the OpenMV board and further downed to 3.3V for the sensors. Kicker boosters are explained in a later question.","We use a Teensy 4.1 microcontroller to control our motors by sending PWM and direction signals to the motor driver. The driver is powered directly by a 12V battery and uses the PWM signal to control motor speed and a digital input to set the rotation direction. Since the Teensy operates at 3.3V logic and the driver is compatible, no level shifting is needed. This setup keeps high current isolated from the microcontroller and allows for precise, real-time control of each motor.","We use a Teensy 4.1 microcontroller and an OpenMV camera module with an RT1062 processor to control our robot. The Teensy was chosen for its high processing speed (600 MHz), real-time responsiveness, and reliable low-level hardware control, making it ideal for managing motor outputs, sensor inputs, and movement decisions during gameplay. Its ability to run without an operating system ensures minimal latency and predictable timing, which is essential for fast, stable robot behavior.
The OpenMV module is used for computer vision tasks, such as ball and color detection. It processes images onboard using the RT1062 chip and sends simplified vision data to the Teensy via serial communication.","Our robot uses an OpenMV camera module for ball and goal detection. Electrically, the camera connects to the main microcontroller through a UART serial interface and operates independently with its onboard processor. It captures visual data and processes it in real time to identify colored targets like the ball and goals. The camera is pre-configured with fixed exposure, gain, and color balance settings to ensure stable performance under varying lighting conditions. Once the targets are identified, the camera calculates their position relative to the robot and sends this information as data packets to the main controller, allowing for fast and accurate tracking without burdening the main processor.","We use photoresistance sensors connected directly to the microcontroller, which send analog values based on how much light is reflected from the surface below. White field lines reflect more light than the darker playing field, resulting in lower resistance and higher voltage readings. The microcontroller continuously reads these values through its analog input pins. When the voltage crosses a predefined threshold, it detects the presence of a line.","We use analog ultrasonic sensors connected to the processor’s analog inputs to measure distances and determine our position on the field. For direction, we use an MPU6050 sensor connected via I2C, which provides real-time orientation data from its gyroscope and accelerometer. This combination allows our robot to accurately track its position and facing direction during matches.","The battery supplies 12v to the capacitor PCB. Then this PCB loads the capacitor and boosts the voltage up 48v. Then when commanded, the board discharges the capacitors and runs a current through the solenoid which creates an electromagnet which shoots the ferromagnet forwards. After the kick occurs, an elastic band retracts the ferromagnet which allows it to prepare to kick again on the next command. ",The battery supplies 12v to the ESC which wires to the teensy 4.1 and powers the brushless dribbler motor (Maxon). Then the motor spins which powers a gearbox which leads to a silicone piece which turns and sucks in the ball. ,,,We really wanted our design to stand out with the kicker power and I am very proud of it in our final product. The electronic that we are referring to is the capacitor wiring. We loaded 4 capacitors in a modularized section of the robot which allowed them to charge and discharge while dispersing heat which induced cooling. ,https://drive.google.com/open?id=1tImE47LThnkgNrSxwSdYlDhWimDRbgl0,"We use our processor (microcontroller) to move the motors by calculating direction and speed values in real time based on our robot’s movement plan, then converting those values into PWM (Pulse Width Modulation) signals and digital direction signals that are sent to motor driver pins.
First, we calculate and store the robot’s desired speed, movement direction, and target facing direction via our strategies. The move function reads these values and uses trigonometric calculations to determine how fast each of the four motors should spin to achieve the intended motion. This includes translating a global direction into individual wheel speeds using the law of sines and a combination of motor sign matrices. It also corrects the robot’s orientation using the difference between its current compass heading and its target direction, adjusting motor speeds accordingly to align or turn.
Once the final speeds for each motor are calculated, they are passed to a function adjusts the direction pin (HIGH or LOW) based on whether the motor should spin forward or backward, and sends a PWM signal using analogWrite() to control how fast the motor spins. ","We find the ball using an OpenMV RT1062 camera pointed at a convex hyperbolic mirror. This makes for simple ball angle and distance calculations, as we can directly map the x and y values of the camera image to the actual field, where the origin of the coordinates (the center) is our robot. The data is then sent to our microcontroller via UART. ","Our offence algorithm works to catch the ball in two ways. 
If the ball is in bounds, the algorithm works by first checking where the ball is and how far away it is. Instead of going straight toward the ball, it uses ball angle to calculate a slightly curved path by adding a linearly scaling offset to the ball angle itself. This allows the robot to approach from a better angle, especially for gaining control. It then decides whether the ball is in front or behind. If the ball is behind, the robot resets and faces front. If the ball is in front, it chooses whether to aim at the goal or hide the ball based on how far it is from obstacles and how balanced the space is on the left and right sides. The robot also checks how close it is to walls or other objects and stops if needed to avoid crashing. As it moves toward the ball, it adjusts its speed based on how close the ball is—moving faster when far and slower as it gets closer. 
If the ball is not in bounds, the robot turns either 90 or 270 degrees to maximize its reach and slowly moves toward the ball to take control despite the ball being technically out of play. This gives us an advantage versus teams without dribblers, as we would have control of the ball whenever it rolls out the white lines.

The defence algorithm works differently, as it's priority is to clear the ball away from the goal. Instead of developing sophisticated speed and direction control systems, the defence robot turns toward and moves toward ball angle to knock it away from the goal as soon as possible.","We use a combination of ultrasonic distance readings and dedicated, ground facing greyscale sensors to find the lines and stay inside the field. For the ultrasonic readings, we use a sum of vectors formula, where as we approach side walls, we simulate a force exerted from the wall against our robot to slow down the robot's speed/force. For the grayscale sensors, we built a line scanning program that would record the minimum and maximum values of the field, where the minimum would be the whitest white and the maximum the greenest green. An average or desired threshold between the two would be used to evaluate whether our robot is positioned above a white line or not.","For defence, we use the kicker to clear the ball away from the net if our laser sensors are tripped. We also experimented with bounce and goal shooting with our powerful kicker but ultimately deemed it too risky to do without a dribbler on our defense robot, as these strategies wouldn't clear the ball away as fast.
Once we've captured the ball, we use two main algorithms to score goals, aim shoot and hide ball. Our most direct method is the camera aim shoot algorithm, which uses real-time goal angle data from the camera to align the robot before kicking. Once aligned within a small angular threshold, the robot activates the dribbler to maintain possession and then kicks toward the target with precision. This system ensures we don’t rush the shot and only kick once we’re properly aimed at the goal, which increases shot accuracy.
In more defensive or strategic situations, we use our hide ball routine to protect the ball near the walls. This maneuver uses side distance sensors to determine which wall is closer, then turns the robot sideways and drives toward that wall while maintaining control of the ball. After reaching the desired position, the robot spins and prepares to shoot with a surprise angle. The dribbler keeps the ball close during the entire sequence, and the robot only kicks when it’s in the optimal position and orientation. This technique is particularly effective for countering strategies that defend straight shots exceptionally well.","Our defence robot primarily uses ultrasonic readings to create a coordinate system where the robot's ideal position lies on the x axis of the plane. The real time ultrasonic readings are compared to the predetermined (via testing) ideal coordinates of the white line. This allows for our robot to dynamically follow the ball's trajectory while aligning itself along the white line to counteract potential pushing from opponents and our offence. We also experimented with algorithms to determine the ball's absolute position and thereby its trajectory vector using this coordinate system, but ultimately found that these predictions are inconsistent and most teams wouldn't have strategies that required a prediction system to counter. We also experimented with strategies to limit the offence robot's shooting angles by moving defence robot up, echoing the conventional soccer goalie strategies of increasing their own relative size to counter striker kicks.",They do not communicate with each other.,"One of our proudest innovations is how we took our “around ball” behavior from a simple orbit into a strategic, adaptive system that gave us a major competitive advantage. Instead of circling the ball at a fixed offset, we used a linear scaling method with an exponential term for fine tuning to adjust the angle based on how far off-center the ball was. This made our robot more aggressive when the ball was far from the front and more stable as it aligned, resulting in smoother, smarter movement.
We also implemented a quadratic decay in speed as the robot approached the ball. This allowed us to slow down exponentially during the final approach, preventing overshooting and improving control—especially near the corners or against walls. This combination of dynamic angle and speed control gave us a more fluid and reliable way to gain possession and maintain pressure during offensive plays.
To make the system even more intelligent, we developed a dynamic strategy selector. Based on wall distances and the symmetry between left and right sensors, the robot determines whether to orbit into a shot, hide the ball near a wall, or reset to a neutral position. In key situations, we also added pre-aiming—where the robot starts turning toward the goal before it fully possesses the ball—allowing us to shoot faster and more effectively. This innovation helped us convert more possessions into goals and made our robot’s offense significantly harder to counter.",,https://drive.google.com/open?id=1zH5OOQQm-uNdPP1JLkv9alHAFW5ZBZLV,"Robots (cost of components that are in your robots right now): 2150 CAD each
Experiments (failed builds, broken hardware etc.): 2000 CAD
Environment (fields, balls, etc.) : 1200 CAD
1 USD = 1.37 CAD",100% parents,3,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",lovbotthunder@gmail.com,,
7/13/2025 13:36:06,Mathimazierer,Lightweight League,Germany (Ger),theodorreber@gmail.com,"Team Instagram: https://www.instagram.com/mathimazierer/
https://technulgy.com/
Official Youtube: https://www.youtube.com/@Technulgy",https://drive.google.com/open?id=11WIjo8VV9w8q559K-kuz0K8DHNnssK9z,"Theo Reber: Software development
Dominik Hummel: CAD Design
Emanuel Sanchez: Circuit and PCB Design
Mika Rudat: Soldering and assembling robots","Twice a week for each 1,5 hours",Robotic room at school,We started mid December 2024.,"South German Championship 2023: 1v1 Lightweight League
German Open 2023: 1v1 Lightweight League
European Championship 2023: 1v1 Lightweight League
-
South German Championship 2024: 2v2 Lightweight League
German Open 2024: 2v2 Lightweight League
European Championship 2024: 2v2 Lightweight League
-
South German Championship 2025: 2v2 Lightweight League
German Open 2025: 2v2 Lightweight League","Managing Registration, Managing the whole journey",We communicated via our WhatsApp Group and Discord. For keeping everything up to date for everyone we used Nextcloud and Github.,For some coding issues we used ChatGPT to know why certain problems were happening in the code and to fix some weird program structure. ,https://drive.google.com/open?id=1b5Z-91agKrCIYttWdIdSV_iOOBpusouj,https://drive.google.com/open?id=1VZblKnj3-IGFb6gdcI3rQf5qUGRklOBo,https://drive.google.com/open?id=1PNKi_rT_1B5EZfmCbQSLkP8d6RSRFV_D,https://drive.google.com/open?id=1VP_ZVQkFvx_8GbtEhyPNmAS16L1sWr-k,https://drive.google.com/open?id=1v7FxB1kPP79GVgz8CU7_UYcu9_WlGBb8,https://drive.google.com/open?id=1XTT1glzKhiB9eq8rK7ClsJ554Fc_UTCV,https://drive.google.com/open?id=1BT7zeyL8Y6n6PiGz1N7m8ZREuwl_XDM1,We use 4 SRF08-Ultrasonic sensors on our robot to measure the distances to the walls. We use these distances to slow our robot down the closer he gets to the nearest wall so he dosn't  drive out of the legal parts of the field as often as he would with just the line detection board.,https://drive.google.com/open?id=1DamrGfuWwpp5RP6iWmPQI5GSWqmjr70D,https://drive.google.com/open?id=176GYSeieNLo4AF6hUi-Zncjgnh2my7Fc,https://drive.google.com/open?id=1WIomBqKkgMqn4-fkUAsgir431OBs_9_D,https://drive.google.com/open?id=1ey3uar2Q8y2we8agpQcMUzsONyT4BRR5,https://drive.google.com/open?id=1dcTkO5B27el5u8BZb_GQfw7sMmdOJUZS,https://drive.google.com/open?id=1qJkkUGzF0Kio3Y_hxhxL6875aGkNNWkl,https://drive.google.com/open?id=1S1NtOk5g7aeUmT9_G14s-Bx37P8lli_5,"Since the last year we have changed a lot of things about our robot. Last year we struggled a lot with problem in strength, knowing where we are on the field and turning towards the goal as soon as we have the ball. The problem with strength was solved by using regulated brushless motors instead of our old unregulated brushed motors and combining it with new wheels which use X-Rings instead of O-Rings so we have two parts where the rubber cross wheels can touch the field. The problem with orientation was solved by using 4-Ultrasonic Sensors to know where we are. The last thing being solved was the ""turning to the goal"", which was solved by using a OpenMV in combination with a 360° mirror so we can see the goal on nearly every point on the field. In the beginning of the design process we noticed that the robot was to unstable and we had a lot of shaking in our camera video which is why we had to construct a few parts new to make them stronger and more stable. We came up with our design because we wanted to build it so it is quite easy to dis- and assemble the robot quickly that why you can for example can take of our ultrasonic sensors and camera unit with only 8 screws. For design we are currently using Autodesk Inventor 2025.","For the most parts of our robot we used our own 3D-printer. PCBs were ordered at a shop called ""MultiCB"" and our cross wheels were manufactured by an chinese manufacturer called ""Diode Machining"". For working together with the chinese factory we first made a quotion in a forum where manufacturers can make offers to the people making the quotion. Then we chatted via e-mail to talk about everything important and soon after the cross wheels arrived. The mirrors were grounded by a local dentist. ","For our robot we used 4 driving motors (Maxon EC motors) because we think that you have the most strength in this configuration. We build our own wheels because we think with our own design we can achieve the most grip and we can adjust the wheels to our robot the best. We designed the wheels using Autodesk Inventor 2025. It's build using a solid 3D-printed base. The cross wheels have small plain bearing (MSM-0205-02) in the inside of the cross wheel to make it drive even more effortlessly. We then put the crosswheels onto pins(ISO 2338 Zylinderstifte, Passung m6) which we then put into the 3D-printed base. On top of that we also put X-rings (XRINGBS202NBR70 at https://www.ir-dichtungstechnik.de) on our cross wheels. ",N/A,N/A,,"The two parts we are most proud of are once the very well functioning 360°-camera, helping us being more efficient with our scoring chances and the easy dis- and assembly of the robot, helping with keeping things easy and fast. The largest innovation this year we are surly proud of are definitely the new wheels with X-rings instead of O-rings. Using this we were able to improve our grip on the field significantly which helps us a lot with not being ""Out of bounce"". This is the case because the X-rings have two parts were the rubber cross wheels can touch the field, compared to only one with the O-rings, which may not seem like much but it can make a huge difference. Also the wheels are now mounted using clamping sets which help with now having that much force on the motor shaft compared to a single locking screw. ",,https://drive.google.com/open?id=11bPtig5KZlyG3pV9F05sPo_GSSYsAFhk,"Our robot has a 11.1V battery which is directly used by the motors and the motor driver's. For most of the sensors like the ultrasonic sensor, the BNO055 gyro sensor, our OpenMV, our ifrared sensors, our multiplexers and also our teensy we use 5V which we regulate using a dc/dc converter. For our LED on our line detection board and for the phototransistors we use to detect the line we use 3,3V which we, just like with the 5 volts, convert using a dc/dc converter. ","We use motor drivers that give instructions to the motors. We control our motor drivers via 2 parameters, one is direction, which is just a digital signal the other one, which is important for how fast the motor spins is the PWM signal. Both of these signals are controlled over the Teensy 4.1 on our robot. On top of that our Maxon-ESC (Electronic Speed Controler) motor driver regulates the motors all alone so we don't have to do anything for this part to work.",For our robot we use the Teensy 4.1 micro controller. We made this choice because the Teensy 4.1 can work with loads of data very easylly and it also has lots of pins which is especially important for us because we have a lot of sensors to read and work with. It's also quite small when you think of the fact that it can do so many things which is also very important for our small space robots. On top of that the price/performance ratio is very good for that board.,"Our ball detection works with 16 infrared sensors and one multiplexer which summarizes the values of all sensors. When we have the values on the Teensy 4.1 we use a pre loop to find out which of the 16 sensors has the lowest value (which means the ball is closest to that sensor) and then drive to the pre determined angle according to the sensor. We also difference between a long distance to the ball and a short one so we firstly drive directly on the ball if it is far away and afterwards if it is closer we drive around it. Our camera to detect the goals has a threshold in the LAB- color space which is the same as the color of the goal and afterwards the OpenMV searches the video for pixels with a similar threshold. These pixels are then combined into a rectangle which we calculate the angle from. This happens using the x and y coordinate and using a certain funktain (atan2(y,x)*180/PI).","We have a resistor in front of the LED to reduce the voltage. The LED works normally with the voltage after the resistor and GND. On the photo transistor one side is connected with 3,3V+ the other one with a pull-down-resistor to make it possible for us to read sensor values from it.","For navigation we use two types of sensors. For knowing on what position we are on the field, we use ultrasonic sensors which communicate via I2C with our Teensy 4.1. For the direction the robot faces we use the BNO055 as a gyro. The BNO055 communicates over I2C as well. ",N/A,N/A,"https://drive.google.com/open?id=1MAAI55uGoeRIQdylEVoBLBsSHD3LmUWC, https://drive.google.com/open?id=1ZuU8gDjo33Z_kl66jcTUm84Vn6td9xLf, https://drive.google.com/open?id=1gAAc5UJyjY_HAbFymN7bd8lof63buuSv","https://drive.google.com/open?id=11CkXhljjyN6CYSOPA0P7EIbsqDJCL1c9, https://drive.google.com/open?id=1rYqmo00wFjquzqyDDXNrbHt6I87LVGJ2, https://drive.google.com/open?id=17o-sy_Y0H76SkGO0HYig8VP3Sh2aHqj0","We are most proud of the very good and reliable PCBs which work very good with all sensors used and make the work a lot easier. A new innovation is that we used new motor drivers, which also directly worked on the first try.","https://drive.google.com/open?id=1UTQJj2ZoyfyHlaCYNeka4sZeUdk9fdRg, https://drive.google.com/open?id=1T1fNcQ1qG1nUOziUarGZGukzsKDDyEQp, https://drive.google.com/open?id=1nk0NwKk72_tzXiuKLdVVEbfos0SgxS7H, https://drive.google.com/open?id=1yl6mh9qpkntzF_dUlFp96kGxR62S5EHb",We use our Teensy 4.1 to send a PWM-signal to the motor driver to control the speed. For the second signal it's a digital signal to control the direction in which the motors spin.,We read the data from the 16 infrared sensors with a multiplexer. When we have the values on the Teensy 4.1 we use a pre loop to find out which of the 16 sensors has the lowest value (which means the ball is closest to that sensor) and then drive to the pre determined angle according to the sensor. We also difference between a long distance to the ball and a short one so we firstly drive directly on the ball if it is far away and afterwards if it is closer we drive around it. For determining the distance to the ball we use an analog signal from the sensor.,"Our strategy is to firstly drive to the ball directly if it is far away because we can faster come into the closer range of the ball this way. When we are at the closer zone we drive around the ball so in the end the ball is in front of our ball catcher, so for example if the ball is right behind us we want to drive left then back and then right again so the ball lays infront of our robot and we can drive straight on it. Both of our robots use the same way to approach the ball.","Our line detection works with 60 photo transistor sensors which detect the reflected light. When we are over the white line more light emitted by a LED is reflected than when we are over the green field. In the program we have a threshold and if a sensor is higher than that we know that he is over the line. Now we use a algorithm which remembers in a certain time span which sensors have already been on the line so we also take the sensors that are already to far over the line into account. This way we can reduce going ""Out Of Bounce"" a lot.",We use an algorithm that calculates the angle to the goal from our offset continuously. When we need to we activate the p-d regulated part in our main program on the Teensy 4.1 and the robot aims at the goal.,We first position in the middle of the goal using our ultrasonic sensors. Then when the ball goes to the right we want to move with it so the goal is always covered from us. During this process we want to always keep the right distance to the back wall so we don't stand in the middle of the field but in front of the goal.,Our robots communicate with each other via the NRF24L01. We use this for our advantage because this way we can't push out each other and we also always cover up the goal from ourselves.,"The code we're most proud of is the part to slow ourselves down the nearer we come to the closest wall, using ultrasonic sensors. Because this way, we go ""Out Of Bounds"" way rarer which is very important for winning games. ",https://github.com/Technulgy-LGNU (You have to look at the right catecories and then always go onto the team mathimazierer folder),https://drive.google.com/open?id=1iTvt7IX7C2ADnwqFT4GhUCWpBCn-32hF,"Robots: About 1500 Euro each
Experiments: about 200 Euro
Environment: 750 Euro
1Euro = 0.86 USD","80% school
20% sponsors",5,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",theodorreber@gmail.com,,
7/13/2025 15:29:45,MegaHertz,Open League,Italy,giuliano.mariniello@edu.cobianchi.it,,https://drive.google.com/open?id=14HR-txL2ouNH_YipXhvim8xFpTx3yAfX,"Giuliano Mariniello: Software developer and team leader
Luca Colombo: Software and camera development
Pietro Cova: Hardware and PCB design
Stefano Lupato: Software","During our academic term, we met for a total of 15 hours per week, distributed across three weekly sessions.",We worked primarily in the school's robotics laboratory and occasionally in Pietro Cova's garage for additional collaboration and testing.,October 2024,"Italian Open 2024: 2v2 Socccer Open
RoboCup Eindhoven 2024: 2v2 Soccer Open
Italian Open 2025 : 2v2 Soccer Open
European Championship 2025: 2v2 Soccer Open",Budget and traveling organization,"We coordinated our work through a WhatsApp group, which we used to organize meetings and delegate tasks. For version control and code comparison, we utilized GitHub. The robot’s mechanical design was developed collaboratively within our shared Fusion 360 team. Additionally, we used a shared Google Drive to store all documentation, posters, and research materials.","We used ChatGPT primarily to support our coding efforts when we encountered challenges. While its answers were not always directly applicable, the tool often helped us better understand the core of the problem and guided us toward effective solutions.",https://drive.google.com/open?id=1IUxm_CKZw8HYwHhWqQJtIaAZCxvyKp3M,https://drive.google.com/open?id=14izIvtvrA0FG6_QVAZI8Bka4Wv-zp6jT,https://drive.google.com/open?id=1dtKL9TnZnzOiG3phHuaOfDDK4o1Wafwz,https://drive.google.com/open?id=1MtM3QP_2gIt1dsPCqf3h0HMOQdxS1bPn,https://drive.google.com/open?id=15Inu33_DS6WZ1aHQ0opWzBAL8exPcPxb,https://drive.google.com/open?id=1aH6HKuU65MdLsghYIAJrTFqZFB1qdZS2,https://drive.google.com/open?id=1dIzLwhT1eUC0_6oLFDYMp_GzBYele-Oc,"To localize our robots on the field, we use two complementary methods based on fuzzy logic.

The first method uses the OpenMV H7 camera with an omnidirectional mirror to detect both goals. Because of mirror distortion, we divide the field into 12 sectors and categorize the robot’s position accordingly. This visual input provides a quick and lightweight way to estimate location.

The second method uses four Time-of-Flight (ToF) sensors arranged in a cross pattern. By comparing distances to the field’s borders, we again estimate the robot’s sector using predefined fuzzy logic rules.

We also tested a combined method that merges data from both the camera and the ToF sensors to compute the robot’s exact X and Y coordinates using trigonometry. However, the computational load was too high for our 8-bit processor, causing delays. As a result, we kept the simpler fuzzy logic approach.

This localization is mainly used when the robot loses sight of the ball and helps maintain proper positioning in both offensive and defensive scenarios.
",https://drive.google.com/open?id=13wbcwYeBJlNHKu_g9EmJRyYoDfRYXuzJ,https://drive.google.com/open?id=1aLSJkAj8StqTBQfItxYyIZrVS23v05vX,https://drive.google.com/open?id=1GzwNZsw1d3Xx4SwrFvwqagSEaf2NKmnN,https://drive.google.com/open?id=16xznhbHRo3PUmoMqJhTIZhOewQz7pqao,https://drive.google.com/open?id=1RDT_zbigBn3J4e0FAQ2aU1mlGWSaZywR,https://drive.google.com/open?id=16CJ9ch7cbIfIQwS3NK7BHYj1ObA36rcF,https://drive.google.com/open?id=1CfAC_ZGcxDJkFM9JXSfKc1y-DYbLAnbM,"Our mechanical design this year draws inspiration from Small Size League (SSL) teams and top-performing robots from the previous season. One of our key innovations was changing the motor mounting angle from 45° to 55°, which enabled a larger and more efficient dribbler, greatly enhancing our ball control.

We completely redesigned our omniwheels to provide better traction and stability. Using Autodesk Fusion 360, we modeled and simulated our mechanical components, allowing us to test different configurations, verify tolerances, and iterate rapidly based on real-world feedback.

Special attention was given to the omnidirectional vision system. We optimized the mirror shape and camera placement to maximize visibility while reducing distortion. The lower chassis was also redesigned with strategic cuts near the motor mounts to introduce controlled flex, acting as passive suspension and improving grip under high-speed conditions.

Several hardware upgrades were made over last year’s design. We re-cast the dribbler rollers, widened the chassis for improved stability and internal space, and lowered the robot’s profile to enhance the camera’s field of view.

A major mechanical improvement was the integration of a brushless motor in the rear dribbler. This enabled the ""Rabona"" maneuver—a quick spin that lets the robot shoot or pass from the rear, creating new strategic opportunities during matches.

Overall, our mechanical design focused on improving control, efficiency, and adaptability on the field through a process of simulation, prototyping, and continuous refinement.
","To build our robot, we combined in-house manufacturing with select external fabrication services. Most structural parts were made using our 3D printers, CNC milling machine, and laser cutter. The main chassis was milled from polycarbonate sheets for strength, while plexiglass was laser-cut for lightweight components like handles.

Initially, our wheels were made entirely of PLA, but they proved too fragile. After some trial and error, we redesigned them with a metal core—milled in-house—which greatly improved their durability and performance.

For rubber elements such as wheel treads and dribbler rollers, we designed custom 3D-printed molds and cast the parts using a two-component silicone. This allowed us to fine-tune grip and softness.

More complex metal components, like the dribbler frame, were fabricated with the help of local partners. One sponsor, OMCD, manufactured our mirrors and other precision parts.

Most of our PCBs were assembled through a trusted local supplier, with some boards produced by international services like JLCPCB to ensure fast delivery and consistent quality.

Our mechanical and electronic designs were created with manufacturability in mind from the start, which minimized rework and ensured a smooth assembly process.
","Each of our robots uses four 12V Maxon DC motors rated at 500 RPM to achieve full omnidirectional movement. We chose a four-wheel drive system over the more common three-wheel setup for increased power, traction, and maneuverability. This configuration offers improved stability and reduces strain on each motor, enhancing durability and responsiveness during fast gameplay.

The motors were selected for their reliability, high torque, and smooth performance, which are essential for accurate movement and quick directional changes.

Our omniwheels are fully custom-built using a hybrid design. Each wheel features a PLA plastic core and a milled aluminum shell for optimal strength-to-weight balance. They incorporate six hourglass-shaped silicone rollers, cast in-house using custom molds, providing 12 points of contact per wheel for smooth and precise movement.

This wheel and drive system is the result of two years of development and testing, and it plays a key role in giving our robots the agility and control needed to perform at a high level in competitive matches.
","Our robot features an electromagnetic kicker system designed to deliver quick and powerful shots. The core of the mechanism is a hand-wound electromagnetic coil, which acts as a solenoid. Inside the coil is an iron rod (also referred to as a plunger), which is accelerated forward when the coil is energized. This movement is driven by the magnetic field generated by the coil, propelling the rod with enough force to kick the ball.

Attached to the tip of the rod is a small impact plate that directly transfers the momentum to the ball, launching it forward. This setup allows for compact, high-speed kicks that are essential in fast-paced gameplay scenarios such as shooting on goal, or clearing the ball from defense.

To ensure the kicker resets quickly and doesn’t interfere with the dribbler system, a spring is integrated behind the rod to return it to its resting position immediately after activation. This spring is fixed to the middle chassis at the other side.
","Our dribbler system features two degrees of freedom to adapt dynamically during gameplay. The first allows vertical movement (Z-axis), while the second lets each roller shift slightly along the X-axis for better ball contact. A set of pre-tensioned springs maintains the default position, providing passive compliance when interacting with the ball or uneven surfaces.

The rollers are custom-cast using two-component silicone in 3D-printed PLA molds, allowing us to fine-tune their softness and shape for optimal grip. The front dribbler is powered by a DC motor, while the rear uses a brushless motor. Both drive the rollers through a belt-and-pulley system designed to slip under excessive load, protecting the motors from damage.

The entire assembly is mounted on a custom metal chassis, adjustable in height to accommodate different field types. This robust, flexible design ensures consistent ball control and durability, supporting both offensive handling and defensive interception.
",,"This year, we’re especially proud of several key mechanical advancements that mark a major improvement from previous designs. The most significant change is a complete structural redesign—resulting in a more compact, accessible, and balanced robot. Optimized internal layout improved weight distribution, stability, and ease of maintenance.

A major innovation was our switch to a 55-degree symmetrical wheel configuration. This allowed for a wider and more efficient dribbler system with greater ball contact and control, especially in tight situations. The new layout also freed up internal space for larger, more capable components without compromising maneuverability.

We also developed custom hybrid omniwheels, solving past reliability issues. These wheels combine CNC-milled aluminum cores with hand-cast silicone rollers, fully manufactured in-house. The result is significantly improved durability, precision, and field performance.

Each improvement reflects our growing technical skill, and our commitment to continuous innovation—both in robot performance and team development.
","https://drive.google.com/open?id=15zNRYm3ZY9DRcIALJANhe9woFdS9eZZm, https://drive.google.com/open?id=1yZ49cTWIc49qOXBO48-xZIxHSVcWNfd4, https://drive.google.com/open?id=1-TaGPkE4fyv5ncxeWZhNxfH92ReYQVN0, https://drive.google.com/open?id=1sSRjJke2XuMbz9dVXYlcq008o8LzPLD-",https://drive.google.com/open?id=1GZTuzDxAMFhAKCk5YUBsxSSC-gtUEQBg,"Our robot is powered by a 3-cell 11.1V LiPo battery pack, which serves as the primary power source for all subsystems. From this battery, we derive four distinct voltage levels to meet the requirements of different components while ensuring efficiency and reliability.

The unregulated 11.1V is used directly to power the motors and high-current circuits, delivering the full capacity of the battery to ensure strong and responsive movement.

A stable 5V supply powers the mainboard logic, OpenMV camera, and most of the sensors. This voltage is generated through a custom-designed switching regulator on the power board, chosen for its high efficiency and minimal heat output.

We also use a 3.3V level to power components such as the ToF sensors and certain communication interfaces. This voltage is obtained using a standard linear regulator, such as the L7803, which is suitable due to the low current demand of these components.

Finally, a 48V level is required to charge the capacitors used in the electromagnetic kicker system. This voltage is generated by a dedicated step-up converter built onto a separate PCB that manages the kicker functionality independently.

All power stages are designed with stability, safety, and modularity in mind, allowing us to isolate, monitor, and troubleshoot individual sections with ease.
","```
In order to drive our motors, we use an H-bridge circuit for each individual motor. This setup allows us to control the direction of rotation by adjusting the polarity of the voltage applied to the motor terminals. In addition to direction control, each motor receives a dedicated PWM signal, which regulates the motor's angular velocity. This combination enables precise omnidirectional movement, which is essential for our robot’s mobility system.

Each H-bridge circuit is custom-built using the L6207 driver from STMicroelectronics. This integrated driver offers dual full-bridge control and is well-suited for our high-efficiency DC motors. For current monitoring and safety, every motor circuit includes its own current-sensing resistor. This allows us to implement overcurrent protection by shutting down the motor driver in case of a short circuit or excessive load, preserving both the motor and the control electronics.

Control signals to each motor consist of three inputs: two digital bits to set the direction and one PWM signal connected to the enable pin of the L6207. This setup gives us fine control over each motor’s behavior and ensures reliable and responsive movement under varying conditions on the field.","We use a PIC18F67K40 microcontroller as the main processor on our robot. This 8-bit microcontroller is cost-effective, reliable, and well-suited for custom PCB design, which makes it ideal for our project constraints. While its computational power is limited compared to higher-end processors, it offers all the essential functionalities required for our control system, including multiple I/O ports, analog inputs, and serial communication interfaces.

To offload specific time-critical tasks, we added a second microcontroller on the mainboard. This secondary processor is dedicated solely to reading the line sensors in real time. By isolating this function, we ensure that the main processor remains responsive and is not slowed down by the constant polling of sensor data. When a line is detected, the secondary processor transmits the information to the main controller through parallel communication, allowing for immediate response.

The main processor is programmed in C for better readability and modularity, while the secondary processor is programmed in assembly language to achieve maximum execution speed and minimize latency in line detection. This dual-processor architecture allows us to maintain a responsive control system even within the constraints of 8-bit hardware.","Our ball detection system is based on the OpenMV H7 Plus camera module, which features a 32-bit STM32 processor and runs MicroPython. This allows us to perform onboard image processing directly on the camera without overloading the main control unit.

The camera uses color thresholding and shape detection algorithms to identify the ball within its field of view. By processing the image frames in real time, the OpenMV can detect the ball’s position relative to the robot and calculate both direction and approximate distance.

Once the ball is detected, the camera formats the relevant data into a packet and transmits it to the main board via a UART connection. The main processor is configured to respond through an interrupt-based system, immediately reading and interpreting the incoming data. This ensures minimal delay between detection and robot response, allowing for quick adjustments in movement and orientation.

This setup provides a lightweight and efficient ball detection solution that integrates seamlessly with the rest of the robot’s control architecture.","Our line detection system is based on custom-made sensor boards using a phototransistor and infrared LED pair. Each sensor emits a beam of infrared light onto the field surface. When this light reflects back, the phototransistor generates a voltage signal proportional to the intensity of the reflected light. This allows us to distinguish between the dark playing field and the white boundary lines.

Each sensor module includes two LED-phototransistor pairs for increased accuracy and stability in detection. Our robots are equipped with a total of five such sensors, which gives us sufficient coverage to detect line crossings while maintaining a balance between information quality and processing load.

All sensor outputs are connected to the analog-to-digital converter (ADC) inputs of a dedicated secondary microcontroller. This processor is tasked solely with handling the line detection readings. By isolating this function, we prevent unnecessary load on the main controller. The secondary processor processes the analog values in real time and, when a line is detected, it sends the relevant data to the main processor via parallel communication for immediate response.

This approach ensures responsive and reliable line detection without compromising the performance of the robot’s primary control tasks.","For navigation and localization on the field, we use a combination of different sensors tailored for performance and efficiency. In addition to the camera, which provides global vision and object tracking, we have four Time-of-Flight (ToF) distance sensors mounted in a cross pattern around the robot. These sensors output an analog voltage ranging from 0 to 3.3V, corresponding to the measured distance. This analog approach allows us to connect the sensors directly to the ADC inputs of our microcontroller, avoiding the overhead of I2C communication, which can be both resource-intensive and less responsive in a multi-sensor configuration.

To determine the orientation of the robot, we use a 9-axis Inertial Measurement Unit (IMU), which combines an accelerometer, gyroscope, and magnetometer. This IMU communicates with the processor via the I2C interface and provides real-time data on the robot's angular position and rotation. The orientation information is critical for maintaining consistent direction and executing complex movement patterns.

Together, these sensors provide the necessary data for field navigation, obstacle awareness, and orientation control, enabling smooth and autonomous robot behavior.
","Our kicker system is driven by a high-power, high-current MOSFET, which is used to discharge a 48V capacitor bank directly into the electromagnetic coil of the kicker. The capacitors are charged by a dedicated step-up circuit, which boosts the voltage from our 11.1V battery to the required 48V level. 

When a kick is triggered, the microcontroller sends a signal to the MOSFET, allowing the stored energy in the capacitors to be rapidly released through the coil. This creates a strong and brief magnetic field that accelerates the kicker shaft forward, transferring kinetic energy to the ball.

We chose to power the coil using capacitors rather than drawing current directly from the battery to protect the battery from high current spikes. Directly discharging such a high load from the battery could cause voltage drops, thermal stress, or even dangerous failures such as circuit damage or battery swelling. Using capacitors also ensures a faster and more consistent response time for the kicker.

The circuit includes safety features such as over-voltage protection and controlled charging of the capacitors to ensure reliability and safety throughout operation.","Our dribbler system consists of two independent units: a front dribbler and a rear dribbler, each driven by a different type of motor and control circuit.

The front dribbler is powered by a brushed DC motor and controlled through an H-bridge circuit, identical to the one used for our movement motors. This allows us to precisely control the rotation direction and speed via PWM signals, enabling advanced maneuvers where the dribbler needs to reverse its spin. The H-bridge includes current sensing and shutdown features to protect against short circuits and overheating, ensuring both safety and reliability.

The rear dribbler is powered by a brushless DC motor, which is driven using a commercially available Electronic Speed Controller (ESC). This ESC receives its PWM signal directly from the main board and is powered straight from the battery through the main power switch. This setup ensures a high-performance response, crucial for executing quick maneuvers like our ""Rabona"" shot, where the ball is kicked from the rear while the robot rapidly turns.

Together, these systems give us full control over both dribblers, allowing them to adapt to different play situations and ball dynamics while maintaining consistent speed and torque",,"https://drive.google.com/open?id=1JLJh-sFVP8eLPCrRmM_3Lzzi6ruqY2EY, https://drive.google.com/open?id=1ffkpyeudlJ7QHl5vWVxdRwTyE3Y011_G","One of the electronic innovations we are most proud of this year is the significant reduction in the size of our custom PCBs. Compared to last year’s design, we were able to optimize the layout and component placement to create a much more compact and efficient board architecture. This improvement has had a direct impact on the accessibility and maintainability of our robots.

By minimizing the board dimensions, we freed up internal space within the chassis, allowing for easier cable management and quicker access to individual components during maintenance or troubleshooting. This also helped lower the robot’s center of gravity, improving its balance and overall performance on the field.

To achieve this, we reviewed each subsystem—such as motor drivers, sensor arrays, and communication modules—and integrated them more tightly while avoiding signal interference. We also transitioned some components to surface-mount versions and carefully routed power and signal traces to improve thermal management and signal integrity.

This compact design was entirely produced in-house, reinforcing our team's ability to iterate quickly and maintain full control over our electronics development. The experience also pushed us to refine our design and manufacturing workflows, laying a strong foundation for future improvements.","https://drive.google.com/open?id=1WiOF6AUkpD81W_ZXF3S9uf6gkem4t9rc, https://drive.google.com/open?id=1TDixNnSAGV59vp4XmykuPi8uLW2MN8pa","We implemented trigonometric equations to calculate the speed and direction of each motor based on the desired movement vector. By knowing the position and angle of each motor, we compute the necessary rotational velocity and direction through a mathematical model. This section is the most computationally intensive part of our code, but it ensures smooth transitions and accurate omnidirectional movement. It is a significant improvement compared to our older implementation, which relied on basic switch-case logic.

In addition, we use a PID control system to constantly adjust motor speeds and minimize error, keeping the robot as close as possible to the desired motion setpoint. Once the calculations are complete, the processor sends the direction and corresponding PWM signal to each motor.","In order to detect the ball, we use trigonometric calculations based on the image frame from our omnidirectional camera. Since we use a mirror-based system, the image is circular and distorted, but we are still able to extract useful data. We first identify the ball as a colored blob and determine its position relative to the center of the frame. The angle between the robot’s front and the ball is calculated from the angle of the blob around the image center, and the distance is estimated based on how far the blob is from that center.

To improve distance estimation accuracy, we use an external Python script during development and calibration. This script allows us to fine-tune the relationship between the blob’s pixel position and the real-world distance to the robot in centimeters. This calibration helps us maintain a more reliable and consistent ball tracking performance.","Both of our robots use the same movement strategy to approach the ball. We employ a linear control algorithm where the robot’s aggression factor increases as the distance to the ball decreases, allowing for more precise and assertive positioning when close to the target. 

Additionally, since our robots are equipped with dual dribblers—one at the front and one at the rear—they have the flexibility to catch and control the ball from either side. This capability enhances our ball handling and maneuvering options during gameplay.","To ensure our robot stays within the field boundaries, we use a straightforward algorithm based on the readings from multiple line sensors. When one or more sensors detect that the robot is crossing the boundary lines, the system calculates the angle corresponding to the midpoint between the activated sensors. 

Using this angle, the algorithm determines the opposite direction, guiding the robot to move back inside the field. This reactive control effectively keeps the robot within bounds while minimizing complex computations, ensuring reliable in-game positioning.","Our goal-scoring strategy is based on a series of conditional checks that determine when to activate the kicker or position the robot in front of the goal for an optimal shot. We have developed maneuvering algorithms that rotate the robot toward the goal by calculating the error between the current orientation and the target direction. Once the robot is aligned within an acceptable threshold and maintains a clear line of sight to the goal, it triggers the kicker to shoot.

To increase reliability, especially when the camera’s view is obstructed or struggling to detect the goal, we supplement our system with ToF sensors. These sensors provide additional distance data, allowing the robot to adjust its positioning and maintain effective goal-scoring opportunities even under limited visual conditions.","We developed a dedicated goalkeeper algorithm to defend our goal effectively. When one robot is attacking, the second robot acts as the goalkeeper, positioning itself along the X-axis to follow the ball’s movements and cover the goal area.

If the opponent team attempts to shoot, the goalkeeper activates its dribbler to spin in the opposite direction, allowing it to sweep the ball away upon contact and prevent a goal.","Our robots communicate with each other via Bluetooth using a UART communication protocol. Before transmitting a stream of essential data, such as their position relative to the ball and goals, as well as their assigned roles, they first exchange a handshake character to establish a reliable connection. 

This communication ensures coordinated behavior between the robots, preventing interference and enabling strategic teamwork during the game.","We are particularly proud of our go() function, which enables our robots to move smoothly in any desired direction without relying on predetermined maneuvers. This function uses real-time calculations to dynamically adjust motor speeds and directions, providing greater flexibility and precision in movement.

Additionally, we take pride in the efficient and relatively high-speed communication system between our two robots. This seamless data exchange allows for coordinated teamwork and strategic play, significantly improving our chances of winning games.",,https://drive.google.com/open?id=1kuQKJpc9XGy8GaXX4RHnqWM8JMAh89Bm,"Robots (cost of components that are in your robots right now): 1400 Euro each  
Experiments (failed builds, broken hardware, spare parts, etc.): 600 Euro  
Environment (field, tools, equipment like soldering station, oscilloscope, power supply, etc.): 800 Euro  
1 Euro= 1.14 USD","30% school
50% sponsors
20% personal savings",4,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",giulibros@gmail.com,,
7/13/2025 17:09:42,HIKARI,Open League,Australia,"yan0108@mhs.vic.edu.au
lia0049@mhs.vic.edu.au
ngu0546@mhs.vic.edu.au
gor0008@mhs.vic.edu.au",,,"Starr Yang: CAD and PCB Design
Taj Gordon: Mechanical Assembly
Bao Nguyen: Vision Programming
Brendan Liang: Strategy Programming",Our team meets for 3 hours every Thursday afternoon.,"A robotics room at school, and sometimes at a library.","We began working on this year's robot in February, after the school holidays ended.","Australian Open 2023: Soccer Entry League/Standard League
Australian Open 2024: Soccer Open League","As we had no prior experience, our mentor taught us how to use CAD and PCB design software, and how to use the 3D printers.","We communicated via a group chat on Microsoft Teams and a group chat on Discord. To distribute tasks among different members of the team, we created detailed to-do lists on Google Docs. Additionally, we used GitHub and Microsoft Teams to share code and other files.",We used GitHub Copilot and Cursor to assist us with coding the robot. We also used ChatGPT to quickly search the web to find suitable components when designing PCBs.,https://drive.google.com/open?id=1XVmgE8yi0F9IoDG27Vw9BNuhcf_6xQ24,https://drive.google.com/open?id=16SYRcQn2r33cGkSbkDOh070CSeZQItm0,https://drive.google.com/open?id=1i3HL6HPR-QZ5lDzR6otwCmibRG77Go_V,https://drive.google.com/open?id=1vKEjDXmVW1eFr_oaIm_Wlj9OkvnjH9hT,https://drive.google.com/open?id=1O9iCuK3zYlrhSM99Wo5kNqHoPmVo-QrW,https://drive.google.com/open?id=113koOWKXeD-uyjuSBu4ol0o-B-f5ue58,https://drive.google.com/open?id=1-pipb5jAsig1Y4uYMMgaVnfGKmTn-5oT,"In order to find our position within the field, we use a purely camera-based approach. By processing the camera image, we can determine the angle and distance to the blue and yellow goals. Using this, we can calculate our position within the field with trigonometry.

We make use of this position in certain situations: when the robot cannot see the ball, the robot will move to the centre of the field, and when the robot is a defender robot, it will check its position to make sure it stays near the goal.",https://drive.google.com/open?id=1Gqkjstkvw7ZxyYPZouv3EvVbVByG07X9,https://drive.google.com/open?id=1MTIBVpRw7w5063rmpWExugrC9iIr3KbK,https://drive.google.com/open?id=1QBPDvMx8iNSyVsMdJWouQk4eDoKlmnOC,https://drive.google.com/open?id=1pL0RBGDgGDwBNfUu-jwbmZATLiwwGTxu,https://drive.google.com/open?id=1E-4kjduOij59ChuthuqgaapiTqgq_AbL,https://drive.google.com/open?id=18yRtiWekv8vyjh-nl2GdsX0KLD1APqOj,https://drive.google.com/open?id=1juYq7iXuAZnmA38SeMOSZJOIJrVSTsLE,"We used Fusion360 to design the mechanical parts of the robot. Our design was based off of knowledge we had from competing in soccer last year, and also partly inspired by the posters of other teams.

The primary elements we considered and prioritised when designing the robot were: motor speed, dribbler ball control, and kicker speed.

We went through a number of iterations to improve the robot's design. Key changes we made were:
- Increasing the thickness of the 3d printed parts to prevent breaking
- Decreasing the diameter of the dribbler roller to make the dribbler more compact
- Incorporating heat-set inserts into the design to make joints between parts stronger
- Adjusting the position of the kicker solenoid to leave more space around the motors
- Adding a flat plate on the front of the kicker solenoid to allow for more contact area with the ball
- Printing the dribbler out of ABS instead of PLA since the PLA prints would sometimes melt","We used 3D printers to produce the main parts of the robot, out of PLA and ABS plastic.

We ordered the mirror to be CNCed by JLCCNC, which was the cheapest option we found (alternative services like Xometry and PCBWay gave us much more expensive quotes).

We ordered our PCBs to be produced and assembled by JLCPCB, which was also quite cheap and very fast shipping. However, there was an issue with our line sensor PCBs, in which we forgot to ground a few pins, causing the line sensors to behave unreliably. We had no time to order new PCBs, so we used extremely thin copper wire and fixed the board with careful soldering to make it work.","We are using 4 motors in our drive base, and 1 additional motor for the dribbler. Our main reason for using 4 motors is stability, especially when driving left and right, and additionally because the calculations for 4 omniwheel systems seem to be simpler to do than 3 omniwheel systems.

We built our own omniwheels so that we could control the exact size of our omniwheels. Commercial omniwheels that we found were either too small (which resulted in not enough clearance with the ground), or too large (which resulted in not enough space for the dribbler). Making our omniwheels allowed us to make them a size that was just right for our design.

Our omniwheels are 3D printed out of PLA. They are composed of two halves, which sandwich together to hold the subwheels in place. Our subwheels are silicone, and instead of using commercial O-rings or X-rings, we just cut a long silicone tube by hand into small wheels to use in our omniwheels.

The design files for our omniwheels are published on our GitHub which is linked further down.","Our kicker is solenoid-powered.  Mechanically, the kicker solenoid is firmly attached to the base plate using screws through the bottom of the base plate. In previous designs, we tried to attach the solenoid by surrounding it in plastic, but this would often break; a direct attachment to the bottom of the base plate proved much more reliable.

On the front of the solenoid is a flat kicker plate to increase the contact area with the ball. This kicker plate is 3D printed out of PLA. We inserted a M5 nut into the kicker plate while it was printing, securely fastening the nut into the kicker plate, which allows us to easily screw the kicker plate onto the front of the solenoid.","Our dribbler uses 2 gears, with a 3.5 to 1 gear ratio, to increase the speed of the dribbler bar.
The 28-tooth gear is mounted onto the dribbler motor, and the 8-tooth gear is printed with the dribbler bar. The dribbler bar rotates around a smooth 2mm steel rod. Crucially, we do not use bearings in our dribbler design to save space. The smooth 2mm rod offers a significantly lower friction than alternative options such as m2 screws, allowing us to omit bearings.

The dribbler bar has a 50mm long silicone roller on it to impart backspin onto the ball. To construct the silicone roller, we printed a mould out of PLA and poured 2-part silicone into it. For reference, the silicone takes around 4 hours to cure.

All the parts of the dribbler are printed out of ABS, because the dribbler gets quite hot while running and our PLA prints would often deform at these high temperatures.

The entire dribbler rotates around an axle, allowing it to move up and down slightly, to let it absorb the impact when the ball crashes into it. We had initially included a spring to dampen the shock, but we found that this was not necessary.

The design files for our dribbler are published on our GitHub which is linked further down.",https://github.com/MelbourneHighSchool/hikari3,N/A,"https://drive.google.com/open?id=1IG6cOY71_JipJEeditLNEoWx06SBuAMD, https://drive.google.com/open?id=1Ped7R0XLWRZ5eaoBK_K4Gbx7fnrvyhUj",https://drive.google.com/open?id=1lA5FwQ2pcGbYC-l_d2cMJhaaa_e0xo1J,"Our robot uses a 14.8V 4S LiPo battery.

A buck converter converts the voltage to 5V for our Raspberry Pi.
The Raspberry Pi internally converts the voltage to 3.3V, which our line sensors, display, and compass use.
The motor drivers run directly off battery voltage.
A boost converter boosts the voltage to 47V for our solenoid kicker.","We use commercial motor drivers to drive our motors, which communicate with our Raspberry Pi through I2C.","We use a Raspberry Pi 5 for our robot, with no other microcontrollers. The reason we are using a Raspberry Pi is for ease of programming: the Pi can be programmed wirelessly over SSH, and with simpler programming languages such as Python. 

However, the Raspberry Pi does have drawbacks: it has a higher latency than traditional microcontrollers, and it offers significantly less interfaces/channels than most microcontrollers (for example, the Raspberry Pi only has 2 PWM channels, compared to the ESP32 which has 16 PWM channels).","Our ball detection comprises of a Raspberry Pi Camera Module 3 Wide, facing up into a hyperbolic mirror. We modelled the hyperbolic mirror using the Conic Curve command in Fusion360, before ordering it to be CNCed by JLCPCB and polishing it by hand. 

Before ordering the mirror, we tested whether it would work using simulations and renderings in Blender. This allowed us to make adjustments to improve the mirror before actually manufacturing it, which was very helpful.

Our camera records a 60fps video of the mirror, which allows us to see the entire field. For every frame, we run Python code that uses OpenCV to detect blobs of specific colours (i.e. orange, yellow, blue) to detect the location of objects. We then filter out smaller blobs that could be noise and return the position of the largest object of each colour for the rest of the code to use.","Our line detection circuits are comprised of 24x LED + light sensor pairs and 3x 8-channel ADCs. The specific model of phototransistor we are using is the ALS-PT19 light sensor and it gives a very good range of values; we would definitely recommend this sensor to future teams. 

We have the LEDs constantly switched on, then the ALS-PT19 light sensor will measure the light level and the ADS7830 8-channel ADC we are using will send the value to our Raspberry Pi through I2C. When the value is high, it indicates the light sensor is above an area of high reflectivity, so it is likely the white line, and when the value is low, it indicates that it is not the white line.

Using the 24 light sensors positioned evenly around the line sensor, we can additionally determine the angle of the line based on which light sensors are high and low, which allows us to more efficiently avoid or follow the line.

The schematic and PCB for our light sensor are published further down.","We use the BNO085 IMU to ensure that our robot is facing in the direction we want it to. The BNO085 connects to our Raspberry Pi 5 over the I2C interface; the BNO085 also supports various other interfaces such as SPI if future teams would prefer to use that. 

To find our position in the field we use information from the camera to calculate our position based on the distance and angle to the blue and yellow goals. Initially we were intending to use time-of-flight sensors to find our position, but we decided to go with this camera-based approach to save space.","Our kicker system comprises of a solenoid, a boost converter, an optocoupler, 3 capacitors, a N-channel MOSFET, and a diode.

The goal is to drive the solenoid with a high voltage. However, for switching a high voltage, a relatively beefy MOSFET must be used, which can't be driven directly off the Raspberry Pi's 3.3v gpio voltage. In order to resolve this issue, we use an optocoupler to allow the Raspberry Pi to control a 16v current, which can easily switch the MOSFET. A diode is connected across the leads of solenoid to mitigate spikes of flyback voltage.","For our dribbler, we use a commercial motor driver, which communicates with our Raspberry Pi through I2C.",https://drive.google.com/open?id=1fg3S07mf558lJIqGrwR8CF-eLukGvdDE,https://drive.google.com/open?id=1cksdT82kHk5fpXW9l8Fv6v2OdZhLxb0J,N/A,"https://drive.google.com/open?id=1ssFlA3PW3S2rTra693ZH3h40snYPuOon, https://drive.google.com/open?id=1jXuCqcl_7QF8IJvm5eLsOGIFZ52nLsw-","Our motor drivers communicate with our Raspberry Pi 5 over I2C. The Raspberry Pi can send speed commands to the motor drivers, resulting in movement. ","To detect the ball, the Python code uses OpenCV to detect orange blobs in the camera frame. We filter out small orange blobs and assume that the largest orange blob is the ball. In order to read the data from the camera, we use the picamera2 library.","The attacking and defending robots have different behaviours.
The attacking robot first rotates until it directly facing the ball, then the robot drives forward.
The defending robot just drives left and right sideways, based on the ball's angle.","To avoid going out of bounds, our robot uses the line sensor PCB mounted on the bottom of the robot. We can determine the angle of the line by considering which light sensors on the PCB have been activated: by averaging the angles, we can determine the angle of the line. Then, when the robot detects that it is on a line, it can drive away from the line using that angle.","When the robot gets near the ball, it will turn its dribbler on automatically. Then, when the ball is captured and inside the dribbler, it will slowly turn towards the target goal. Once the target goal is directly in front of the robot, it will kick the ball at a high speed.","To defend against the enemy team, we have a dedicated defender robot that will stay close to our own goal. The defender robot mainly only moves left and right. To ensure the defender robot doesn't stray too far from our own goal, we constantly check the distance of the robot from the goal, and move it backwards if its going too far.",Our robots don't communicate with each other,N/A,https://github.com/MelbourneHighSchool/hikari3,https://drive.google.com/open?id=1jVHR6dG63v52kaGd6pKE1f2AuOcJGBM2,"Robots: 1950 AUD each
Experiments: 1400 AUD
Environment: 500 AUD

1 AUD = 0.66 USD","65% school
30% sponsors
5% parents",5,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",starryang544@gmail.com,,
7/13/2025 18:28:10,BULLBOTS,Lightweight League,BRAZIL,"yuriveiga09@gmail.com, andrique@gmail.com",we dont have,https://drive.google.com/open?id=1gduX75LSFcBtfDhlFhnmlfq2KjptBso6,"Davi (programmer), Yuri (Leader and constructions), João Marcelo (soldering and energy), Gustavo (soldering and energy).",2 days per week.,Davi's house,April,Brazil CBR National 2024: LightWeight league,"Components recommendation, soldagem and basic code language",WhatsApp and gmail,none,https://drive.google.com/open?id=1AS2tc-07FVSJz0zIsa4QZu3uL_OcoX88,https://drive.google.com/open?id=1N5501VXpb7WAS4m7dvAZFBRZ28u8FiaR,https://drive.google.com/open?id=1ALc4xZO8Pci3c6H5lokViIckWh5js7Cu,https://drive.google.com/open?id=1qZHnIYjK_TOj9FBJS1UKxYR13GUkT4u4,https://drive.google.com/open?id=1_RYuGw0yo2xiEgo08kDdAfBQzgOKmcH8,https://drive.google.com/open?id=1DLiD7Pn-hNTx1BYEAD76xHhOeSebhao4,https://drive.google.com/open?id=15waAHtHSkbqp_nWDtKJwMhpP5ImVHgnP,"Compass sensor, we use a compass to show were the goal is",https://drive.google.com/open?id=1I6oP8B-y78yJvKNnO4e6VHFWm-PrLK_z,https://drive.google.com/open?id=1JjuFhFGR31nEenUh3gPIju8yNLS-_Msl,https://drive.google.com/open?id=10ACsGfBll0_FBn83nu5glGtBd6LpEs-I,https://drive.google.com/open?id=10_b0muIgxmsKmK2C-SixXglVuk0TTyBd,https://drive.google.com/open?id=1d1b0nESoDjQxZIPlJMb-0E-B1_yJHVmt,https://drive.google.com/open?id=1Z9QKu_6PKTtMdkz9oUTiUrC3pvO1Jw_N,https://drive.google.com/open?id=1t0KgVEZoyXdNtOMD66rns6oWagXTAkUO,"We made drawings on paper of the structure, drew it in Corel Draw with the teacher, sent it for laser cutting;","we use drill, hot glue, screws, power modules and solder","we are using 4 motors, we opted for this number to make the movement more fluid",no kicker,no dribbler,we dont have,on the CBR 2024 we used only 3 wheels and for the 2025 season we improve to 4 wheels,https://drive.google.com/open?id=16XmxbLorerxl1_5xPsemcOlIfG2Y8_hY,https://drive.google.com/open?id=1qcKBm50pXa4m4Nc6owKaWfBWMg4GmUJP,our robot has a 12V battery and has a regulator to use only 10V for or motors and or board ESP32S3 Dev Module,we use a TB6612FNG board to control the motors,"our board is ESP32S3 Dev Module, we decide to use this board because is a technological and fast for programming","we use a infrared sensor TSSOP4038 to find the ball, he gives us a signal between 4095 and 0, and to have a larger detection we are using five of them","when the sensor that we use (Grayscale Sensor) finds the white line, he goes on the oposite direction of the line",we use the compass GY-80 to navigation and is connected in the I2C pin on the board,we dont have kicker ,we dont have dribbler,,,"the IR sensor that we have (TSSOP4038), because before we use the LEGO IR seeker, and now we are improving for the TSSOP4038",https://drive.google.com/open?id=19XIplwwRLazIIQ37mNAIobSf937N90Pt,"with the TB6612FNG we can know the signal and velocity of the motors, and then we can go to the code and tell what to do","we find the ball with ther IR SEEKERS sensors TSSOP4038, after our sensors read the data we go after the ball",we have a small opening in the front that fits and pushes the ball,"we use a Grayscale Sensor to find the white lines, and to avoid the white lines we use a code to go to the oposite direction when the sensors detect the line","we find the ball, go after her , fits on the small opening in the front and pushes. We doesn't use a kicker or a dribbler yet",we do not use a algorithms to avoid opponent team scoring,no,"we dont think like a innovation, but we use functions to improve and facilitate the directions",https://github.com/DCampinho,https://drive.google.com/open?id=1uqov8V7WXSZwROf3G987VCxNFeEfX6Fy,"Robots: 407 US Dollars 
Experiments: 960 US Dollars
Environment: 0 US Dollars",100% parents,4,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",andrique@gmail.com,,
7/13/2025 18:31:03,RoboNYC,Lightweight League,New York City,"Jessica Wang: jess888666@gmail.com
Audrey Shaker: shakeraudrey@gmail.com
Griffin Genieser: gbgenieser@gmail.com",N/A,https://drive.google.com/open?id=1OAotcn7bQHHj77UelD7etpHg3sGtnIQ6,"Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses. Since the question only allows us to attach one file, we only attached the PDF of this form, which does not show the attachments. We are submitting all attachments including BOM, photos, etc. in this google form, and will also email robocup2025@robocup.org.br our attachments. Similar information will also be included in the QR code of our poster, which links to a document with more information.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.",https://drive.google.com/open?id=1D68FZDcxZHjC4JwIbqrTs3mPqEREQ99y,https://drive.google.com/open?id=1T8WLqknEjWcO7z-fzxh3wEJFlg18vBZZ,https://drive.google.com/open?id=1EQRV4_EhjyG2FebWQQLWJqwigI1ReeA5,https://drive.google.com/open?id=17fytx0Fox9Qw7lmNtrJCJWk121RNXweN,https://drive.google.com/open?id=1x79WLyMJPhzMnfi37txvVLsdI2-oVxWv,https://drive.google.com/open?id=1YNVBtRU4CJaacgANGP6o4PpnjREAR-Tb,https://drive.google.com/open?id=1ZScPRxihNLP05kpybZQgR4Lp6o5WsXKc,"Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.",https://drive.google.com/open?id=1LcwFmiEceyXvCdygPRfGnSV_ocNoi2Q1,https://drive.google.com/open?id=1z9wYESBzpbPBHiRfAewXDo_R4_wtXvUW,https://drive.google.com/open?id=15S1xXqJcn46QCJ5n3iOCwjNcJsOywGKT,https://drive.google.com/open?id=1HtbM7aVCT_d09oYOurApzL9L8ojkm2rp,https://drive.google.com/open?id=1sdB2zLrYLwlW6W40SVoqjTQbsKVdKNXC,https://drive.google.com/open?id=1vvYt6cSMn27g6HWI6wuwG6YdMbry6Nzf,https://drive.google.com/open?id=1rKuW60CdcuS4wbpJSVO-Eu698xpciz0V,"Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","https://drive.google.com/open?id=1oEiU9Hkbpfv7Y5ib_oBAJM8eyUin_HEe, https://drive.google.com/open?id=1q-nS9ZoDtbDrovueZtKaNl9r0jkNi3Lv",https://drive.google.com/open?id=19zCisVw408x7HOkCDXVWejXbW5JaLXYF,"Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.",https://drive.google.com/open?id=1MeeGa5VlJEVulMf8B8J66agQbhJYUyiB,https://drive.google.com/open?id=1tAcgE5vnnzEWeK4wMTwqcAVCIwyVukHC,"Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","https://drive.google.com/open?id=1Acq-DWQ01iWhuHhfu3sTC7KLrH1XTRNP, https://drive.google.com/open?id=16m-r0f4WQM6Y_r6tagzqhEjuY9twvDK5, https://drive.google.com/open?id=1NzCAbP9128KvC1ZxqoztmW6OPyZ4scGI, https://drive.google.com/open?id=1l6BOeUU6RNgLM4FHrklHb1OFb_iRhe-t, https://drive.google.com/open?id=1Nx3T6L8N431jTQLpkO7MtCO132IdMta-","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.",https://drive.google.com/open?id=1_lsyyEsuZPppOboVnoEtuh5R644FJUcsJA2Hgmt3kdE,"Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.","Our TDP is over 10,000 words. Please see the PDF file attached in the first question of this form to see our answers to all of the questions that require word responses.",7,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",jess888666@gmail.com,https://drive.google.com/open?id=1sY05_cUObmh521_0IfD9_7dYE6bJIt3T,
7/13/2025 20:59:13,Roboticus,Lightweight League,The Netherlands,info@teamroboticus.nl,https://linktr.ee/team_roboticus,https://drive.google.com/open?id=1zPf8mDhQ8q1ZW5yv4iDsjmNvv-ftAFR0,"Aelyn Santos Cravo: Electrical engineer
Ayisha Rensch: Software engineer
Bram Modderman: Mechanical- and electrical engineer
Lucy Stasiak: Electrical engineer
Maksym Gurko: Software engineer
Micha van Houwelingen: Software engineer
Sophia Wieldraaijer: Software engineer
Twan de Brabander: Mechanical engineer",Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,https://drive.google.com/open?id=1kNyR0K4X1anM2VvSNKU8lLbwErYvjX7-,https://drive.google.com/open?id=1F-3V4JsDxSs2cJEjPMuSvQlxuFNzfEfo,https://drive.google.com/open?id=1rLnlEvvyOCFsqjMr4jl8ZH3QWT8xqs57,https://drive.google.com/open?id=1lOjPQoCbhDoYNHfBfrGeiASK5Dv9_qEr,https://drive.google.com/open?id=1PP9mXH_WX1fZEF2Z6vXSvcEc4sM2DTfh,https://drive.google.com/open?id=19yvuKmqvdyW-lM0jCxiDVoSk9TM0xU7k,https://drive.google.com/open?id=1hqkRMQZdN8L6H0gS4TGjQYKwjnnEaaec,Please refer to TDP answers document due to the google forms characters limit.,https://drive.google.com/open?id=1eTSuH-nhiQJwkL0hDLkh35aGOcyEEKbc,https://drive.google.com/open?id=1vLPW6ih8y59sLEBGT3hDON7fl_nLTKe-,https://drive.google.com/open?id=1a_GQuSnxUarB_Kg39bR0vwUNDTHi84j_,https://drive.google.com/open?id=16LLIo7mfxhZwjJdDKRbpxObyaVSKqY9r,https://drive.google.com/open?id=1emcRBqlup1k7f1tUf6QhHS2-QYy6RBSF,https://drive.google.com/open?id=18iy0w_o4xqYjQEZg72ekO4HV3O55l_Ef,https://drive.google.com/open?id=1wrol1u0z9EMbQPHD69mPbhAjiHuWUgzj,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,https://grabcad.com/library/2v2-lightweight-robot-1 and https://github.com/teamroboticus  ,Please refer to TDP answers document due to the google forms characters limit.,"https://drive.google.com/open?id=1yBDfaHUueHc2C3R37puk6D__Jr9OzsOT, https://drive.google.com/open?id=1QTmJJ927mW7cyZGVDhcOcoPX2sQW3g5O, https://drive.google.com/open?id=15cSCGpOUK0CtpIDFjIQj4i9k1Uk5Y3Mw, https://drive.google.com/open?id=1W2se53lUZh4ddSrFFRj4_wLEESRSNgY-, https://drive.google.com/open?id=1XwadYT8AShcDhtamnwpVlFQLme7TZM1G",https://drive.google.com/open?id=1zi_RQ9X_W49Qg-q62vshIQr-0B65IBkg,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,N/A,"https://drive.google.com/open?id=1zbhr1bLvXw_AmLdAfNiEHrCYhwpyLe_i, https://drive.google.com/open?id=1mzDVSTZ5S3ZoUO8Mvt9FbA4zuJR9TERb","https://drive.google.com/open?id=1wXuasYBaAPvL6OHipDlGJF95ZfFduHxq, https://drive.google.com/open?id=1HGp8GRzWqIb6-7vLAWFhEz5QsmD_VYu8, https://drive.google.com/open?id=1WiW6b-s53aal-zW6cSdxFzq8JzJ6ekjs, https://drive.google.com/open?id=1uXzOBNtY6b9l0pRDc0L1zm5l7HWRMkOj, https://drive.google.com/open?id=1HcnkKvfvlYCwc3k3OqVVw7sK8P9NvubH",Please refer to TDP answers document due to the google forms characters limit.,"https://drive.google.com/open?id=1fQ8OcPSduYaeg02no7VigM2XStQwRLBb, https://drive.google.com/open?id=1a3nTukef7RS13p3BeMTlBD4VQkCFMpUA, https://drive.google.com/open?id=1u-1GvwTW5O8N6RHdhX4DGdyC1gqWSd_W",Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,Please refer to TDP answers document due to the google forms characters limit.,https://github.com/teamroboticus,https://drive.google.com/open?id=1vDaXgQOIFdJ4Ad_qUhf4qDaVmH1MNnqc,"Robots with sponsoring: 1481.47 USD (1267.25 Euro) each
Robots without sponsoring: 2864.09 USD (2449.94 Euro) each
Experimenting and testing (estimation): 583,93 USD (500 Euro) in total
Environment: Unknown, but the new robotics lab must have cost our school a fortune.
","To build a competitive robot, having access to high-quality components is essential, but these parts can be expensive. That’s why this team has been investing a lot of time and effort in creating a strong sponsorship plan. By presenting our project professionally and showing our goals, progress, and potential, we were able to gain support from sponsors. This process took many years, as it can be hard to be taken seriously as a junior student team. But with the right amount of effort and proof of the team’s potential, we were able to strike deals with big companies related to robotics or a similar field. Which led us to be able to cut the total costs of our robots by almost 50%. This allowed us to afford more advanced and durable components, such as carbon fiber sheets, OpenMV cameras, Maxon Motors and many more discounted products. Thanks to this support, our robot is more reliable, efficient, and ready to perform at the highest level during the world championship. Besides the robots, the only reason why we are able to make it to Brazil and participate is thanks to our main sponsor Robeco, in return we will help them to reach their social goal to create equal opportunities for kids. We will be hosting free robotics workshops for kids with parents that are financially limited. With this we and Robeco hope to inspire the engineers of the future.",6,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",teamroboticus@gmail.com,https://drive.google.com/open?id=1Mufuuu259e6R5L6rzzicu3RGIrRN_9th,
7/14/2025 0:27:26,Gloves,Open League,Singapore,gloves25brazil@gmail.com,,,"Ong Jiunn Xiang: Electrical and Mechanical Design and Procurement
Peng Ruijia: Control Software, Systems Integration, and Game Logic
Andrew Gan: Computer Vision, Bot Communications and Game Logic
Tan Min Sen: Logistics Support","Average of 3 days a week during our after-school hours (average 5 hours per day)  During peak periods, we sometimes meet every day.",Our robotics room in school.,"September 2024, for our national competition (RoboCup Singapore). Created new designs for our robot after our national competition in April.",Singapore Open 2025: Open League,N/A - we did not have a coach this year.,"We have a team WhatsApp chat for daily communication and most online discussions, as well as a shared Google Document containing all our notes, pointers, schedule, and timelines. We also have a GitHub repository for sharing and collaborating on code.","Sometimes for debugging, we make use of generative AI like ChatGPT and Gemini to give us ideas on what could be the issue – especially when none of us had any further ideas to investigate. We obtained mixed results, sometimes the AI suggestions would be useful or would inspire us in a direction that led to finding out the problem, but sometimes the suggestions were completely off track too. ",https://drive.google.com/open?id=1Y4t9bHuvPv5c08m24tZio3KRxW3yaG1P,https://drive.google.com/open?id=1xWwIrAKR3yHIvbB5GKLtqp60IF8YDvnv,https://drive.google.com/open?id=1t3N5xS_d8h_I4LyjugYAt2a1HjqgPMDh,https://drive.google.com/open?id=1-ljCuBeXNYYZkcKExJ62ndJFE3dNXAUz,https://drive.google.com/open?id=13Si38fNw5KViEtBxk-5FtXJG12KngvzX,https://drive.google.com/open?id=1WCX0yN4nSepxgz-PWE0YUk7YBU-tYuqh,https://drive.google.com/open?id=1oLo9ouXYG3jVVjHCoSQfjJSOF2jjPhs1,"Our localisation subsystem is managed on our top plate, consisting of 20 LiDARs and 2 IMUs. This allows our robot to obtain its exact position and orientation on the field from the sensor data. Firstly, the absolute distance measurements from our ring of 20 LiDARs are converted into relative coordinates in our robot’s frame of reference. Next, we make use of a convex hull and rotating calipers algorithm to fit a rectangle around the data points obtained to find the walls of the field. Scaling this to the known actual field dimensions, we can convert the coordinates of our fitted rectangle back into the frame of reference of the field, to find the absolute position and heading of our robot. Coupled with the change in heading obtained from the IMUs, our novel LiDAR ring design allows our robot to know its location and direction at any point of the field, amidst any obstacles. 

Our robot makes use of a target coordinate movement system, and as our robot is able to obtain highly accurate localisation no matter its heading, we can achieve effective boundary control. Hence, we made use of this key ability to utilise more complex scoring methods, such as dribbling the ball along the side of the field, with the robot facing the boundaries, to limit view of the ball from other sides of the field.",https://drive.google.com/open?id=114XPVfigLYZCmuMDiAm2HeHa8qLF0ndF,https://drive.google.com/open?id=1zUL2TVNaN27a_jqhR3DizbX2nUQCDIk9,https://drive.google.com/open?id=1w6x-3yNzRqBniFots1Pq60sN93NhNIGS,https://drive.google.com/open?id=1Cm-kkaGYqj4-JVZgGaGUE6OnDoBHtCVC,https://drive.google.com/open?id=1L9Lm9_VDUhexO5IRmAQsHj8w7D3KhTnt,https://drive.google.com/open?id=10_Khj2ljmnGjgdjwRFPcW8-Cy1HBhGXy,https://drive.google.com/open?id=1nO_q50jLOx0b_GWboxplLErcfGdVcrTR,"For our CAD models we used onshape (an online CAD designer). We CAD’ed out our pcb outlines and then imported the DXF drawing into EasyEDA Pro, to design the electrical circuits and PCBs. We tried to make our robot as compact and low as possible to reduce the centre of gravity and prevent the bot from tilting during movement. This led to some minor adjustments being needed along the way to make space for certain parts.","We used a drill press and a drill to drill some of the stuff, and also an electrical screwdriver which proved really helpful in saving the time needed to screw in screws. We had PCB and CNC machining services from JLCPCB since the price was very cheap. ","We used 4 BE-3561 motors as we intended to have enough drivebase power not to be pushed around. The motors for the drivebase are arranged 90 degrees apart (in the conventional way) as that allows for simple, direct, and balanced movement control. On top of this, we decided to custom make our own wheels to achieve higher grip than the traditional GTF robot wheels. Our wheels ended up being higher friction than GTF robot wheels, while being lower cost, although it did take many iterations to get right. The older iterations aren’t far off, but just suffer from difficulty in assembly and shorter lifespan, so we currently use a mix of them.","We use a xl6019e boost converter chip to boost the 12V power from the LiPo battery to 48V, which we discharge through a 50 ohm current limiting resistor into ~2000uF of capacitance. We chose this value by trying out a range of up to around 5-10KuF and found that the kick strength for our solenoid remained approximately constant at 2KuF. We use a mosfet to switch the connection of the charged capacitors with the solenoid. This does come with issues as sustained activation of the mosfet can lead to our 50 ohm resistor heating up a lot and sometimes even desoldering itself, so we have to be careful to not kick too often.","Initially, we were going to use a smaller motor as we thought all we needed was speed and that the torque required was negligible, but after experimenting we realised this was not the case. We then tried be3561 motors which worked quite well for nationals, but even those were quite inefficient and burnt up a lot, melting our plastic gears too. For internationals we switched to a motor by Chihai (CHR-370SD) which was more efficient, and also used metal gears to prevent the need to repeatedly replace our dribbler. ",https://github.com/JiunnXiang/gloves-25-hardware,"We are most proud of the dribbler and omniwheels. The dribbler took a lot of trial and error to become so compact and resilient, and to be effective in capturing the ball and retaining possession of the ball. Our custom made omniwheels are also able to achieve better friction than the average GTF robots wheels, with our final models being quite resilient to damage as well, we have had very few damages throughout our testing and national competition periods.


Another interesting, mechanical design was our quick release top plate. During our national competition, we found that it was difficult to repair or replace parts on the bottom part of our robot due to the presence of the top plate, and ended up having to remove the top plate whenever we wanted to fix something and then putting the top plate back afterwards, which was overly time-consuming. Hence, we created a quick-release mechanism in our new robot design. The top plate would be attached through standoffs to two mini side plates. These mini side plates were then screwed into our middle plate through two larger hand screws (which could be screwed in by hand). While still maintaining structural rigidity of our robot, this quick release mechanism allows us to quickly hand-screw off and on our top plate within seconds, making repair of our robot parts like dribbler and front camera much faster, since we are no longer limited in space due to the presence of the top plate and can make use of tools like electric screwdrivers instead of small hex keys to remove or attach our parts. ","https://drive.google.com/open?id=1enJfhMlmCB833mdfSxiAxEZI_-zrp_xM, https://drive.google.com/open?id=1vZhfXSmrpfHpw9cEkSc2Q0vEZTr-6FmQ, https://drive.google.com/open?id=1rOIqi4amjaogAI1-iN498mSvxPk_qv5a, https://drive.google.com/open?id=1sGijQMDCyisj8iq-FMg7oP2xBFLizt32",https://drive.google.com/open?id=1OjqvfHBkBcxHguu1WfxaOON8Dapyt5rZ,"Our robots use a 3S LiPo battery for power. The 12V power from the LiPo powers our motor drivers and motors (both drivebase and dribbler), and is boosted to 48V for our kicker. The 12V power also goes through a 5V and 3V3 buck converter: the 5V is mainly used for powering LEDs and sensors, while the 3V3 is used for pullups and for our microcontrollers.",We made custom motor drivers with the DRV824X series chips to drive our motors. It communicates via daisy chained SPI to a RP2040-Zero microcontroller so as to take up less GPIO pins. Some bulk capacitance is added to our motor driver board to prevent brownouts.,Our robot makes use of a total of five microcontrollers – four RP2040-Zeros and one ESP32-S3-WROOM. Full details are provided in the attached file. ,"We use machine vision through two OpenMV H7 cameras to detect the ball. The first camera is placed at the centre of the robot, facing upwards at a distortion-free mirror, with a curve equation calculated such that the entire field can be reflected off the mirror into the field of view of the camera, and each unit of length on the field subtends the same angle of vision. The second camera is placed at the front of the robot pointing forwards, for an additional direct view of the front area. While the placement of this second camera and our dribbler would block some vision from our first camera, the second camera will be able to cover up the blind spots.","Our robot has 8 ALS-PT19 phototransistors, each beside an LED, that measure the amount of reflected light, which will be higher when it is on a white line, as that is more reflective than the rest of the green-coloured field. The 8 phototransistors are connected to a 74HC4051D analog multiplexer, which is connected to a RP2040-Zero microcontroller on our bottom plate through one ADC pin and three digital pins. The three digital pins are used for selecting the 1 specific channel out of 8 on the multiplexer to read, using a bitmask-like method: expressing the numbers 0 to 7 in binary form, and pulling the respective digital pin HIGH if the bit is 1, and LOW if the bit is 0. The respective analog value is read from each phototransistor, and an experimentally determined threshold is used for determining if the value corresponds to one on or off the white line. 
Originally, the previous version of our robot had 32 such phototransistors connected to 4 analog multiplexers. However, we realised that our robot is able to get accurate absolute positioning using our top plate LiDAR ring, and thus do not require extensive line detection to stay within bounds. Hence, we downscaled the number of phototransistors to just 8, which is sufficient for our usage. ","Our robot uses 20 LiDARs placed in a ring on our top plate, as well as 2 ICM-20948 IMUs for localisation. These sensors are connected to the top plate RP2040-Zero microcontroller for data receiving and processing. 
The LiDARs are connected to the RP2040 through two sets of (software) I2C buses, where the microcontroller reads the distance values from each LiDAR synchronously. The IMUs are connected to the RP2040 through two SPI buses, where the microcontroller derives the yaw angle using a 6-axis quaternion. 
The LiDAR sensors are used for finding the position of our robot on the field. Firstly, the absolute distance measurements from our ring of 20 LiDARs are converted into relative coordinates in our robot’s frame of reference. Next, we make use of a convex hull and rotating calipers algorithm to fit a rectangle around the data points obtained to find the walls of the field. Scaling this to the known actual field dimensions, we can convert the coordinates of our fitted rectangle back into the frame of reference of the field, to find the absolute position and heading of our robot. 
The same algorithm above also provides us with the heading of our robot, as it involves rotating the fitted rectangle to the standard cartesian axes of the field’s frame of reference. As such, we calculate a weighted average between this angle and the yaw angle obtained from the IMU for our robot’s final heading (with the IMU’s data being weighted at 99%). Originally, we pressed a tare button to set the value of the IMU reading when the robot was placed facing forward on the field as the offset. However, we realised that it was an unnecessary step as we could just use the change in IMU angle along with our previous known angle to find our robot’s new current angle. Even if the previous angle was inaccurate, for example having a default value of 0 on startup even if the robot was not facing completely forwards, the heading obtained from the localisation algorithm above using the LiDARs will slowly nudge the heading in the correct direction. Thus, with this system, we do not need to calibrate our IMUs as only the change in angle is used and not the absolute value of the angle itself. ","Our kicker is controlled by our ESP32-S3-WROOM microcontroller through a digital pin, by pulling it high and low with a short delay of around 200 milliseconds in between. 

For the kicker, we use a xl6019e boost converter chip to boost the 12V power from the LiPo battery to 48V, which we discharge through a 50 ohm current limiting resistor into ~2000uF of capacitance. We chose this value by trying out a range of up to around 5-10KuF and found that the kick strength for our solenoid remained approximately constant at 2KuF. We use a mosfet to switch the connection of the charged capacitors with the solenoid. This does come with issues as sustained activation of the mosfet can lead to our 50 ohm resistor heating up a lot and sometimes even desoldering itself, so we have to be careful to not kick too often. Hence, we implemented in software a minimum 2 second gap between kicks.","Our dribbler system consists of a CHR-370SD motor, also controlled using our custom motor drivers with the DRV824X series chips. Our main ESP32-S3-WROOM microcontroller uses SPI communication to set the motor driver into PWM mode, then uses analogwrite to generate a PWM signal on two digital pins to control the motor in each direction.","https://drive.google.com/open?id=1L2FCr9samnS1RS86B3ip2Uom5gt2mjga, https://drive.google.com/open?id=1r4ldDEDQIXaFmpSBRt-TSSWZoa4b0I4v, https://drive.google.com/open?id=1-VMmAosNmqXP6hIafz9QtEPfpBB5XThN, https://drive.google.com/open?id=1r9yYuQ48sPpa3nWvoqVef-C0-HMvxh74","https://drive.google.com/open?id=1C0gL8oAUJuBUogq4EmNKnCeJ3crLtzSx, https://drive.google.com/open?id=1Qf5a0B8ZEfMn5WCccMUlYND1PXdeguQl, https://drive.google.com/open?id=1fS2iqJRGxHFvDkU4MUq5AEQjnwE1iFpL, https://drive.google.com/open?id=1nPS5Ufy6ecH9fG2jVnZEZYIgHWiwCzBi","We are most proud of our kicker circuit. 
We use a xl6019e boost converter chip to boost the 12V power from the LiPo battery to 48V, which we discharge through a 50 ohm current limiting resistor into ~2000uF of capacitance. We chose this value by trying out a range of up to around 5-10KuF and found that the kick strength for our solenoid remained approximately constant at 2KuF. We use a mosfet to switch the connection of the charged capacitors with the solenoid. This does come with issues as sustained activation of the mosfet can lead to our 50 ohm resistor heating up a lot and sometimes even desoldering itself, so we have to be careful to not kick too often.","https://drive.google.com/open?id=1PPpS0DhG_4sUGFNg5YhKolncn1sOVDYZ, https://drive.google.com/open?id=1pLAiDCAsYX1ppxZ6ltGPTyoFe8aFKrW4",Details in attached file,Details in attached file,Details in attached file,Details in attached file,Details in attached file,Details in attached file,Details in attached file,Details in attached file,https://github.com/mango-milkshake/RCJ-Soccer-Open-2025 ,https://drive.google.com/open?id=1sw1y8FcUqjMUjJ8V6CesMRYzPxjVMTot,"Robots (cost of components): 750 USD
Experiments (testing, failed experiments): 400 USD
Environment (tools like soldering iron etc): 100 USD
Currency used in calculations was USD as most parts and tools were bought in this currency. 
Exchange rate: 1 SGD = 0.78 USD",100% school,3,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",pengrj2@gmail.com,https://drive.google.com/open?id=1wje4N5XsUnaigXpab1tNndpZ4eeXmmRw,
7/14/2025 3:01:36,chaBots Phoenix,Lightweight League,"San Luis Potosi, Mexico","Team’s Email: chabotsmx@gmail.com
Team’s captain Email: hugoigd1012@gmail.com 
And our social media.",All of our social media links are on this linktree. https://linktr.ee/chabotsmx ,https://drive.google.com/open?id=1-ozBuYxetk4796lFjstPDGj7Do_PHQnr,"Guillermo Alfonso De Anda Navarrete: High Level Software Developer
Honore Alesandro Villanueva Hernandez: Low Level Programmer, Mechanic
Hugo Ivan Guerrero Diaz: Team Captain, PCB Designer, Mechanical Designer, Mechanic
","3-4 times a week, depending on the workload. ",We meet at our workshop at a local robotics school called DojoRobot that sponsors us.,"Early concept for the robot started around September of 2024. However, we only started properly design the robot around early February of 2025 when we found our third team member.",Our team captain competed at the 2023 and 2024 RoboCup Mexican Open in the Soccer Lightweight division. As a team we have only competed at the 2025 RoboCup Mexican Open in the Soccer Lightweight division.,Our mentor has helped out mostly by bringing up to speed two of our team members in the area of programming. This was done to help our main programmer with the programming workload in the future.,"We used a combination of Discord and Whatsapp for communicating progress and arranging meetings. We used Trello for assigning tasks and goals. We used GitHub, Solidworks and Altium cloud services for design and code version control.
","We have used OpenAI’s ChatGPT LLM to help develop certain aspects in the robot’s software, such as acting as a mentor for unknown code libraries, or helping strengthen more technical aspects of the code, such as vector calculations and trigonometry. We even developed our own custom prompt for making it easier to interact with the LLM and having more useful answers.
",https://drive.google.com/open?id=1T5JMlNRVSQTqquAyiTimxyPMb6z6Um0q,https://drive.google.com/open?id=1kM3Ri48kmPjuN03I1Zh7Lhre1YsmE13S,https://drive.google.com/open?id=1RTibUxuo7EiovMV6JAdwM0GoWLD_JCaW,https://drive.google.com/open?id=1r1uhzFg61TZ_fD2USHKtOr3NrcOLw_Hr,https://drive.google.com/open?id=1TLCzJN1kE2bpkc91mjBnRJ7hCqpo6-Uj,https://drive.google.com/open?id=1WOcq2LHJ94vQG_-jcO8sO-o2mxZP_1t_,https://drive.google.com/open?id=1O1ttzLZar5nSEEQgjk8k_831a-sXZQA-,We mainly use the cameras to find our position inside the field. Mostly for centering our striker and keeping our goalkeeper in effective range to defend. We also use ultrasonic sensors but these might be more useful for technical challanges,https://drive.google.com/open?id=1aJRiM49Lhfmpty5qowIc3xXaJdTE5Fm1,https://drive.google.com/open?id=1gcHx7E0jfwNXiWBk2XGqm7pTzOnyvueI,https://drive.google.com/open?id=1EBhghwgHGNd3ltFIHpyOkjcSBV7XfoUE,https://drive.google.com/open?id=1Q1uToX6I3TYMy4bDfL3UEyH-1zOIyyZM,https://drive.google.com/open?id=16dh21JI2axFQgXvMoMrjJBQzuqV6BCnF,https://drive.google.com/open?id=1LEuy3YEXeQsEvX_soMV_8aDQF_C-256k,https://drive.google.com/open?id=1xzrvOwVNPLrGdyS5xBaAOujBiXeSpdXn,a,a,a,"Our robots use two very different solenoids, the JF-1264B and the JF-0837B both are bought and are not designed. One is a relatively small 1.5A  60g solenoid and the other is a very big and heavy 5A 360g solenoid.  The big difference in power and weight mainly comes down to us wanting less weight on our striker for the possible addition of a dribbler. ",Our striker robot has a very simple dribbler setup with an ESC and a brushless motor using timing gears and timing belts with a spring as a damper. However we are unsure if we will be able to integrate its function into our robot in time for Brazil. ,https://github.com/chaBotsMX/Phoenix-RCJ-2025/tree/main/CAD,a,"https://drive.google.com/open?id=1bBosXTMuqwPmvl_7muj-eNS06shD_yAY, https://drive.google.com/open?id=1MSnu0Tc2cgNtxBVGOj4aTr15E5_DhnsI, https://drive.google.com/open?id=1QRI027PLT5T2_3JvdJZJBeU5tqv_sPzN",https://drive.google.com/open?id=1FSll0vcrDcPr3JBmWR2fflBpIaNRKmaT,"We use two different batteries, a 11.1V LiPo to drive our motors and a 3.7V LiPo for our logic, none of these are directly regulated, however we use the Teensy 4.1s integrated 3.3 regulator to feed our phototransistors, ultrasonic sensors and IMU. We do however have a 48V boost circuit to charge our solenoid kicker with the 11.1V LiPo.
","We use the STM VNH7070-ASTR and the recommended circuit with reverse current protection to drive all of our brushed motors. We interface this with our main microcontroller using digital pins and PWM to modulate their speed and direction.
","We use 3 Teensy 4.1 microcontrollers for our robots control and sensors. We mainly decided on the Teensy 4.1 because of its amazing processing speed, the amount of pins, analog pins, UART ports and small form factor. Given all of this we are able to easily integrate one of these in each one of our PCBs.
","We use a circular array of 18 TSSP-4038 phototransistors to digitally read and calculate the direction and lose proximity of the ball, with aided proximity detection using analog IR photodiodes. All of the readings are processed by a Teensy 4.1 which is then sent to our main controller via UART. Our camera does not track the ball at all, we only use them to find gaps in the other teams defense.
","We use an array of 18 ALS-PT19 phototransistors in tandem with 18 programmable leds to read the changes in reflectivity depending on color. These phototransistors are read with the Teensy 4.1 analog pins which then processes the readings and sends them to our main controller via UART. Our line sensor PCB also has the option to switch into a digital and much faster read mode using a simple comparator circuit, however these readings can still be somewhat inconsistent which led us to continue using analog readings and do the transition threshold with programming.
",a,a,"It doesn't :(. We use a 12A ESC to interface with our main microcontroller and turn it on when in effective range.
","https://drive.google.com/open?id=1Sc8lz6X9uygmMlblJUYnjlxZm9PD6ipf, https://drive.google.com/open?id=1z4vRriFNucaS4vKBv7ri76VekjJ39R2b, https://drive.google.com/open?id=12pDH3StOgiv74h4-TQdf29j3Th4EhQDt, https://drive.google.com/open?id=1z8NS3NKKNIbPgIx3qKBsosrgfGW_OV4v","https://drive.google.com/open?id=1-p3kG8IH1E8cUBBMuPMkg1GgYdjuSxoY, https://drive.google.com/open?id=1btC04J0NpsMF7457IXeTeyNAZkXrhN4P, https://drive.google.com/open?id=16Y-npNH4ag3-uL_wYsKxfR8eQHiPVArF, https://drive.google.com/open?id=1d1RONx1i6SHkY4VJ-G6Bc6Rx3ZtmUFJ-","We are proud of our both analog and digital line sensor circuit although it still may need some work, however I believe the approach of reading the line sensor digitally will greatly aid us in the future. I am also very proud of the extra indicators we were able to add to this year's robot, this includes: buzzer, neopixel light array, screen and motor driver led indicators.
","https://drive.google.com/open?id=1Wt5KjUav-RRKQwkqFGR2bMBTu1HFzw7a, https://drive.google.com/open?id=1kcLgZQ7ZwGYzRabxoB4yJ_rwmDUXqW7i, https://drive.google.com/open?id=1-uhD8TT4PeUIAg31jj62TIL-GiMAL1iB",a,"For the ball localization, we rely on vector calculation based on the inputs of the 18 TSSP sensor array. This allows us to have precise knowledge of both angle and distance of the ball relative to the robot. To achieve this, we first approximate the pulse width of each detected pulse from every sensor, this allows us to have a certain value of intensity in detection of the ball. Then, we represent each sensor as a vector whose magnitude is relative to the detected pulse width, and its angle is the position of the sensor in the sensor array, and sum all of the components of every vector to form a final vector that represents the current position of the ball relative to all the detected sensors.  We also know when the ball is in the capture zone of the robot thanks to the analogic readings of IR photodiodes. After processing the sensors input and calculating a vector, we compress the angle and magnitude’s values to one byte each and send these bytes to the main Teensy through serial communication using UART.
","In our attacker robot, depending on the distance of the ball, is how the robot will move to catch it. When the ball is close, to avoid pushing the ball sideways, the robot drives tracing a circumference around the ball, and when the photodiodes are detecting IR signals, it means the ball is in front of the robot, thus, we know the robot is in control of the ball. And when the ball is far, the robot drives to the angle of the ball with a constant offset to avoid accidental collisions with the ball, and eventually the state will change to the ball being close.
On the other hand, the defense robot will mainly move in either left or right depending on the position of the ball to stop the opponents from scoring, and when the defender catches the ball, or knows the ball is in a neutral point, the robot can apply the same algorithm that the attacker uses for catching the ball and taking it to the opponent’s goal.
","We run vector calculations similar to our ball detection algorithm to detect the white lines. We first calibrate all of our sensors by saving the minimum analog value each sensor detects, thus, when the sensors detect a lower reading that the minimum detected in the field, means there’s a brighter color downwards the sensor. We do this calibration routine every time we power our line sensor so we don’t get affected depending on the ambient. After calibration, we represent every detected sensor as an unitary vector that represents the direction of where the line is being detected, and sum all of the vectors to have a concise knowledge of the angle where the line is being detected. We then send this angle to the main microcontroller, where the logic to drive the robot inside the field is to move to the opposite direction of where the line is being detected, and in case of the defender robot it will move along the line.
","As explained before, the robot follows a series of steps to catch the ball. Once the robot is certain the ball is in the capture zone thanks to the readings of an IR photodiode, the robot will execute another algorithm to score a goal: the robot will drive to an angle relative to the largest detected space of the color of the goal in front of the robot, and if the ball has been consistently in the capture zone for a determined time, means the robot can accurately kick the ball. If no goal is detected, the robot will only drive forward to help the ball going to the opposite side of the field. This algorithm helps us to constantly kick the ball inside the goal, allowing precise scoring.
","Our defense robot follows a special algorithm to defend our goal by driving along the white line in the penalty area of the field. First, the line sensor microcontroller now determines if currently the robot is at the left or right curve, or the straight line of the white line, and the position where the line is being detected. Then, with the received data, the main teensy performs a PD controller based on the Y axis position of the robot in the white line, and corrects itself to maintain alignment. At the same time, depending on the ball’s position, the robot will move either left or right, while giving priority to aligning with the PD controller, and will stop when it detects being positioned at a corner and the ball is in the same direction as the detected position inside the white line, this to avoid going out of the defensive area.
","Our robots can communicate with themselves through Bluetooth Low Energy using our ESP32 S3 based display. The data the robots send and receive to each other is the current state of the robots, being either enabled or disabled, this determined by the button each robot has that changes these states. This allows the robots to have knowledge of when the other robot is out of the field. We use this to determine if our defense robot should drive to catch the ball and attempt scoring, or if it should stay inside the defensive area to prevent opposing goal scoring.
","One aspect of the software that we are very proud of is the optimization of serial communication and loop times of our microcontrollers that we’ve managed from the national event to the world championship. During testing after the national competition, we looked forward to reducing latency between the communicating microcontrollers, and being able to receive sensor data and drive the robot as accurately as possible. We were able to do so by avoiding unnecessary trigonometry operations, constantly updating data every iteration of the code loop, and reducing the quantity of data being sent through UART. We shortened delays in serial communication by 2500%.
","https://github.com/chaBotsMX/Phoenix-RCJ-2025/tree/main/Software
",https://drive.google.com/open?id=1x-v0Xgm2STnyp60PqGCc2ORqz9aNfwMW,"An approximate of cost in mexican pesos:
Robot components: MEX $85,800
Experiments: MEX $10,000
Environment: MEX $8,000
MEX $1 = USD $0.05","An approximate in percentages:
10% parents, 10% our mentor, 80% sponsors.
",4,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",hugoigd1012@gmail.com,https://drive.google.com/open?id=1dv3X_B5KHM0FnDkGWjwLwWGe1dyz5ZoO,
7/17/2025 11:35:35,Team Elite,Open League,United States of America,"aniket.
apollotouch16@gmail.com
anaiya.badi@gmail.com
madhavendra.thakur@icloud.com",,,TDP file,"We mostly worked asynchronously, speaking once every few days and once every other week with the physical bot",TDP file,TDP file,TDP file,TDP file,TDP file,TDP file,https://drive.google.com/open?id=1NySOuIhYLBIgdn-QTybHLo8nm2tdTPP6,https://drive.google.com/open?id=11_9Cn3PqmjoIg7rSMlt0F9KbP46RZRcz,https://drive.google.com/open?id=1wQiP6FRkiV97efPC0asZwEW8ylsxDX_v,https://drive.google.com/open?id=1ppl3qUtTi7mwLTcM9irQckrssXdATWwV,https://drive.google.com/open?id=1xSCzkxdXoS4cskTkJz0E37lES7EOkj0n,https://drive.google.com/open?id=1eeAb0AipCdUPmjMbuIwFh-rEb5mrwKMp,https://drive.google.com/open?id=1ivHcYqKrhj0mXneBAahr-jHZGFT5gfw6,TDP file,https://drive.google.com/open?id=1njjDRd5dvn28jSB-YM6funKEJGBNEffn,https://drive.google.com/open?id=1rmvf1iTVmtD5kpZbTAWDGWSsreASBooc,https://drive.google.com/open?id=1Kz6jAU4BctuugiG1mjheX_nFCxP_yk0P,https://drive.google.com/open?id=1VWQUHPpfkWDCvq-r_LKEBZnwOxQ_OCP7,https://drive.google.com/open?id=1y3p0KDlHtLXsQ_FrRUF3XtUPXX0ZuXdU,https://drive.google.com/open?id=13wWZfX67fVgptmNwWW4uQUmAZDlRwtpS,https://drive.google.com/open?id=1VJjmztey4ThgK5xS-jUOL_QmPAN-fmAp,TDP file,TDP file,TDP file,,,https://cad.onshape.com/documents/c0d1176cae6604129d1a5a07/w/05284d4f133ac738f8a07c46/e/a22054de88fd6afbad675e38?renderMode=0&uiState=680a98b4deb2b93099687ff5,TDP file,https://drive.google.com/open?id=1WMkmUeaioXuvPRcCazSltEHzx12fMonj,,TDP file,TDP file,TDP file,TDP file,TDP file,TDP file,TDP file,TDP file,https://drive.google.com/open?id=1iaqyi_mmAisOQmx0wpuLwrTt1sV1qV4b,https://drive.google.com/open?id=1mcQyUFfAWRu6V1xUZtZozz7sX76W1lRl,TDP file,https://drive.google.com/open?id=1dyq6-Yo6H2h0GkSmrwYIsYnH-vyK7rV_,TDP file,TDP file,TDP file,TDP file,TDP file,TDP file,,TDP file,,https://drive.google.com/open?id=1qqjaZi5Yt-svvO9mlmeW1yISzebpgoNr,"Robots: 1000 dollars
","5% sponsors
95% parents",2,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",anaiya.badi@gmail.com,https://drive.google.com/open?id=1dYwMPYUCAigEyGNSWBUy8xOkw-1Xzp_XrZaE78Ku904,
7/18/2025 13:43:46,Crestwood Lions,Lightweight League,"Toronto, Canada","noahkassam@gmail.com, markussondan@gmail.com",@robocup.cpc,https://drive.google.com/open?id=1oamad_WO7e7w53wskoeyL6afM8YLuEn1,"From Left To Right: Kyle Andersen (Software), Kai Czylyski (Media), Hayden Patience (Hardware), Daniel Markusson (Software), Liam Stern (Media), Noah Kassam (Media), Jacky Zhang (Software)","We met twice a week normally during the school year, however when we got closer to tournaments our workload ramped up to 3-4 times a week in order to enhance our chances at performing well and fix any small last minute errors.","We were lucky enough to be provided with the entire back half of a classroom which we could dedicate to our robot, the components and tools we needed, as well as creating a solid replica of the field we play on during competitions to allow us to more easily test our robots.",We Started working on this years robot in August 2024.,"Over the course of our 3 years competing in RoboCup Junior, we have competed in 3 main tournaments. The first Lightweight RoboCup Junior tournament we competed in all 3 of these years was at St Andrew’s College, which is another private school near Toronto. The second major competition that we have participated in was our regional Lightweight RoboCup Junior competition that we also competed in all 3 years, which was located in Montreal, Quebec. The final Lightweight RoboCup Junior competition that we have competed in was the international competitions, both in the 2022-23 school year in Bordeaux, France, as well as this current 2024-25 school year where we are competing in Salvador Brazil.","When Daniel and Hayden first started working on the robots back in 2022, their mentor was their computer engineering teacher who helped teach them the ropes of building a robot like this through their school projects. He was instrumental in their journey to Bordeaux, France, as Daniel and Hayden had never built a robot before. However, in the next school year when the advanced robotics club was set to start, he left the school for another opportunity, leaving the team that had expanded to 8 members without a mentor to lead them. Then for the next few years, our mentors made very minimal contributions to our robot, and it was almost all designed and coded by our roster. This made the process more difficult than when the team had the computer engineering teacher, however it became an extremely valuable learning experience as we learned how to work as a team, stay on task, and solve problems ourselves.","When it comes to managing the workload of running a club, mentoring and teaching younger students, as well as staying on top of school work, it is certainly a tall task. However, the first way that we managed this workload is through delegating members to either being a member of software, hardware or media. This would ensure that instead of people being ok at a bunch of different aspects of the robot, they were  mastering and focusing in on one area of the robot. We also ensured that within those subcategories, we assigned certain algorithms or hardware components to different members to ensure that we were the most time efficient. ","When it comes to the utilization of AI tools, the only AI tool that we used in the construction of our  project was ChatGPT. When it comes to the media aspect, the main area where ChatGPT was used was in the process of condensing information and cutting out unnecessary information. When we were trying to shorten the wording of sentences and paragraphs to put on the poster and slideshow, ChatGPT was a very helpful tool in telling us what it believed was unnecessary information and then we made changes accordingly.",https://drive.google.com/open?id=1FfzU6tdDLlmGE1WdzPthPOY6Xlv1ZfDm,https://drive.google.com/open?id=1kUVOVk2K-ZlmHFmU-WOOhA6lR0Y1ueLw,https://drive.google.com/open?id=1aurYFUZ8WIaJk7Ph58OUt808TKGTIxGv,https://drive.google.com/open?id=1kUNY-TiBdJJO5ATVvjXAIAle61Ps6kI2,https://drive.google.com/open?id=1nwZTPix5vReASiyKNgwqVdkTvSghr-df,https://drive.google.com/open?id=1j0ug38COyH6Pg7sYyiNOmq_os_ZVgTKO,https://drive.google.com/open?id=1tL-V94EBHyHQUZi7qbkL_0bJA032tb47,"We use two sensors to know where we are and what direction we need to face: our Pixy 2.1 (camera) and BNO055 (gyroscope). Using simple trigonometry based on the size of the net, we are able to not only know the angle at which we need to rotate to face the opponent’s goal, but also see how far away we are from the net, giving us insight into our needed speed. The gyroscope is used as a fallback, during times when we cannot see the opponents—like when we are rotated 180 deg, for example.",https://drive.google.com/open?id=181_Wz-DBdpVhpMjDbXGL5-4TGtAQ8qCD,https://drive.google.com/open?id=1ixrx7Ol9_X4IEz9nqp3Us09F3WUhMlMK,https://drive.google.com/open?id=1d2uEb8eS2rGEKGxVqjZpjeQ6Gb5qnkpB,https://drive.google.com/open?id=1kt0BSygLyEN8LGyROFH50Eyhurfz6Ij7,https://drive.google.com/open?id=1P9eImdzg0aPRLZrt9544WzHRWncPLq7R,https://drive.google.com/open?id=1aOhv4MUi2h3_Zhc_RD6LcKxDnqgKJWLU,https://drive.google.com/open?id=1PJDjp4lCTuelmrQKoKmfR2w6G8ruMxb8,"While our robot was designed for soccer, it shares design inspiration with robots like Ziggo, a well-known BattleBot. Ziggo’s circular frame was used to protect internal components and wheels during high-impact combat. Similarly, our circular design offers structural protection, keeping the omni wheels safely enclosed within the frame. However, while Ziggo uses a differential drive to spin and attack, our robot uses omni wheels for smooth, multi-directional movement—better suited for agile, precise control on the field.
We selected our components based on performance, reliability, and suitability for competitive robotic soccer. ALS-PT19 ambient light sensors were used for boundary detection due to their fast response and ability to detect brightness differences on the field. For ball tracking, we used 16 infrared sensors tuned to 38 kHz, which can reliably detect the modulated IR signal emitted by the ball. A Pixy 2.1 smart camera was added to provide real-time vision for goal detection, complementing the IR system. At the heart of the robot is a Teensy 4.1 microcontroller, chosen for its high processing speed and multiple I/O ports, BNO055 for accurate direction readings, along with MCP3008 ADCs to handle the analog light sensor inputs.Many of the components were chosen because they are widely used and trusted by most teams, making them a proven standard in robocup lightweight soccer.","Our robot features a circular chassis with a front cutout, a layout chosen to improve movement, protection, and sensor integration—key factors for success in fast-paced robotic soccer. The circular frame allows us to maximize internal space and fully enclose the wheels, protecting the drive system from collisions and impacts during gameplay. This shape also improves overall durability and makes the robot easier to maneuver, especially with an omni-directional drive system. The cutout at the front gives the robot better access to the ball. A vertical frame holds the Pixy 2.1 vision camera at a higher position, allowing the robot to detect goals and field objects clearly. This visual input supports more accurate offensive plays when combined with the IR ball-tracking system.
",We used 8 motors because we found that it had the best balance between high speed while also having high control.,,,https://cad.onshape.com/documents/ce2816c27266bdc816e29d39/w/327935e8ca26093c69276721/e/78f97841209d7d1f2fb6a9fd?explodedView=MtexPOjKLwpWeQlcq&renderMode=0&uiState=6869e9cce8839440d4d8ad9d,"A mechanical system that we were very proud of was the custom made structure of the Robot. Hayden and his hardware team custom built both an aluminum base plate and carbon fibre reinforced nylon shield, which both were integral structural components to our robot. The aluminum plate was crucial to the functionality of our robot as it allowed many different major subsystems to be mounted onto it, as well as staying lightweight and strong to ensure it didn’t fall apart. Then, the custom built carbon fibre nylon reinforced shield was also an instrumental part of our success, as it was able to absorb the kinetic energy that was generated through the collisions during the game and still stay strong to protect our internal electronics. ",,,"Our power circuit begins at the battery just like every robot. The robot goes through the voltmeter and then it goes to a set of dual independent switches.  One of these switches leads to a DC DC Buck Converter, and the other leads to the motor drivers. That buck converter is used in order to turn the voltage from 12V down to 5V, because all of our components that we use except for the teensy use 5V instead of 12V. For the teensy that utilizes only 3V, we have a series of resistors that are able to lower the voltage. Finally, we have a JST acting as a power bus that is used to plug in all boards to the power.
","When it comes to driving our motors, our methodology of driving our motors is a bit unconventional due to our wheels not being exactly 90 degrees from each other. Due to this fact, our software team determined that we needed to use some simple trigonometry in order to calculate the amount of power that we put into the motors. We do some simple linear algebra to calculate the one-dimensional vector of each wheel using the two-dimensional movement vector of the robot. This allows our robot to move in any arbitrary angle, helping us catch the ball and put it into the opponent’s net. 
","On both of our robots we decided to use a Teensy 4.1 as our microcontroller.  We used the Teensy 4.1 because it has high speed, a very large memory capacity, a large amount of GPIO pins and a small form factory.
","On our top board, we have 16 IR sensors distributed equally in a circle. To find the ball, we calculate the midpoint between all IR sensors that detect the ball, and use that midpoint to calculate the angle where the ball is relative to our robot. The camera finds the goal and gives us the width and height of the frame that detects the goal. Using the change in width and height of the frame, we can determine how close or how far the goal is relative to our robot. The location of the center of that frame tells us where we want the robot to point at all times.
","Our line detection circuit begins with an ambient light sensor which are connected through voltage dividers to read the light that is reflected from the field. In order to increase the amount of contrast there is between the white and green colours on the field, we have an LED ring made up of 16 LEDs to provide light underneath the robot. These analog signals are then sent to our MCP3008 ADCs, which convert them and allow SPI communication with the teensy.
","When it comes to navigating the field, the three main ways we navigate are through our camera, our IR receivers, and our compass which are all connected back to connectors on our main PCB. When it comes to the camera, we are able to figure out where we are located on the field by looking at the size of the goal we are attacking relative to us. Then we can use basic trig in order to determine where we are located on the field. Secondly, we are able to use our TSSP4038 IR Receivers in order to find out where the ball is, which will allow us to attack and move towards the ball accordingly. Finally, we use our compass to find the orientation of the robot when we are unable to use our camera.

We use two sensors to know where we are and what direction we need to face: our Pixy 2.1 (camera) and BNO055 (gyroscope). Using simple trigonometry based on the size of the net, we are able to not only know the angle at which we need to rotate to face the opponent’s goal, but also see how far away we are from the net, giving us insight into our needed speed. The gyroscope is used as a fallback, during times when we cannot see the opponents—like when we are rotated 180 deg, for example.",N/A,N/A,,"https://drive.google.com/open?id=1BoywD3vQjYVuCFh2RQj-iTBY_NzFRilO, https://drive.google.com/open?id=1QPaQaKyn7P2jeCEqqsa-Cey2O7bMpmMN","We believe that the part of the Robot’s Electronic System that we are most proud of is definetly our colour sensor that was utilized for the boundary detection system. When it comes to the components of our robot, the colour sensor was always kind of the problem child for our robot. Hayden and our hardware team spent 100+ hours working and working on that colour sensor over the course of this past year and a half, as it would constantly have bugs and errors. Then once it finally worked correctly and was able to be implemented perfectly, it was the most satisfying feeling and made us all very proud. 
",https://drive.google.com/open?id=1tMkJdnF3-xSTe-5tgOH-lzh_chNH_O0H,"We use two MDD38 motor drivers to control the speed—using PWM—and direction—by inverting motor poles. Then, we are able to combine data from all our sensors and determine what direction we need to go and where to face. For example, if we read that the ball is at a 45 deg angle from the robot, we first check if we are out of bounds, if so, that trumps everything and we need to get back in bounds by going in the opposite direction of the white line; then we check if we aren’t facing the net if so, we add a rotation force to the motion vector of the robot. Finally, after doing all of these preliminary checks, we are able to move the robot in the direction of the ball.
","We use an array of TSSP4038 IR sensors to detect where the ball is. From these readings, we take the midpoint of all the activated IR sensors in order to calculate an angle and locate where the ball is relative to our robot.
","There are a couple of cases pertaining to where the ball is. First, if the ball is in front of us, we simply go grab it. Second is if the ball is directly to the left or right of the robot, we need to add a small amount of backwards movement to the robot so it can successfully catch the ball and not just nudge it into the wall. Finally, if the ball is behind us, we need to perform a U-turn-style manuver in order to catch the ball within our zone.
","Our robot’s boundary detection mechanism is built around a ring of 16 ambient light sensors—clones of the ALS-PT19 phototransistor—paired with 16 surface-mounted white LEDs. Each sensor detects reflected white light intensity from the playing surface directly beneath it. Since boundary lines are typically brighter than the surrounding field (e.g., white lines on a green surface), this differential in light allows the robot to determine when it crosses out of bounds. We are then able to use our colour sensor along with this contrast in the lights that is detected by our ambient light sensors to tell when our robot hits a white line, and then we can make it stop before it goes out of bounds.",_,"Our robots do not have a defensive algorithm. We use the same ball catching algorithm, which performs well as a defense. ",,"The part of the code that I think we are the most proud of is the fact that our robot can move in any arbitrary  direction. This makes us the most proud because we had just learned about how we can perform these functions in calculus class. Most of the time when you are at school, you hear people say “well when will we ever need this in the real world,” or “this won’t ever help me in anything other than school.” However, learning calculus concepts in class and then successfully applying them to the coding of our robot was something that we were all very proud of.
","https://github.com/Dmarky9873/RoboCup-Junior-2025
",https://drive.google.com/open?id=1mNhX5cpUQ2MmViXgeHQyydBJz-KsIvg1,"Total Robot Cost Over 3 Years: $8,171.68
Final Components in Robot: $1,071.68
Money Spent during Trial And Error: Approximately $6,500
Cost of Tools/Environment Used To Build Robot:  $600","How Did You Gather Funds to Build Robots:
25% Sponsors
60% School
15% Parents",7,Yes!,"Yes, we acknowledge everything submitted in the above form can be published.",noahkassam@gmail.com,https://drive.google.com/open?id=1DlJjJilbLdYLnUg3b121DCm3fQoU_24i,